{"config":{"lang":["es"],"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"Bienvenido a Vimsual Codium ## \u00cdndice de contenidos 01 Introducci\u00f3n 02 Instalaci\u00f3n 03 Primeros pasos 04 Movi\u00e9ndote 05 Operadores 06 Lenguaje secreto 07 Insertar texto 08 Seleccionar texto 09 Coincidencias de b\u00fasqueda 10 Copiar y pegar 11 Modo l\u00ednea de comando 12 Divisiones y pesta\u00f1as 13 Vim-surround 14 Asignaciones personalizadas 15 M\u00e1s rapido 16 Cursores multiples 17 Macros 18 Explorador de archivos 19 VSCode con Neovim 20 Teclas pr\u00e1cticas 21 Ep\u00edlogo","title":"Bienvenido a Vimsual Codium"},{"location":"#bienvenido-a-vimsual-codium","text":"## \u00cdndice de contenidos 01 Introducci\u00f3n 02 Instalaci\u00f3n 03 Primeros pasos 04 Movi\u00e9ndote 05 Operadores 06 Lenguaje secreto 07 Insertar texto 08 Seleccionar texto 09 Coincidencias de b\u00fasqueda 10 Copiar y pegar 11 Modo l\u00ednea de comando 12 Divisiones y pesta\u00f1as 13 Vim-surround 14 Asignaciones personalizadas 15 M\u00e1s rapido 16 Cursores multiples 17 Macros 18 Explorador de archivos 19 VSCode con Neovim 20 Teclas pr\u00e1cticas 21 Ep\u00edlogo","title":"Bienvenido a Vimsual Codium"},{"location":"014_asignaciones_personalizadas/","text":"ELEVANDO SU FLUJO DE TRABAJO CON ASIGNACIONES PERSONALIZADAS Una de las mejores caracter\u00edsticas de Vim es su personalizaci\u00f3n. Una forma sencilla de comenzar a personalizar Vim y una que tendr\u00e1 el mayor efecto en su codificaci\u00f3n diaria es crear asignaciones personalizadas . Un mapeo en Vim es el equivalente a un atajo en otros editores pero con un fuerte enfoque en las melod\u00edas de teclas que son tan naturales para Vim. \u00bfPOR QU\u00c9 MAPEOS PERSONALIZADOS? Las asignaciones personalizadas son \u00fatiles por dos razones: Le permiten personalizar Vim y adaptarlo a su forma de trabajo mediante la creaci\u00f3n de asignaciones personalizadas para las cosas que utiliza con frecuencia. Le permiten priorizar la funcionalidad de Vim acerc\u00e1ndola a su alcance. Mediante el uso de asignaciones personalizadas, puede crear una jerarqu\u00eda de comandos donde se puede acceder a los m\u00e1s \u00fatiles desde el producto de su fila de inicio y a los menos \u00fatiles a trav\u00e9s de combinaciones de teclas c\u00f3modas, pero m\u00e1s largas CREAR ASIGNACIONES PERSONALIZADAS Puede crear asignaciones personalizadas utilizando las preferencias de Visual Studio Code: Abra la paleta de comandos con CMD-SHIFT-P o CTRL-SHIFT-P Preferencias de tipo Seleccione las preferencias: abrir las opciones de configuraci\u00f3n del usuario Tipo vim Y filtrar\u00e1 sus preferencias de Visual Studio Code para mostrar solo las relacionadas con VSCodeVim. Ahora puede usar la siguiente configuraci\u00f3n para agregar sus asignaciones personalizadas en diferentes modos: Asignaciones de teclas en modo normal No recursivas para modo normal Enlaces de teclas del modo visual No recursivo para el modo visual Vinculaciones de teclas del modo de inserci\u00f3n No recursivo para el modo de inserci\u00f3n Tener diferentes asignaciones para diferentes modos tiene sentido porque cada modo es una pizarra limpia donde puede redefinir asignaciones para realizar tareas espec\u00edficas de ese modo. Eso le permite reutilizar el teclado del estado real del teclado en cada modo y tener una funcionalidad potente cerca de sus dedos. Tenga en cuenta que esta configuraci\u00f3n solo se puede cambiar a trav\u00e9s de la json versi\u00f3n de la configuraci\u00f3n: Un mapeo personalizado normalmente toma la siguiente forma: { \"vim.insertModeKeyBindingsNonRecursive\": [ { \"before\": [\"j\", \"k\"], \"after\": [\"<ESC>\"] } ], } D\u00f3nde: antes es la secuencia de comandos que escribe. despu\u00e9s es a qu\u00e9 se asignan los comandos anteriores y qu\u00e9 se ejecuta cuando los escribe. En el ejemplo anterior, cada vez que escribimos la secuencia jk en modo Insertar ser\u00e1 el equivalente a escribir `**y, por lo tanto, nos llevar\u00e1 de vuelta al *modo Normal* . Esta es una gran asignaci\u00f3n personalizada que hace una tarea sin fisuras muy com\u00fan, ya que ambos ** j **y ** k` est\u00e1n en la fila casa y s\u00f3lo por debajo de su mano derecha. Agregue esta asignaci\u00f3n a su configuraci\u00f3n y ver\u00e1 que surte efecto tan pronto como guarde su configuraci\u00f3n. Ahora intente ir al modo Insertar y escriba jk una sucesi\u00f3n r\u00e1pida. ijk , ijk , ijk ... Se debe fluir suavemente como una corriente pac\u00edfica o como la mantequilla caliente sobre una tostada. PAUTAS PARA CREAR ASIGNACIONES PERSONALIZADAS La capacidad de crear asignaciones personalizadas le brinda mucha libertad y flexibilidad para definir c\u00f3mo interact\u00faa con Visual Studio Code. Pero debido a que no hay nada que lo detenga por hacer lo que quiera, puede terminar peg\u00e1ndose un tiro en el pie. Aqu\u00ed hay algunas reglas que lo guiar\u00e1n cuando cree sus propios mapeos personalizados y guarde esos preciosos dedos de los suyos: En general, use la tecla l\u00edder para definir sus asignaciones personalizadas. La clave l\u00edder es una clave especial en Vim cuyo prop\u00f3sito es actuar como un espacio de nombres o puerta de enlace a las asignaciones definidas por el usuario. De manera predeterminada, la tecla l\u00edder se asigna a la tecla de barra diagonal inversa \\ . Si hay algo en su flujo de trabajo que usa todo el tiempo, entonces est\u00e1 bien (de hecho se recomienda) sobrescribir un enlace Vim predeterminado menos \u00fatil. Esta es la excepci\u00f3n a la regla. Crea asignaciones que sean f\u00e1ciles de recordar. Sigue la tradici\u00f3n de Vim y conf\u00eda en la mnemotecnia. (Recuerde? c Para c ambio, d para d elete, y tal ...) Si estas reglas parecen demasiado abstractas, no se preocupe, en las siguientes secciones las haremos m\u00e1s pr\u00e1cticas ya que definimos una serie de asignaciones personalizadas que puede agregar a su propia configuraci\u00f3n VSCodeVim. PERSONALIZAR LA CLAVE DE L\u00cdDER Puede cambiar la clave de l\u00edder a algo m\u00e1s f\u00e1cil de escribir que la barra invertida \\ (no lo conozco, pero odio tener teclas importantes asociadas a mis dedos me\u00f1iques me\u00f1ique ). Mi favorito personal es la barra espaciadora, que es muy conveniente para escribir con ambas manos. Vaya a sus preferencias de VSCode y actualice la siguiente configuraci\u00f3n: { \"vim.leader\": \"<Space>\", } De ahora en adelante, cada vez que vea un mapeo personalizado que se refiera a **usted, puede traducirlo en su cabeza ** . ALGUNAS BUENAS ASIGNACIONES PERSONALIZADAS Aqu\u00ed hay algunos otros excelentes ejemplos de mapeos \u00fatiles: MOVERSE HACIA ARRIBA Y HACIA ABAJO M\u00c1S R\u00c1PIDO EN MODO NORMAL Estas asignaciones le permiten moverse hacia arriba y hacia abajo m\u00e1s r\u00e1pido en modo Normal (aunque son igual de \u00fatiles en modo Visual ): { \"vim.normalModeKeyBindingsNonRecursive\": [ { \"before\": [\"J\"], \"after\": [\"5\", \"j\"] }, { \"before\": [\"K\"], \"after\": [\"5\", \"k\"] }, ] } De ahora en adelante podr\u00e1s usar: J bajar m\u00e1s r\u00e1pido K subir m\u00e1s r\u00e1pido Esto coincide perfectamente con la idea de Vim de que los comandos en may\u00fasculas sean versiones m\u00e1s fuertes de los comandos en min\u00fasculas. Es decir, le J permite moverse m\u00e1s r\u00e1pido j y K m\u00e1s r\u00e1pido que k . Aqu\u00ed hemos sobrescrito dos enlaces predeterminados de Vim porque navegar por el c\u00f3digo hacia arriba y hacia abajo es algo que har\u00e1s todo el tiempo. Mientras que J (unir l\u00edneas), aunque es \u00fatil, es algo que solo haces de vez en cuando. K se usa para la b\u00fasqueda de palabras clave pero a\u00fan no se implementa en VSCodeVim. SEGUIR UNIENDO L\u00cdNEAS Unir l\u00edneas sigue siendo \u00fatil, as\u00ed que vamos a mantenerlo. Aunque rebajaremos su importancia en la jerarqu\u00eda haci\u00e9ndolo un poco m\u00e1s dif\u00edcil de escribir. Actualice su configuraci\u00f3n de VSCodeVim para incluir esta nueva asignaci\u00f3n: { \"vim.normalModeKeyBindingsNonRecursive\": [ { \"before\": [\"<Leader>\", \"j\"], \"after\": [\"J\"] }, ] } Entonces, cada vez que escriba j , Vim lo traducir\u00e1 J y unir\u00e1 dos l\u00edneas. \u00a1Pru\u00e9balo! j no es tan r\u00e1pido como simplemente escribir, J pero es lo suficientemente bueno en funci\u00f3n de la frecuencia con la que unir\u00e1 l\u00edneas. La mnem\u00f3nica en este caso es j jin. CAMBIO M\u00c1S F\u00c1CIL ENTRE DIVISIONES Cambiar ventanas divididas es algo que har\u00e1s todo el tiempo, as\u00ed que prueba estos enlaces: { \"vim.normalModeKeyBindingsNonRecursive\": [ { \"before\": [\"<C-h>\"], \"after\": [\"<C-w>\", \"h\"] }, { \"before\": [\"<C-j>\"], \"after\": [\"<C-w>\", \"j\"] }, { \"before\": [\"<C-k>\"], \"after\": [\"<C-w>\", \"k\"] }, { \"before\": [\"<C-l>\"], \"after\": [\"<C-w>\", \"l\"] }] } Te har\u00e1n mucho m\u00e1s r\u00e1pido y \u00e1gil cuando atravieses divisiones porque requieren una pulsaci\u00f3n de tecla menos. MANEJO DE PESTA\u00d1AS M\u00c1S F\u00c1CIL La \u00fanica forma de interactuar con pesta\u00f1as en VSCodeVim es a trav\u00e9s de comandos que requieren que escriba dos puntos seguidos de un mont\u00f3n de letras. Podemos hacerlo mejor: { \"vim.normalModeKeyBindingsNonRecursive\": [ { \"before\": [\"<Leader>\", \"t\", \"t\"], \"commands\": [\":tabnew\"] }, { \"before\": [\"<Leader>\", \"t\", \"n\"], \"commands\": [\":tabnext\"] }, { \"before\": [\"<Leader>\", \"t\", \"p\"], \"commands\": [\":tabprev\"] }, { \"before\": [\"<Leader>\", \"t\", \"o\"], \"commands\": [\":tabo\"] }] } Aprovechando la `` clave, ahora podemos abrir nuevas pesta\u00f1as, movernos y cerrar todas las pesta\u00f1as excepto la actual. \u00bfNot\u00f3 algo diferente acerca de estas asignaciones personalizadas? \u00a1Exactamente! Utiliza una sintaxis ligeramente diferente al asignar teclas a comandos. En lugar de usar before y after . Usamos before y commands . commands representar los comandos Ex o los comandos nativos de Visual Studio que deben ejecutarse cada vez que escribimos la asignaci\u00f3n de teclas definida por before . LIMPIEZA DE TEXTO RESALTADO Cuando busque patrones en Vim utilizando los comandos /{pattern} y ?{pattern} , se resaltar\u00e1n los patrones coincidentes. Para eliminar los resaltados, puede usar el comando :noh ( sin resaltado ). Esta es una tarea tan com\u00fan que prefiero la siguiente asignaci\u00f3n: { \"vim.normalModeKeyBindingsNonRecursive\": [ { \"before\": [\"<Leader>\", \"/\"], \"commands\": [\":noh\"] }] } Ahora puede escribir / y deshacerse de los resaltados hasta su pr\u00f3xima b\u00fasqueda. El mnem\u00f3nico es el / que normalmente se usa para buscar un patr\u00f3n. Por lo tanto, puede pensar /{pattern} en algo que hace para comenzar una b\u00fasqueda y / como algo que hace cuando termina una b\u00fasqueda. CREAR ASIGNACIONES PERSONALIZADAS PARA ACCIONES VSCODE Otra cosa genial que puede hacer con VSCode es usar asignaciones de Vim que activen los comandos nativos de Visual Studio Code. Por ejemplo, el siguiente enlace: { \"vim.normalModeKeyBindingsNonRecursive\": [ { \"before\": [\"leader\", \"w\"], \"commands\": [ \"workbench.action.files.save\", ] } } Vamos a guardar un archivo mediante la w activaci\u00f3n de la \"workbench.action.files.save\" acci\u00f3n VSCode . \u00bfC\u00d3MO ENCONTRAR LOS NOMBRES DE LOS COMANDOS? Descubrir qu\u00e9 comando hace qu\u00e9 en VSCode no es realmente evidente, es decir, si hubiera querido saber que guardar cosas en VSCode es dif\u00edcil workbench.action.files.save habr\u00eda adivinado eso. Entonces, \u00bfd\u00f3nde puedes encontrar esa informaci\u00f3n oscura? Abra la paleta de comandos, escriba teclado y seleccione Preferencias: Abrir atajos de teclado . All\u00ed encontrar\u00e1 todos los comandos que est\u00e1n disponibles dentro de VSCode, incluido su nombre de comando completo. \u00daselos siempre que desee crear asignaciones personalizadas para acciones nativas de VSCode. Advertencia : cuando busca un comando, el nombre completo del comando solo se mostrar\u00e1 si la condici\u00f3n del filtro es parte del nombre. Si el nombre del comando no se muestra despu\u00e9s del filtrado, puede pasar el mouse sobre el nombre del comando y una informaci\u00f3n sobre herramientas revelar\u00e1 su nombre completo. Veamos otro ejemplo. Hay cuatro caracter\u00edsticas en VSCode que encuentro extremadamente \u00fatiles: La paleta de comandos ( CTRL-SHIFT-P o CMD-SHIFT-P ) Ir al archivo ( CTRL-P o CMD-P ) Ir al s\u00edmbolo en el archivo ( CTRL-SHIFT-O o CMD-SHIFT-O ) Ir al s\u00edmbolo en el espacio de trabajo ( CMD-T o CTRL-T ) La paleta de comandos y el s\u00edmbolo Ir al archivo son particularmente dif\u00edciles de escribir, as\u00ed que creemos una asignaci\u00f3n personalizada para mantener nuestras mu\u00f1ecas saludables: { \"vim.normalModeKeyBindingsNonRecursive\": [ { \"before\": [\"<Leader>\", \"p\"], \"commands\": [ \"workbench.action.showCommands\", ] }, { \"before\": [\"<Leader>\", \"t\"], \"commands\": [ \"workbench.action.gotoSymbol\", ] } ] } Ahora ya no necesita retorcer los dedos para abrir la paleta de comandos o ir al s\u00edmbolo . Simplemente escriba p y t respectivamente y acceder\u00e1 r\u00e1pidamente a cualquiera de estos paneles. Yihoo! Hay muchas m\u00e1s asignaciones interesantes y \u00fatiles en la documentaci\u00f3n de VSCodeVim. \u00a1Echar un vistazo! . Pero recuerda ser cr\u00edtico. Antes de agregar un mapeo personalizado en su configuraci\u00f3n de VSCodeVim, considere si ofrece un mejor flujo de trabajo que el que usa actualmente. Nunca agregue cosas a su configuraci\u00f3n a ciegas. Una parte importante de ser m\u00e1s eficaz con Vim es tener en cuenta su flujo de trabajo de desarrollo. Revisando su configuraci\u00f3n de Vim de vez en cuando, y agregando nuevas asignaciones que mejoran su forma de trabajar. Por lo tanto, tenga en cuenta a partir de ahora y mantenga su configuraci\u00f3n Vim muy n\u00edtida.","title":"ELEVANDO SU FLUJO DE TRABAJO CON ASIGNACIONES PERSONALIZADAS"},{"location":"014_asignaciones_personalizadas/#elevando-su-flujo-de-trabajo-con-asignaciones-personalizadas","text":"Una de las mejores caracter\u00edsticas de Vim es su personalizaci\u00f3n. Una forma sencilla de comenzar a personalizar Vim y una que tendr\u00e1 el mayor efecto en su codificaci\u00f3n diaria es crear asignaciones personalizadas . Un mapeo en Vim es el equivalente a un atajo en otros editores pero con un fuerte enfoque en las melod\u00edas de teclas que son tan naturales para Vim.","title":"ELEVANDO SU FLUJO DE TRABAJO CON ASIGNACIONES PERSONALIZADAS"},{"location":"014_asignaciones_personalizadas/#por-que-mapeos-personalizados","text":"Las asignaciones personalizadas son \u00fatiles por dos razones: Le permiten personalizar Vim y adaptarlo a su forma de trabajo mediante la creaci\u00f3n de asignaciones personalizadas para las cosas que utiliza con frecuencia. Le permiten priorizar la funcionalidad de Vim acerc\u00e1ndola a su alcance. Mediante el uso de asignaciones personalizadas, puede crear una jerarqu\u00eda de comandos donde se puede acceder a los m\u00e1s \u00fatiles desde el producto de su fila de inicio y a los menos \u00fatiles a trav\u00e9s de combinaciones de teclas c\u00f3modas, pero m\u00e1s largas","title":"\u00bfPOR QU\u00c9 MAPEOS PERSONALIZADOS?"},{"location":"014_asignaciones_personalizadas/#crear-asignaciones-personalizadas","text":"Puede crear asignaciones personalizadas utilizando las preferencias de Visual Studio Code: Abra la paleta de comandos con CMD-SHIFT-P o CTRL-SHIFT-P Preferencias de tipo Seleccione las preferencias: abrir las opciones de configuraci\u00f3n del usuario Tipo vim Y filtrar\u00e1 sus preferencias de Visual Studio Code para mostrar solo las relacionadas con VSCodeVim. Ahora puede usar la siguiente configuraci\u00f3n para agregar sus asignaciones personalizadas en diferentes modos: Asignaciones de teclas en modo normal No recursivas para modo normal Enlaces de teclas del modo visual No recursivo para el modo visual Vinculaciones de teclas del modo de inserci\u00f3n No recursivo para el modo de inserci\u00f3n Tener diferentes asignaciones para diferentes modos tiene sentido porque cada modo es una pizarra limpia donde puede redefinir asignaciones para realizar tareas espec\u00edficas de ese modo. Eso le permite reutilizar el teclado del estado real del teclado en cada modo y tener una funcionalidad potente cerca de sus dedos. Tenga en cuenta que esta configuraci\u00f3n solo se puede cambiar a trav\u00e9s de la json versi\u00f3n de la configuraci\u00f3n: Un mapeo personalizado normalmente toma la siguiente forma: { \"vim.insertModeKeyBindingsNonRecursive\": [ { \"before\": [\"j\", \"k\"], \"after\": [\"<ESC>\"] } ], } D\u00f3nde: antes es la secuencia de comandos que escribe. despu\u00e9s es a qu\u00e9 se asignan los comandos anteriores y qu\u00e9 se ejecuta cuando los escribe. En el ejemplo anterior, cada vez que escribimos la secuencia jk en modo Insertar ser\u00e1 el equivalente a escribir `**y, por lo tanto, nos llevar\u00e1 de vuelta al *modo Normal* . Esta es una gran asignaci\u00f3n personalizada que hace una tarea sin fisuras muy com\u00fan, ya que ambos ** j **y ** k` est\u00e1n en la fila casa y s\u00f3lo por debajo de su mano derecha. Agregue esta asignaci\u00f3n a su configuraci\u00f3n y ver\u00e1 que surte efecto tan pronto como guarde su configuraci\u00f3n. Ahora intente ir al modo Insertar y escriba jk una sucesi\u00f3n r\u00e1pida. ijk , ijk , ijk ... Se debe fluir suavemente como una corriente pac\u00edfica o como la mantequilla caliente sobre una tostada.","title":"CREAR ASIGNACIONES PERSONALIZADAS"},{"location":"014_asignaciones_personalizadas/#pautas-para-crear-asignaciones-personalizadas","text":"La capacidad de crear asignaciones personalizadas le brinda mucha libertad y flexibilidad para definir c\u00f3mo interact\u00faa con Visual Studio Code. Pero debido a que no hay nada que lo detenga por hacer lo que quiera, puede terminar peg\u00e1ndose un tiro en el pie. Aqu\u00ed hay algunas reglas que lo guiar\u00e1n cuando cree sus propios mapeos personalizados y guarde esos preciosos dedos de los suyos: En general, use la tecla l\u00edder para definir sus asignaciones personalizadas. La clave l\u00edder es una clave especial en Vim cuyo prop\u00f3sito es actuar como un espacio de nombres o puerta de enlace a las asignaciones definidas por el usuario. De manera predeterminada, la tecla l\u00edder se asigna a la tecla de barra diagonal inversa \\ . Si hay algo en su flujo de trabajo que usa todo el tiempo, entonces est\u00e1 bien (de hecho se recomienda) sobrescribir un enlace Vim predeterminado menos \u00fatil. Esta es la excepci\u00f3n a la regla. Crea asignaciones que sean f\u00e1ciles de recordar. Sigue la tradici\u00f3n de Vim y conf\u00eda en la mnemotecnia. (Recuerde? c Para c ambio, d para d elete, y tal ...) Si estas reglas parecen demasiado abstractas, no se preocupe, en las siguientes secciones las haremos m\u00e1s pr\u00e1cticas ya que definimos una serie de asignaciones personalizadas que puede agregar a su propia configuraci\u00f3n VSCodeVim.","title":"PAUTAS PARA CREAR ASIGNACIONES PERSONALIZADAS"},{"location":"014_asignaciones_personalizadas/#personalizar-la-clave-de-lider","text":"Puede cambiar la clave de l\u00edder a algo m\u00e1s f\u00e1cil de escribir que la barra invertida \\ (no lo conozco, pero odio tener teclas importantes asociadas a mis dedos me\u00f1iques me\u00f1ique ). Mi favorito personal es la barra espaciadora, que es muy conveniente para escribir con ambas manos. Vaya a sus preferencias de VSCode y actualice la siguiente configuraci\u00f3n: { \"vim.leader\": \"<Space>\", } De ahora en adelante, cada vez que vea un mapeo personalizado que se refiera a **usted, puede traducirlo en su cabeza ** .","title":"PERSONALIZAR LA CLAVE DE L\u00cdDER"},{"location":"014_asignaciones_personalizadas/#algunas-buenas-asignaciones-personalizadas","text":"Aqu\u00ed hay algunos otros excelentes ejemplos de mapeos \u00fatiles:","title":"ALGUNAS BUENAS ASIGNACIONES PERSONALIZADAS"},{"location":"014_asignaciones_personalizadas/#moverse-hacia-arriba-y-hacia-abajo-mas-rapido-en-modo-normal","text":"Estas asignaciones le permiten moverse hacia arriba y hacia abajo m\u00e1s r\u00e1pido en modo Normal (aunque son igual de \u00fatiles en modo Visual ): { \"vim.normalModeKeyBindingsNonRecursive\": [ { \"before\": [\"J\"], \"after\": [\"5\", \"j\"] }, { \"before\": [\"K\"], \"after\": [\"5\", \"k\"] }, ] } De ahora en adelante podr\u00e1s usar: J bajar m\u00e1s r\u00e1pido K subir m\u00e1s r\u00e1pido Esto coincide perfectamente con la idea de Vim de que los comandos en may\u00fasculas sean versiones m\u00e1s fuertes de los comandos en min\u00fasculas. Es decir, le J permite moverse m\u00e1s r\u00e1pido j y K m\u00e1s r\u00e1pido que k . Aqu\u00ed hemos sobrescrito dos enlaces predeterminados de Vim porque navegar por el c\u00f3digo hacia arriba y hacia abajo es algo que har\u00e1s todo el tiempo. Mientras que J (unir l\u00edneas), aunque es \u00fatil, es algo que solo haces de vez en cuando. K se usa para la b\u00fasqueda de palabras clave pero a\u00fan no se implementa en VSCodeVim.","title":"MOVERSE HACIA ARRIBA Y HACIA ABAJO M\u00c1S R\u00c1PIDO EN MODO NORMAL"},{"location":"014_asignaciones_personalizadas/#seguir-uniendo-lineas","text":"Unir l\u00edneas sigue siendo \u00fatil, as\u00ed que vamos a mantenerlo. Aunque rebajaremos su importancia en la jerarqu\u00eda haci\u00e9ndolo un poco m\u00e1s dif\u00edcil de escribir. Actualice su configuraci\u00f3n de VSCodeVim para incluir esta nueva asignaci\u00f3n: { \"vim.normalModeKeyBindingsNonRecursive\": [ { \"before\": [\"<Leader>\", \"j\"], \"after\": [\"J\"] }, ] } Entonces, cada vez que escriba j , Vim lo traducir\u00e1 J y unir\u00e1 dos l\u00edneas. \u00a1Pru\u00e9balo! j no es tan r\u00e1pido como simplemente escribir, J pero es lo suficientemente bueno en funci\u00f3n de la frecuencia con la que unir\u00e1 l\u00edneas. La mnem\u00f3nica en este caso es j jin.","title":"SEGUIR UNIENDO L\u00cdNEAS"},{"location":"014_asignaciones_personalizadas/#cambio-mas-facil-entre-divisiones","text":"Cambiar ventanas divididas es algo que har\u00e1s todo el tiempo, as\u00ed que prueba estos enlaces: { \"vim.normalModeKeyBindingsNonRecursive\": [ { \"before\": [\"<C-h>\"], \"after\": [\"<C-w>\", \"h\"] }, { \"before\": [\"<C-j>\"], \"after\": [\"<C-w>\", \"j\"] }, { \"before\": [\"<C-k>\"], \"after\": [\"<C-w>\", \"k\"] }, { \"before\": [\"<C-l>\"], \"after\": [\"<C-w>\", \"l\"] }] } Te har\u00e1n mucho m\u00e1s r\u00e1pido y \u00e1gil cuando atravieses divisiones porque requieren una pulsaci\u00f3n de tecla menos.","title":"CAMBIO M\u00c1S F\u00c1CIL ENTRE DIVISIONES"},{"location":"014_asignaciones_personalizadas/#manejo-de-pestanas-mas-facil","text":"La \u00fanica forma de interactuar con pesta\u00f1as en VSCodeVim es a trav\u00e9s de comandos que requieren que escriba dos puntos seguidos de un mont\u00f3n de letras. Podemos hacerlo mejor: { \"vim.normalModeKeyBindingsNonRecursive\": [ { \"before\": [\"<Leader>\", \"t\", \"t\"], \"commands\": [\":tabnew\"] }, { \"before\": [\"<Leader>\", \"t\", \"n\"], \"commands\": [\":tabnext\"] }, { \"before\": [\"<Leader>\", \"t\", \"p\"], \"commands\": [\":tabprev\"] }, { \"before\": [\"<Leader>\", \"t\", \"o\"], \"commands\": [\":tabo\"] }] } Aprovechando la `` clave, ahora podemos abrir nuevas pesta\u00f1as, movernos y cerrar todas las pesta\u00f1as excepto la actual. \u00bfNot\u00f3 algo diferente acerca de estas asignaciones personalizadas? \u00a1Exactamente! Utiliza una sintaxis ligeramente diferente al asignar teclas a comandos. En lugar de usar before y after . Usamos before y commands . commands representar los comandos Ex o los comandos nativos de Visual Studio que deben ejecutarse cada vez que escribimos la asignaci\u00f3n de teclas definida por before .","title":"MANEJO DE PESTA\u00d1AS M\u00c1S F\u00c1CIL"},{"location":"014_asignaciones_personalizadas/#limpieza-de-texto-resaltado","text":"Cuando busque patrones en Vim utilizando los comandos /{pattern} y ?{pattern} , se resaltar\u00e1n los patrones coincidentes. Para eliminar los resaltados, puede usar el comando :noh ( sin resaltado ). Esta es una tarea tan com\u00fan que prefiero la siguiente asignaci\u00f3n: { \"vim.normalModeKeyBindingsNonRecursive\": [ { \"before\": [\"<Leader>\", \"/\"], \"commands\": [\":noh\"] }] } Ahora puede escribir / y deshacerse de los resaltados hasta su pr\u00f3xima b\u00fasqueda. El mnem\u00f3nico es el / que normalmente se usa para buscar un patr\u00f3n. Por lo tanto, puede pensar /{pattern} en algo que hace para comenzar una b\u00fasqueda y / como algo que hace cuando termina una b\u00fasqueda.","title":"LIMPIEZA DE TEXTO RESALTADO"},{"location":"014_asignaciones_personalizadas/#crear-asignaciones-personalizadas-para-acciones-vscode","text":"Otra cosa genial que puede hacer con VSCode es usar asignaciones de Vim que activen los comandos nativos de Visual Studio Code. Por ejemplo, el siguiente enlace: { \"vim.normalModeKeyBindingsNonRecursive\": [ { \"before\": [\"leader\", \"w\"], \"commands\": [ \"workbench.action.files.save\", ] } } Vamos a guardar un archivo mediante la w activaci\u00f3n de la \"workbench.action.files.save\" acci\u00f3n VSCode .","title":"CREAR ASIGNACIONES PERSONALIZADAS PARA ACCIONES VSCODE"},{"location":"014_asignaciones_personalizadas/#como-encontrar-los-nombres-de-los-comandos","text":"Descubrir qu\u00e9 comando hace qu\u00e9 en VSCode no es realmente evidente, es decir, si hubiera querido saber que guardar cosas en VSCode es dif\u00edcil workbench.action.files.save habr\u00eda adivinado eso. Entonces, \u00bfd\u00f3nde puedes encontrar esa informaci\u00f3n oscura? Abra la paleta de comandos, escriba teclado y seleccione Preferencias: Abrir atajos de teclado . All\u00ed encontrar\u00e1 todos los comandos que est\u00e1n disponibles dentro de VSCode, incluido su nombre de comando completo. \u00daselos siempre que desee crear asignaciones personalizadas para acciones nativas de VSCode. Advertencia : cuando busca un comando, el nombre completo del comando solo se mostrar\u00e1 si la condici\u00f3n del filtro es parte del nombre. Si el nombre del comando no se muestra despu\u00e9s del filtrado, puede pasar el mouse sobre el nombre del comando y una informaci\u00f3n sobre herramientas revelar\u00e1 su nombre completo. Veamos otro ejemplo. Hay cuatro caracter\u00edsticas en VSCode que encuentro extremadamente \u00fatiles: La paleta de comandos ( CTRL-SHIFT-P o CMD-SHIFT-P ) Ir al archivo ( CTRL-P o CMD-P ) Ir al s\u00edmbolo en el archivo ( CTRL-SHIFT-O o CMD-SHIFT-O ) Ir al s\u00edmbolo en el espacio de trabajo ( CMD-T o CTRL-T ) La paleta de comandos y el s\u00edmbolo Ir al archivo son particularmente dif\u00edciles de escribir, as\u00ed que creemos una asignaci\u00f3n personalizada para mantener nuestras mu\u00f1ecas saludables: { \"vim.normalModeKeyBindingsNonRecursive\": [ { \"before\": [\"<Leader>\", \"p\"], \"commands\": [ \"workbench.action.showCommands\", ] }, { \"before\": [\"<Leader>\", \"t\"], \"commands\": [ \"workbench.action.gotoSymbol\", ] } ] } Ahora ya no necesita retorcer los dedos para abrir la paleta de comandos o ir al s\u00edmbolo . Simplemente escriba p y t respectivamente y acceder\u00e1 r\u00e1pidamente a cualquiera de estos paneles. Yihoo! Hay muchas m\u00e1s asignaciones interesantes y \u00fatiles en la documentaci\u00f3n de VSCodeVim. \u00a1Echar un vistazo! . Pero recuerda ser cr\u00edtico. Antes de agregar un mapeo personalizado en su configuraci\u00f3n de VSCodeVim, considere si ofrece un mejor flujo de trabajo que el que usa actualmente. Nunca agregue cosas a su configuraci\u00f3n a ciegas. Una parte importante de ser m\u00e1s eficaz con Vim es tener en cuenta su flujo de trabajo de desarrollo. Revisando su configuraci\u00f3n de Vim de vez en cuando, y agregando nuevas asignaciones que mejoran su forma de trabajar. Por lo tanto, tenga en cuenta a partir de ahora y mantenga su configuraci\u00f3n Vim muy n\u00edtida.","title":"\u00bfC\u00d3MO ENCONTRAR LOS NOMBRES DE LOS COMANDOS?"},{"location":"015_mas_rapido/","text":"MUDARSE A\u00daN M\u00c1S R\u00c1PIDO CON VIM SURROUND e EASYMOTION Vim-sneak y vim-EasyMotion son un par de complementos de Vim que aumentan la velocidad con la que puede moverse en Vim. Ambos complementos deben habilitarse a trav\u00e9s de la configuraci\u00f3n de VSCodeVim. Para habilitarlos, solo vaya a Preferencias , B\u00fasqueda de configuraciones para vim sneak o vim easymotion y encontrar\u00e1 el interruptor. VIM-FURTIVAMENTE Vim-sneak es un t\u00e9rmino medio entre la b\u00fasqueda de caracteres (dentro de una l\u00ednea) y la b\u00fasqueda de patrones (dentro de un archivo) : Escriba s{char}{char} y el cursor vuela a la primera aparici\u00f3n de esa secuencia de dos caracteres. A partir de entonces, escriba ; para la pr\u00f3xima aparici\u00f3n o , para la anterior. S{char}{char} funciona de manera similar pero al rev\u00e9s. Donde vim-surround extendi\u00f3 el lenguaje secreto de Vim con un operador, vim-sneak hace lo mismo pero con un movimiento: el movimiento furtivo . Como tal, puede usarlo en combinaci\u00f3n con otros operadores: Escriba {operator}z{char}{char} y el operador se aplicar\u00e1 sobre el texto atravesado por el movimiento furtivo. \u00bfPOR QU\u00c9 Z EN LUGAR DE S? Cuando se usa junto con otros operadores, vim-sneak usa el z porque s ya est\u00e1 tomado por vim-surround. Y vim-surround es un complemento Vim extremadamente popular. VIM-EASYMOTION Vim-EasyMotion intenta simplificar el uso de movimientos en Vim eliminando la necesidad de contar. En lugar de mirar un fragmento de c\u00f3digo, contar en tu cabeza y usar cualquiera de estas combinaciones para realizar alguna acci\u00f3n: {operator}{count}{motion} o moverse: {count}{motion} cuando activa un movimiento con EasyMotion, etiqueta los posibles objetivos en todo el documento con una combinaci\u00f3n de teclas que se muestra en una superposici\u00f3n (sobre el texto en cuesti\u00f3n). Escriba esa combinaci\u00f3n de teclas y se teletransportar\u00e1 a esa ubicaci\u00f3n de inmediato. Por ejemplo, type w y EasyMotion etiquetar\u00e1n el comienzo de todas las palabras delante de usted de la siguiente manera: \u00a1Esto es lo que sucede cuando disparas un movimiento con EasyMotion! : O En el ejemplo de la imagen, escribir la letra l har\u00eda que el cursor saltara a la FactionShipModifiers interfaz, mientras que escribir p te enviar\u00eda a la Energy propiedad de esa interfaz. O puede escribir f' y EasyMotion etiquetar\u00e1 todas las apariciones del ' personaje en las l\u00edneas actuales y posteriores. Bastante ingenioso, \u00bfno? Todos los movimientos proporcionados por vim-EasyMotion tienen espacios de nombres `` y utilizan enlaces de teclas cuyo significado est\u00e1 relacionado con los movimientos principales de Vim: mando mover a\u2026 w comienzo de palabras b comienzo de palabras al rev\u00e9s bdw comienzo de palabras en todas partes. Los bd stands para bidireccional e fin de las palabras ge fin de las palabras al rev\u00e9s bdw fin de las palabras en todas partes j comienzo de l\u00edneas k comienzo de l\u00edneas hacia atr\u00e1s f{char} encontrar personaje F{char} encontrar el personaje al rev\u00e9s t{char} hasta el personaje T{char} hasta que el personaje retroceda s{char} buscar personaje en todas partes EASYMOTION SOLO FUNCIONA PARA MOVERSE En la versi\u00f3n VSCodeVim, los movimientos en EasyMotion solo admiten moverse y no se pueden combinar con operadores. Esta es una caracter\u00edstica que es compatible con Vim tradicional, por lo que puede ser algo que vendr\u00e1 a VSCodeVim en el futuro.","title":"MUDARSE A\u00daN M\u00c1S R\u00c1PIDO CON VIM SURROUND e EASYMOTION"},{"location":"015_mas_rapido/#mudarse-aun-mas-rapido-con-vim-surround-e-easymotion","text":"Vim-sneak y vim-EasyMotion son un par de complementos de Vim que aumentan la velocidad con la que puede moverse en Vim. Ambos complementos deben habilitarse a trav\u00e9s de la configuraci\u00f3n de VSCodeVim. Para habilitarlos, solo vaya a Preferencias , B\u00fasqueda de configuraciones para vim sneak o vim easymotion y encontrar\u00e1 el interruptor.","title":"MUDARSE A\u00daN M\u00c1S R\u00c1PIDO CON VIM SURROUND e EASYMOTION"},{"location":"015_mas_rapido/#vim-furtivamente","text":"Vim-sneak es un t\u00e9rmino medio entre la b\u00fasqueda de caracteres (dentro de una l\u00ednea) y la b\u00fasqueda de patrones (dentro de un archivo) : Escriba s{char}{char} y el cursor vuela a la primera aparici\u00f3n de esa secuencia de dos caracteres. A partir de entonces, escriba ; para la pr\u00f3xima aparici\u00f3n o , para la anterior. S{char}{char} funciona de manera similar pero al rev\u00e9s. Donde vim-surround extendi\u00f3 el lenguaje secreto de Vim con un operador, vim-sneak hace lo mismo pero con un movimiento: el movimiento furtivo . Como tal, puede usarlo en combinaci\u00f3n con otros operadores: Escriba {operator}z{char}{char} y el operador se aplicar\u00e1 sobre el texto atravesado por el movimiento furtivo.","title":"VIM-FURTIVAMENTE"},{"location":"015_mas_rapido/#por-que-z-en-lugar-de-s","text":"Cuando se usa junto con otros operadores, vim-sneak usa el z porque s ya est\u00e1 tomado por vim-surround. Y vim-surround es un complemento Vim extremadamente popular.","title":"\u00bfPOR QU\u00c9 Z EN LUGAR DE S?"},{"location":"015_mas_rapido/#vim-easymotion","text":"Vim-EasyMotion intenta simplificar el uso de movimientos en Vim eliminando la necesidad de contar. En lugar de mirar un fragmento de c\u00f3digo, contar en tu cabeza y usar cualquiera de estas combinaciones para realizar alguna acci\u00f3n: {operator}{count}{motion} o moverse: {count}{motion} cuando activa un movimiento con EasyMotion, etiqueta los posibles objetivos en todo el documento con una combinaci\u00f3n de teclas que se muestra en una superposici\u00f3n (sobre el texto en cuesti\u00f3n). Escriba esa combinaci\u00f3n de teclas y se teletransportar\u00e1 a esa ubicaci\u00f3n de inmediato. Por ejemplo, type w y EasyMotion etiquetar\u00e1n el comienzo de todas las palabras delante de usted de la siguiente manera: \u00a1Esto es lo que sucede cuando disparas un movimiento con EasyMotion! : O En el ejemplo de la imagen, escribir la letra l har\u00eda que el cursor saltara a la FactionShipModifiers interfaz, mientras que escribir p te enviar\u00eda a la Energy propiedad de esa interfaz. O puede escribir f' y EasyMotion etiquetar\u00e1 todas las apariciones del ' personaje en las l\u00edneas actuales y posteriores. Bastante ingenioso, \u00bfno? Todos los movimientos proporcionados por vim-EasyMotion tienen espacios de nombres `` y utilizan enlaces de teclas cuyo significado est\u00e1 relacionado con los movimientos principales de Vim: mando mover a\u2026 w comienzo de palabras b comienzo de palabras al rev\u00e9s bdw comienzo de palabras en todas partes. Los bd stands para bidireccional e fin de las palabras ge fin de las palabras al rev\u00e9s bdw fin de las palabras en todas partes j comienzo de l\u00edneas k comienzo de l\u00edneas hacia atr\u00e1s f{char} encontrar personaje F{char} encontrar el personaje al rev\u00e9s t{char} hasta el personaje T{char} hasta que el personaje retroceda s{char} buscar personaje en todas partes","title":"VIM-EASYMOTION"},{"location":"015_mas_rapido/#easymotion-solo-funciona-para-moverse","text":"En la versi\u00f3n VSCodeVim, los movimientos en EasyMotion solo admiten moverse y no se pueden combinar con operadores. Esta es una caracter\u00edstica que es compatible con Vim tradicional, por lo que puede ser algo que vendr\u00e1 a VSCodeVim en el futuro.","title":"EASYMOTION SOLO FUNCIONA PARA MOVERSE"},{"location":"016_cursores_multiples/","text":"CURSORES M\u00daLTIPLES Si eres un usuario incondicional de Visual Studio Code, es probable que uses varios cursores. VSCodeVim ofrece un soporte experimental para m\u00faltiples cursores en modos Visual y Normal . Con esta funci\u00f3n experimental (que est\u00e1 habilitada de manera predeterminada), puede generar m\u00faltiples cursores y luego usar operadores para liberar el poder de Vim en m\u00faltiples ubicaciones a la vez. \u00a1GUAUU! AGREGAR M\u00daLTIPLES CURSORES BASADOS EN LA B\u00daSQUEDA DE PALABRAS Si desea agregar m\u00faltiples cursores basados en la b\u00fasqueda de palabras , debe: Mueva el cursor sobre una palabra en su c\u00f3digo. Escriba `**( ** CTRL-D **en Windows / Linux) o ** gb` para agregar otro cursor. Esto pone a Vim en modo Visual y listo para operar en la palabra que ha seleccionado. Escriba `**( ** CTRL-D **en Windows / Linux) o ** gb` contin\u00fae agregando cursores hasta que haya terminado. Ahora puede realizar una acci\u00f3n en modo Visual (eliminar, cambiar, etc.) o, Regrese al modo Normal con `` y escriba cualquier comando del modo Normal manteniendo los m\u00faltiples cursores. Un posible caso de uso para m\u00faltiples cursores ser\u00eda renombrar algo. Imagine que tiene una funci\u00f3n que cambia el nombre de cosas, como las propiedades dentro de los objetos en JavaScript. Digamos que tienes este hermoso objeto que me representa a m\u00ed : const jaime = { name: 'Jaime', attributes: ['handsome', 'smart', 'witty'] }; Y alg\u00fan d\u00eda te cansas de toda esta auto adoraci\u00f3n y narcisismo y quieres vengarte. Entonces decide cambiar el nombre de mi propiedad attributes a lackingAttributes : rename(jaime, 'attributes', 'lackingAttributes'); Tal funci\u00f3n (que ahora debe prometer nunca escribir en ning\u00fan programa) podr\u00eda verse as\u00ed: function rename(obj, name, newName){ Object.defineProperty(obj, newName, { value: obj[name], enumerable: true, writable: true, configurable: true }); delete obj[name]; } La name propiedad no es lo suficientemente descriptiva, por lo que queremos cambiarle el nombre oldName porque este ejemplo no podr\u00eda ser m\u00e1s meta que esto. Podemos lograr este cambio de nombre usando m\u00faltiples cursores: Mueve el cursor hacia arriba name con el operador de b\u00fasqueda /name , Escriba gb tres veces para crear tres cursores en la parte superior de cada name variable, Ahora est\u00e1s en modo Visual con tres selecciones separadas, Escriba coldName para cambiar cada aparici\u00f3n de name for oldName . Todav\u00eda tiene tres cursores y ahora est\u00e1 en modo Normal . Puede continuar jugando o eliminar todos los cursores adicionales escribiendo `` una vez m\u00e1s. Como alternativa, podr\u00eda haber escrito `**en el paso ** 4 **y luego se usa el siguiente *modo Normal* comando: ** ciwoldName` . La diferencia es que el modo Visual opera en la selecci\u00f3n de texto actual (las palabras) y el modo Normal le permite operar en cualquier selecci\u00f3n de texto utilizando movimientos arbitrarios basados en la posici\u00f3n de los cursores m\u00faltiples. AGREGAR M\u00daLTIPLES CURSORES EN L\u00cdNEAS CONSECUTIVAS Si desea extender sus cursores hacia arriba o hacia abajo en l\u00edneas consecutivas , entonces el mejor enfoque es confiar en el modo de bloque visual : Escriba `` jupm en modo Visual-block . Use j , k para seleccionar un rect\u00e1ngulo de texto hacia abajo o hacia arriba respectivamente. Escriba I para insertar o A agregar, luego escriba un texto y presione `` . Alternativamente, use cualquier comando del modo Normal para operar en el texto seleccionado en cada l\u00ednea. \u00bfC\u00f3mo puede ser \u00fatil, preguntas? Imagine una lista de las cosas que necesitar\u00eda para sobrevivir a un apocalipsis zombie: towel wrench shotgun axe rusty broadsword sausage chain-saw Y ahora, debido a que dos cabezas son mejores que una, y es posible que hayas olvidado algo importante, debes poner esa lista en un sitio web para compartirla con otros futuros sobrevivientes del apocalipsis zombie. Sitio web significa HTML, significa elementos HTML sem\u00e1nticos, significa que necesitamos ajustar esos elementos en el formato correcto. Cada objeto valioso estar\u00e1 envuelto en un elemento ( *elemento de la lista* ), y todos ir\u00e1n dentro de una (lista ordenada) porque el orden es importante y, cuando se trata de empujar, prefiero tener una toalla en lugar de una cadena -Sierra. Entonces, suponiendo que el cursor est\u00e9 en la parte superior de la primera letra de esa lista: v towel Escribir\u00edas: CTRL-V para entrar en modo Visual-block , luego j hacia abajo hasta el final de la lista, seguido de I para entrar en modo Insertar al comienzo del bloque, y finalmente **y ** para salir del modo Insertar Resultando en lo siguiente: <li>towel <li>wrench <li>shotgun <li>axe <li>rusty broadsword <li>sausage <li>chain-saw Ahora repita el proceso para agregar la etiqueta de cierre: CTRL-V para entrar en modo Visual-block , luego j hacia abajo hasta el final de la lista, ahora usa el $ movimiento para mover todos los cursores al final de cada l\u00ednea, escriba A para entrar en modo Insertar al final del bloque, y finalmente **y** <li>towel</li> <li>wrench</li> <li>shotgun</li> <li>axe</li> <li>rusty broadsword</li> <li>sausage</li> <li>chain-saw</li>","title":"CURSORES M\u00daLTIPLES"},{"location":"016_cursores_multiples/#cursores-multiples","text":"Si eres un usuario incondicional de Visual Studio Code, es probable que uses varios cursores. VSCodeVim ofrece un soporte experimental para m\u00faltiples cursores en modos Visual y Normal . Con esta funci\u00f3n experimental (que est\u00e1 habilitada de manera predeterminada), puede generar m\u00faltiples cursores y luego usar operadores para liberar el poder de Vim en m\u00faltiples ubicaciones a la vez. \u00a1GUAUU!","title":"CURSORES M\u00daLTIPLES"},{"location":"016_cursores_multiples/#agregar-multiples-cursores-basados-en-la-busqueda-de-palabras","text":"Si desea agregar m\u00faltiples cursores basados en la b\u00fasqueda de palabras , debe: Mueva el cursor sobre una palabra en su c\u00f3digo. Escriba `**( ** CTRL-D **en Windows / Linux) o ** gb` para agregar otro cursor. Esto pone a Vim en modo Visual y listo para operar en la palabra que ha seleccionado. Escriba `**( ** CTRL-D **en Windows / Linux) o ** gb` contin\u00fae agregando cursores hasta que haya terminado. Ahora puede realizar una acci\u00f3n en modo Visual (eliminar, cambiar, etc.) o, Regrese al modo Normal con `` y escriba cualquier comando del modo Normal manteniendo los m\u00faltiples cursores. Un posible caso de uso para m\u00faltiples cursores ser\u00eda renombrar algo. Imagine que tiene una funci\u00f3n que cambia el nombre de cosas, como las propiedades dentro de los objetos en JavaScript. Digamos que tienes este hermoso objeto que me representa a m\u00ed : const jaime = { name: 'Jaime', attributes: ['handsome', 'smart', 'witty'] }; Y alg\u00fan d\u00eda te cansas de toda esta auto adoraci\u00f3n y narcisismo y quieres vengarte. Entonces decide cambiar el nombre de mi propiedad attributes a lackingAttributes : rename(jaime, 'attributes', 'lackingAttributes'); Tal funci\u00f3n (que ahora debe prometer nunca escribir en ning\u00fan programa) podr\u00eda verse as\u00ed: function rename(obj, name, newName){ Object.defineProperty(obj, newName, { value: obj[name], enumerable: true, writable: true, configurable: true }); delete obj[name]; } La name propiedad no es lo suficientemente descriptiva, por lo que queremos cambiarle el nombre oldName porque este ejemplo no podr\u00eda ser m\u00e1s meta que esto. Podemos lograr este cambio de nombre usando m\u00faltiples cursores: Mueve el cursor hacia arriba name con el operador de b\u00fasqueda /name , Escriba gb tres veces para crear tres cursores en la parte superior de cada name variable, Ahora est\u00e1s en modo Visual con tres selecciones separadas, Escriba coldName para cambiar cada aparici\u00f3n de name for oldName . Todav\u00eda tiene tres cursores y ahora est\u00e1 en modo Normal . Puede continuar jugando o eliminar todos los cursores adicionales escribiendo `` una vez m\u00e1s. Como alternativa, podr\u00eda haber escrito `**en el paso ** 4 **y luego se usa el siguiente *modo Normal* comando: ** ciwoldName` . La diferencia es que el modo Visual opera en la selecci\u00f3n de texto actual (las palabras) y el modo Normal le permite operar en cualquier selecci\u00f3n de texto utilizando movimientos arbitrarios basados en la posici\u00f3n de los cursores m\u00faltiples.","title":"AGREGAR M\u00daLTIPLES CURSORES BASADOS EN LA B\u00daSQUEDA DE PALABRAS"},{"location":"016_cursores_multiples/#agregar-multiples-cursores-en-lineas-consecutivas","text":"Si desea extender sus cursores hacia arriba o hacia abajo en l\u00edneas consecutivas , entonces el mejor enfoque es confiar en el modo de bloque visual : Escriba `` jupm en modo Visual-block . Use j , k para seleccionar un rect\u00e1ngulo de texto hacia abajo o hacia arriba respectivamente. Escriba I para insertar o A agregar, luego escriba un texto y presione `` . Alternativamente, use cualquier comando del modo Normal para operar en el texto seleccionado en cada l\u00ednea. \u00bfC\u00f3mo puede ser \u00fatil, preguntas? Imagine una lista de las cosas que necesitar\u00eda para sobrevivir a un apocalipsis zombie: towel wrench shotgun axe rusty broadsword sausage chain-saw Y ahora, debido a que dos cabezas son mejores que una, y es posible que hayas olvidado algo importante, debes poner esa lista en un sitio web para compartirla con otros futuros sobrevivientes del apocalipsis zombie. Sitio web significa HTML, significa elementos HTML sem\u00e1nticos, significa que necesitamos ajustar esos elementos en el formato correcto. Cada objeto valioso estar\u00e1 envuelto en un elemento ( *elemento de la lista* ), y todos ir\u00e1n dentro de una (lista ordenada) porque el orden es importante y, cuando se trata de empujar, prefiero tener una toalla en lugar de una cadena -Sierra. Entonces, suponiendo que el cursor est\u00e9 en la parte superior de la primera letra de esa lista: v towel Escribir\u00edas: CTRL-V para entrar en modo Visual-block , luego j hacia abajo hasta el final de la lista, seguido de I para entrar en modo Insertar al comienzo del bloque, y finalmente **y ** para salir del modo Insertar Resultando en lo siguiente: <li>towel <li>wrench <li>shotgun <li>axe <li>rusty broadsword <li>sausage <li>chain-saw Ahora repita el proceso para agregar la etiqueta de cierre: CTRL-V para entrar en modo Visual-block , luego j hacia abajo hasta el final de la lista, ahora usa el $ movimiento para mover todos los cursores al final de cada l\u00ednea, escriba A para entrar en modo Insertar al final del bloque, y finalmente **y** <li>towel</li> <li>wrench</li> <li>shotgun</li> <li>axe</li> <li>rusty broadsword</li> <li>sausage</li> <li>chain-saw</li>","title":"AGREGAR M\u00daLTIPLES CURSORES EN L\u00cdNEAS CONSECUTIVAS"},{"location":"017_macros/","text":"EDICI\u00d3N REUTILIZABLE CON MACROS \u00a1EL SOPORTE PARA MACROS EN VSCODEVIM ES LIMITADO! El soporte para macros en VSCodeVim no es tan bueno como en Vim, pero decid\u00ed incluirlo porque puede ser \u00fatil en algunas situaciones como pronto ver\u00e1. Algunas caracter\u00edsticas m\u00e1s avanzadas de las macros, como editar macros existentes o guardar macros como asignaciones personalizadas, son imposibles o muy inconvenientes en VSCodeVim. A Vim le encanta ahorrar tiempo y molestias, y le ofrece muchas formas de repetir comandos: El . comando le permite repetir el \u00faltimo cambio. El ; y , comandos le permiten repetir la \u00faltima b\u00fasqueda de caracteres delante y hacia atr\u00e1s, respectivamente. n y le N permite repetir la \u00faltima b\u00fasqueda tambi\u00e9n hacia adelante y hacia atr\u00e1s. / y ? tambi\u00e9n le permite repetir la \u00faltima b\u00fasqueda hacia adelante o hacia atr\u00e1s. :@ y @@ te permite repetir comandos Ex. Las macros de Vim llevan este poder de repetici\u00f3n al siguiente nivel al permitirle grabar una colecci\u00f3n de comandos a medida que los escribe y luego reproducirlos a voluntad . Como tal, las macros se convierten en acciones de edici\u00f3n reutilizables que pueden ahorrarle mucho tiempo. CREAR UNA NUEVA MACRO DE VIM Crea una nueva macro siguiendo este proceso: Escriba q{register} para comenzar a grabar una macro (por ejemplo qq , comenzar\u00e1 a grabar una macro para registrar q ) dentro de un registro. Realice las diferentes acciones que desea incluir en la macro. Cuando haya terminado, escriba q para finalizar la grabaci\u00f3n. A partir de ese momento, puede reproducir la macro cuando lo desee: Escriba @{register} (por ejemplo @q ) para ejecutar la macro que vive en un determinado register . Una vez que haya ejecutado una macro una vez, puede repetir la \u00faltima macro escribiendo @@ . Esto sigue el mismo esp\u00edritu de los otros comandos repetidores en Vim. MACROS EN ACCI\u00d3N Usemos un ejemplo para ilustrar el uso de macros en Vim. Imagina que tienes una lista de algunos art\u00edculos comunes que puedes encontrar en cualquier tienda de juegos de rol de fantas\u00eda de 8 bits vendida por un NPC extremadamente aburrido. Est\u00e1n separados por comas como esta: rusty sword,obsidian dagger,silver poniard,broadsword Y ahora imagina que quieres tomar esa lista y convertirla en HTML. Web 1.0 aqu\u00ed vamos . El HTML resultante se ver\u00eda as\u00ed: <ul> <li>rusty sword</li> <li>obsidian sword</li> <li>silver poniard</li> <li>broadsword poniard</li> </ul> Un posible enfoque para resolver este problema es crear una macro que encapsule el proceso de tomar un elemento de una lista y ponerlo dentro de un li elemento. Entonces, comenzando con el cursor en la primera letra de la lista: v rusty sword,obsidian dagger,silver poniard,broadsword podemos hacer lo siguiente: Comience por grabar la macro en el q registro con qq . Luego usa f, para encontrar el primero , . Escriba cwk para eliminar la coma y mover la lista, pero para el primer elemento a la siguiente l\u00ednea, luego haga una copia de seguridad: --- cursor is here / / | v rusty sword obsidian dagger,silver poniard,broadsword Ahora I para insertar la etiqueta de apertura. Luego A para insertar la etiqueta de cierre. Moverse al comienzo de la l\u00ednea de abajo j0 . Termine de grabar la macro escribiendo q : <li>rusty sword</li> obsidian dagger,silver poniard,broadsword ^ \\ \\ ----- cursor is here Ahora solo escribe @q para reproducir la macro y obtendr\u00e1s esto: <li>rusty sword</li> <li>obsidian dagger</li> silver poniard,broadsword Ahora escriba @@ para repetir la \u00faltima macro: <li>rusty sword</li> <li>obsidian dagger</li> <li>silver poniard</li> broadsword Si intenta usar nuestra macro nuevamente, se sorprender\u00e1 al descubrir que no sucede nada. \u00bfPor qu\u00e9? Como Vim no puede encontrar ninguna coma, la macro deja de ejecutarse. Podemos solucionar esto agregando una coma al final antes de comenzar a procesar la l\u00ednea de elementos: rusty sword,obsidian dagger,silver poniard,broadsword, Y ahora, si combinamos el poder de los contadores con las macros, podemos procesar toda la l\u00ednea de elementos a la vez. Tipo 4@q : <li>rusty sword</li> <li>obsidian dagger</li> <li>silver poniard</li> <li>broadsword</li> Has completado tu tarea ( baile de la victoria ). Espero que este ejemplo sea ilustrativo del poder de las macros y sirva de inspiraci\u00f3n en futuras sesiones de codificaci\u00f3n. Lo mejor de las macros es que puede usar las mismas t\u00e9cnicas (movimientos, operadores, recuentos, etc.) que normalmente usa para escribir c\u00f3digo y empaquetarlas para que puedan reutilizarse m\u00e1s tarde . EDICI\u00d3N Y GUARDADO DE MACROS Editar y guardar macros como asignaciones personalizadas son caracter\u00edsticas potentes, pero hasta que no se admitan correctamente en VSCodeVim no tiene sentido escribir sobre ellas. Ser\u00eda confuso. Pero no se preocupe, si estas caracter\u00edsticas llegan a VSCodeVim, actualizar\u00e9 el libro para reflejarlo.","title":"EDICI\u00d3N REUTILIZABLE CON MACROS"},{"location":"017_macros/#edicion-reutilizable-con-macros","text":"","title":"EDICI\u00d3N REUTILIZABLE CON MACROS"},{"location":"017_macros/#el-soporte-para-macros-en-vscodevim-es-limitado","text":"El soporte para macros en VSCodeVim no es tan bueno como en Vim, pero decid\u00ed incluirlo porque puede ser \u00fatil en algunas situaciones como pronto ver\u00e1. Algunas caracter\u00edsticas m\u00e1s avanzadas de las macros, como editar macros existentes o guardar macros como asignaciones personalizadas, son imposibles o muy inconvenientes en VSCodeVim. A Vim le encanta ahorrar tiempo y molestias, y le ofrece muchas formas de repetir comandos: El . comando le permite repetir el \u00faltimo cambio. El ; y , comandos le permiten repetir la \u00faltima b\u00fasqueda de caracteres delante y hacia atr\u00e1s, respectivamente. n y le N permite repetir la \u00faltima b\u00fasqueda tambi\u00e9n hacia adelante y hacia atr\u00e1s. / y ? tambi\u00e9n le permite repetir la \u00faltima b\u00fasqueda hacia adelante o hacia atr\u00e1s. :@ y @@ te permite repetir comandos Ex. Las macros de Vim llevan este poder de repetici\u00f3n al siguiente nivel al permitirle grabar una colecci\u00f3n de comandos a medida que los escribe y luego reproducirlos a voluntad . Como tal, las macros se convierten en acciones de edici\u00f3n reutilizables que pueden ahorrarle mucho tiempo.","title":"\u00a1EL SOPORTE PARA MACROS EN VSCODEVIM ES LIMITADO!"},{"location":"017_macros/#crear-una-nueva-macro-de-vim","text":"Crea una nueva macro siguiendo este proceso: Escriba q{register} para comenzar a grabar una macro (por ejemplo qq , comenzar\u00e1 a grabar una macro para registrar q ) dentro de un registro. Realice las diferentes acciones que desea incluir en la macro. Cuando haya terminado, escriba q para finalizar la grabaci\u00f3n. A partir de ese momento, puede reproducir la macro cuando lo desee: Escriba @{register} (por ejemplo @q ) para ejecutar la macro que vive en un determinado register . Una vez que haya ejecutado una macro una vez, puede repetir la \u00faltima macro escribiendo @@ . Esto sigue el mismo esp\u00edritu de los otros comandos repetidores en Vim.","title":"CREAR UNA NUEVA MACRO DE VIM"},{"location":"017_macros/#macros-en-accion","text":"Usemos un ejemplo para ilustrar el uso de macros en Vim. Imagina que tienes una lista de algunos art\u00edculos comunes que puedes encontrar en cualquier tienda de juegos de rol de fantas\u00eda de 8 bits vendida por un NPC extremadamente aburrido. Est\u00e1n separados por comas como esta: rusty sword,obsidian dagger,silver poniard,broadsword Y ahora imagina que quieres tomar esa lista y convertirla en HTML. Web 1.0 aqu\u00ed vamos . El HTML resultante se ver\u00eda as\u00ed: <ul> <li>rusty sword</li> <li>obsidian sword</li> <li>silver poniard</li> <li>broadsword poniard</li> </ul> Un posible enfoque para resolver este problema es crear una macro que encapsule el proceso de tomar un elemento de una lista y ponerlo dentro de un li elemento. Entonces, comenzando con el cursor en la primera letra de la lista: v rusty sword,obsidian dagger,silver poniard,broadsword podemos hacer lo siguiente: Comience por grabar la macro en el q registro con qq . Luego usa f, para encontrar el primero , . Escriba cwk para eliminar la coma y mover la lista, pero para el primer elemento a la siguiente l\u00ednea, luego haga una copia de seguridad: --- cursor is here / / | v rusty sword obsidian dagger,silver poniard,broadsword Ahora I para insertar la etiqueta de apertura. Luego A para insertar la etiqueta de cierre. Moverse al comienzo de la l\u00ednea de abajo j0 . Termine de grabar la macro escribiendo q : <li>rusty sword</li> obsidian dagger,silver poniard,broadsword ^ \\ \\ ----- cursor is here Ahora solo escribe @q para reproducir la macro y obtendr\u00e1s esto: <li>rusty sword</li> <li>obsidian dagger</li> silver poniard,broadsword Ahora escriba @@ para repetir la \u00faltima macro: <li>rusty sword</li> <li>obsidian dagger</li> <li>silver poniard</li> broadsword Si intenta usar nuestra macro nuevamente, se sorprender\u00e1 al descubrir que no sucede nada. \u00bfPor qu\u00e9? Como Vim no puede encontrar ninguna coma, la macro deja de ejecutarse. Podemos solucionar esto agregando una coma al final antes de comenzar a procesar la l\u00ednea de elementos: rusty sword,obsidian dagger,silver poniard,broadsword, Y ahora, si combinamos el poder de los contadores con las macros, podemos procesar toda la l\u00ednea de elementos a la vez. Tipo 4@q : <li>rusty sword</li> <li>obsidian dagger</li> <li>silver poniard</li> <li>broadsword</li> Has completado tu tarea ( baile de la victoria ). Espero que este ejemplo sea ilustrativo del poder de las macros y sirva de inspiraci\u00f3n en futuras sesiones de codificaci\u00f3n. Lo mejor de las macros es que puede usar las mismas t\u00e9cnicas (movimientos, operadores, recuentos, etc.) que normalmente usa para escribir c\u00f3digo y empaquetarlas para que puedan reutilizarse m\u00e1s tarde .","title":"MACROS EN ACCI\u00d3N"},{"location":"017_macros/#edicion-y-guardado-de-macros","text":"Editar y guardar macros como asignaciones personalizadas son caracter\u00edsticas potentes, pero hasta que no se admitan correctamente en VSCodeVim no tiene sentido escribir sobre ellas. Ser\u00eda confuso. Pero no se preocupe, si estas caracter\u00edsticas llegan a VSCodeVim, actualizar\u00e9 el libro para reflejarlo.","title":"EDICI\u00d3N Y GUARDADO DE MACROS"},{"location":"018_explorador_de_archivos/","text":"EXPLORADOR DE ARCHIVOS MEJORADO, PANELES Y PALETAS Puede aprovechar sus enlaces Vim reci\u00e9n aprendidos para interactuar con el explorador de archivos VSCode . Salta dentro del Explorador de archivos a trav\u00e9s de la paleta de comandos, o simplemente movi\u00e9ndote desde la ventana de c\u00f3digo a trav\u00e9s de h y podr\u00e1s: Recorrer el explorador de archivos arriba y abajo con k y j . Expanda directorios con l (derecha) cuando el cursor est\u00e9 sobre un directorio. Contraer directorios con h (izquierda). Abra archivos con l (derecha) cuando el cursor est\u00e9 en un archivo. Esto es bueno si eres nuevo en un proyecto y quieres tener una idea sobre c\u00f3mo est\u00e1 estructurado el proyecto. De lo contrario, siempre prefiera usar la funcionalidad Ir a de Visual Studio . Recuerda: Ir a archivo con CMD-P en Mac (o CTRL-P en Windows / Linux) Ir al s\u00edmbolo en archivo con CMD-SHIFT-O en Mac (o CTRL-SHIFT-O en Windows / Linux) Ir al s\u00edmbolo en el espacio de trabajo con with CMD-T en Mac (o CTRL-T en Windows / Linux) Del mismo modo, puede usar k y j con paneles y paletas. Cada vez que abra una paleta de comandos o los paneles Ir a , puede: Escriba lo TAB que lo llevar\u00e1 al \u00e1rea de selecci\u00f3n y, Desde all\u00ed puede usar k y j subir y bajar al elemento que desee. Presione Enter y abrir\u00e1 un archivo o realizar\u00e1 una acci\u00f3n de paleta de comandos.","title":"EXPLORADOR DE ARCHIVOS MEJORADO, PANELES Y PALETAS"},{"location":"018_explorador_de_archivos/#explorador-de-archivos-mejorado-paneles-y-paletas","text":"Puede aprovechar sus enlaces Vim reci\u00e9n aprendidos para interactuar con el explorador de archivos VSCode . Salta dentro del Explorador de archivos a trav\u00e9s de la paleta de comandos, o simplemente movi\u00e9ndote desde la ventana de c\u00f3digo a trav\u00e9s de h y podr\u00e1s: Recorrer el explorador de archivos arriba y abajo con k y j . Expanda directorios con l (derecha) cuando el cursor est\u00e9 sobre un directorio. Contraer directorios con h (izquierda). Abra archivos con l (derecha) cuando el cursor est\u00e9 en un archivo. Esto es bueno si eres nuevo en un proyecto y quieres tener una idea sobre c\u00f3mo est\u00e1 estructurado el proyecto. De lo contrario, siempre prefiera usar la funcionalidad Ir a de Visual Studio . Recuerda: Ir a archivo con CMD-P en Mac (o CTRL-P en Windows / Linux) Ir al s\u00edmbolo en archivo con CMD-SHIFT-O en Mac (o CTRL-SHIFT-O en Windows / Linux) Ir al s\u00edmbolo en el espacio de trabajo con with CMD-T en Mac (o CTRL-T en Windows / Linux) Del mismo modo, puede usar k y j con paneles y paletas. Cada vez que abra una paleta de comandos o los paneles Ir a , puede: Escriba lo TAB que lo llevar\u00e1 al \u00e1rea de selecci\u00f3n y, Desde all\u00ed puede usar k y j subir y bajar al elemento que desee. Presione Enter y abrir\u00e1 un archivo o realizar\u00e1 una acci\u00f3n de paleta de comandos.","title":"EXPLORADOR DE ARCHIVOS MEJORADO, PANELES Y PALETAS"},{"location":"019_vscode_con_neovim/","text":"INTEGRANDO VSCODE CON NEOVIM ADVERTENCIA: CARACTER\u00cdSTICA EXPERIMENTAL Esta es una caracter\u00edstica experimental en VSCodeVim. A veces, puede dar lugar a un comportamiento inesperado. Las cosas m\u00e1s nefastas que he visto hacer es mostrar mensajes de error o no hacer lo que le orden\u00e9. Ambos son irritantes, pero nada que destruya su computadora. Una \u00faltima forma de mejorar su experiencia VSCodeVim es mediante la integraci\u00f3n con Neovim, la bifurcaci\u00f3n moderna de Vim. Cuando integra ambos editores, VSCodeVim usar\u00e1 Neovim para ejecutar todos los comandos del modo de l\u00ednea de comandos. Esto dar\u00e1 como resultado una ejecuci\u00f3n de comandos m\u00e1s r\u00e1pida y la adici\u00f3n de una gran cantidad de comandos \u00fatiles a su arsenal VSCodeVim. \u00bfQU\u00c9 ES NEOVIM? Neovim es una bifurcaci\u00f3n moderna de Vim que tiene como objetivo refactorizar Vim y hacer que sea m\u00e1s f\u00e1cil de mantener, extensible y m\u00e1s f\u00e1cil de contribuir por una comunidad m\u00e1s amplia. Su principal innovaci\u00f3n sobre Vim tradicional fue que soportaba procesamiento as\u00edncrono, un terminal integrado y complementos externos. Vim 8 m\u00e1s tarde se puso al d\u00eda con soporte para procesamiento as\u00edncrono y un terminal integrado, pero Neovim sigue siendo muy relevante. De hecho, Neovim sigue siendo muy activo, saludable y supera los l\u00edmites: su soporte para complementos externos escritos en JavaScript a trav\u00e9s de node.js es una gran ayuda para crear una comunidad a\u00fan m\u00e1s inclusiva de escritores de complementos. Su modo sin cabeza permite que las aplicaciones GUI (como Visual Studio Code u Oni ) consuman Vim como servicio. Su enfoque en una gran experiencia de usuario ha tra\u00eddo nuevas caracter\u00edsticas interesantes a Vim, como l\u00edneas virtuales con mensajes en el editor, tal como lo que espera de los editores de texto modernos. Finalmente, sus valores predeterminados m\u00e1s sensibles lo convierten en un editor m\u00e1s accesible que el Vim original. Adem\u00e1s, la mera existencia de Neovim como competidor de Vim es algo saludable para la comunidad en general. Por ejemplo, caracter\u00edsticas como el terminal integrado o el procesamiento as\u00edncrono se agregaron a Vim despu\u00e9s de que estuvieron disponibles en Neovim. Puede encontrar m\u00e1s informaci\u00f3n sobre Neovim en neovim.io . INSTALANDO NEOVIM Neovim, al igual que Vim, es compatible con muchos sistemas operativos . Para instalar Neovim, use el administrador de paquetes favorito de su sistema operativo de elecci\u00f3n. Por ejemplo: INSTALAR NEOVIM EN MAC OSX La forma m\u00e1s sencilla de obtener Neovim en OSX es usar Homebrew : $ brew install neovim INSTALAR NEOVIM EN WINDOWS La forma m\u00e1s sencilla de instalar Neovim en Windows es usar el administrador de paquetes Chocolatey . Tipo: PS> choco install neovim -y INSTALAR NEOVIM EN UBUNTU O DEBIAN Para instalar la \u00faltima versi\u00f3n de Neovim en Ubuntu o Debian use lo siguiente: $ sudo apt-get update $ sudo apt-get install software-properties-common -y $ sudo add-apt-repository ppa:neovim-ppa/stable $ sudo apt-get update $ sudo apt-get install neovim -y INSTALE NEOVIM EN OTROS SISTEMAS OPERATIVOS El Wiki de Neovim tiene instrucciones detalladas sobre c\u00f3mo instalar Neovim en muchos sistemas operativos, utilizando un administrador de paquetes o construyendo desde la fuente. Si su sistema operativo no es uno de los anteriores, teletransportarse a la Wiki de Neovim y seguir las instrucciones. HABILITAR NEOVIM INSIDE VSCODE Una vez que haya instalado Neovim en su sistema operativo, puede habilitarlo dentro de VSCode dentro de la ventana Preferencias: Configuraci\u00f3n de usuario : Habilite la opci\u00f3n Vim: Habilitar Neovim ( vim.enableNeovim ) Establezca el camino a Neovim dentro de la configuraci\u00f3n Vim: Neovim Path ( vim.neovimPath ) Reiniciar VSCode Por ejemplo, si est\u00e1 usando MacOS y ha instalado Neovim usando brew, su configuraci\u00f3n se ver\u00eda as\u00ed: { \"vim.neovimPath\": \"/usr/local/bin/nvim\", \"vim.enableNeovim\": true } USANDO NEOVIM DE VSCODE Una vez que se habilita la integraci\u00f3n, cada vez que ejecute un comando Ex, se ejecutar\u00e1 dentro de Neovim y luego sus efectos se reflejar\u00e1n en Visual Studio Code. En esencia, la ejecuci\u00f3n de un comando Ex seguir\u00e1 estos pasos: Copie el contenido de su archivo dentro de Neovim. Ejecute el comando en Neovim. Vuelva a sincronizar los resultados con Visual Studio Code. Esto significa que los comandos interactivos como :change (o substitute con la c bandera) no funcionar\u00e1 con el estado actual experimental de esta integraci\u00f3n, pero otros como :move , :normal , :global , y la mayor\u00eda de los casos de uso de :substitute trabajo fino voluntad. COPIAR Y MOVER L\u00cdNEAS ALREDEDOR Con los comandos :copy o :move puede copiar o mover r\u00e1pidamente un rango de l\u00edneas de una parte del documento a otra. Utiliza cualquiera de estos comandos de la siguiente manera: :[range]copy {address} :[range]move {address} D\u00f3nde: range define el rango que queremos copiar o mover. address define el destino de la l\u00ednea objetivo de lo que copiamos o movemos. Por ejemplo: :,+3c $ copie la l\u00ednea actual y las 3 l\u00edneas siguientes al final del archivo. :,+3m $ como arriba pero mueve las l\u00edneas en su lugar. Ambos comandos admiten shorthands: :t o :co son equivalentes a :copy . :m es equivalente a :move . EL COMANDO NORMAL El :normal comando (abreviatura :norm ) le permite ejecutar una colecci\u00f3n arbitraria de comandos del modo Normal en varias l\u00edneas a la vez . Se define as\u00ed: :[range]normal {commands} Imagine que encuentra un archivo JavaScript cuyas l\u00edneas no tienen punto y coma. \u00a1Oh no! \u00a1Malditos hipsters JavaScript! broma Puedes remediar esta parodia usando el :normal comando como este: :%norm A; Que agrega punto y coma a todas las l\u00edneas dentro de un archivo. Esta es, sin lugar a dudas, una forma m\u00e1s r\u00e1pida de agregar punto y coma que usar: Para A; agregar un punto y coma, en combinaci\u00f3n con, los j. comandos para bajar una l\u00ednea y repetir el \u00faltimo cambio. Veamos un ejemplo un poco m\u00e1s complicado. Imagina que tienes una lista de armas m\u00e1gicas que se ve as\u00ed: <ul> <li>Sword of Truth</li> <li>Fire Lance</li> <li>Shardblade</li> <li>Poisoned Dagger of Despair</li> </ul> Pero ahora queremos mejorar la utilidad de esta lista y agregar algunos enlaces a lugares de Wizardsphere donde alguien podr\u00eda adquirir algunos de estos elementos. Simplifiquemos el problema agregando un enlace a un solo li elemento: <li>Sword of Truth</li> ^ Podr\u00edamos w mover el cursor sobre el elemento y cit cambiar su contenido. Ahora escriba [ ]() : <li><a href=\"\"></li> ^ Luego, p para pegar los contenidos anteriores de li : <li><a href=\"\">Sword of Truth</li> ^ Y finalmente a : <li><a href=\"\">Sword of Truth</a></li> ^ Tada! La serie completa de comandos fue: wcit<a href=\"\"><ESC>pa</a><ESC Entonces, ahora que hemos resuelto este problema para una sola l\u00ednea, deber\u00edamos poder aplicar el mismo comando a todos los li elementos de nuestra lista aprovechando el :normal comando: :%normal wcit<a href=\"\"><ESC>pa</a><ESC Int\u00e9ntalo t\u00fa mismo. \u00bfQue pas\u00f3? No es lo que esperabas, eso es seguro. Esto deber\u00eda ser el resultado de ejecutar el comando anterior: <ul> <li><a href=\"\"><ESC>pa</a><ESC></li> <li><a href=\"\"><ESC>pa</a><ESC></li> <li><a href=\"\"><ESC>pa</a><ESC></li> <li><a href=\"\"><ESC>pa</a><ESC></li> </ul> \u00bfPuedes ver el problema? \u00a1Exactamente! Todos los personajes han sido tomados literalmente. `` no funcion\u00f3 y, por lo tanto, nunca salimos del modo Insertar, que explica los resultados anteriores. Esto muestra una de las limitaciones del :normal comando: no comprende teclas especiales como **o ** acordes. Afortunadamente, hay una manera de resolver estos casos de uso con la ayuda del execute comando. El :execute comando (abreviatura :exe ) le permite evaluar una expresi\u00f3n de cadena como un ex comando. Es como el eval de Vim. Usando :execute podemos usar el :normal comando junto con teclas especiales de la siguiente manera: :execute \"%normal wcit<a href=\\\"\\\">\\<ESC>pa</a>\\<ESC>\" Observe c\u00f3mo los comandos de ejecuci\u00f3n nos permiten usar teclas especiales, como `` escap\u00e1ndolos con una barra diagonal inversa. Observe tambi\u00e9n c\u00f3mo, debido a que toda la expresi\u00f3n es una cadena, debemos escapar de las comillas dobles que puedan aparecer. En resumen: El :normal comando le permite aplicar comandos arbitrarios de modo Normal en varias l\u00edneas a la vez. Sin embargo, por s\u00ed solo, in no admite teclas especiales, lo que limita su uso. \u00daselo :normal en combinaci\u00f3n con el :execute comando cuando su secuencia de comandos de modo normal incluye teclas especiales EL COMANDO GLOBAL El :global comando (abreviatura :g ) le permite ejecutar cualquier comando Ex en l\u00edneas que coinciden con un patr\u00f3n dado . Es como una versi\u00f3n gen\u00e9rica de :s eso, en lugar de simplemente sustituir un patr\u00f3n por otra cosa, le permite hacer casi cualquier cosa. La forma del :global comando deber\u00eda serle familiar en este momento: :[range]g[lobal]/{pattern}/[cmd] Entonces: Define un lugar range donde aplicar el :g comando y luego, dentro de ese rango, el comando cmd se aplicar\u00e1 solo a aquellas l\u00edneas que mucho se den pattern . El rango predeterminado para el :g comando es todo el documento, por lo que :g es equivalente a :1,$g o :%g . Esto es apropiado ya que el comando no se llama global por nada. Con el :global comando ahora podemos eliminar o copiar l\u00edneas que coinciden con un patr\u00f3n espec\u00edfico. Por ejemplo, podemos crear un esquema de un documento de descuento copiando (tirando) todos los t\u00edtulos y almacen\u00e1ndolos en un registro de la siguiente manera: :g/^#/y A Lo que significa: Para cada l\u00ednea que coincida con este patr\u00f3n ^# (un t\u00edtulo en reducci\u00f3n). Ejecute el :y A comando, que significa: Copie la l\u00ednea actual y a\u00f1\u00e1dala al registro a (\u00bfrecuerda? Un registro en may\u00fascula significa usarla para agregar en lugar de reemplazar su contenido). Ahora puede pegar el contorno en otro archivo escribiendo :put a (o simplemente \"ap en modo Normal ). El :global comando es especialmente \u00fatil cuando lo combina con el :normal comando porque le permite ejecutar un n\u00famero arbitrario de comandos en *modo Normal* solo cuando se cumple una determinada condici\u00f3n . Por lo tanto, podr\u00edamos refinar nuestro dispositivo de adici\u00f3n de punto y coma anterior para agregar solo un punto y coma cuando no encuentre uno al final de una l\u00ednea de esta manera: :g!/;$/norm A; O podr\u00edamos definir un comando que disminuya la profundidad de los cap\u00edtulos de reducci\u00f3n como este: :g/^#/norm 0x Usando los comandos :global y :normal juntos, el \u00fanico l\u00edmite de lo que puedes lograr est\u00e1 determinado por tu propia imaginaci\u00f3n. GLOBAL VS GLOBAL! \u00bfNot\u00f3 el :g! del ejemplo anterior? Cuando usamos en :global! lugar del :global comando Ex que definimos, se aplica solo en las l\u00edneas que no coinciden con el patr\u00f3n que especificamos. UNA ADVERTENCIA DE ELIMINACI\u00d3N PARA TENER EN CUENTA Cuando habilite la integraci\u00f3n de Neovim, el :delete comando se ejecutar\u00e1 dentro de Neovim y usar\u00e1 sus registros. Estos registros no se comparten con VSCodeVim y, por lo tanto, no podr\u00e1 inspeccionarlos mediante el :reg comando. No obstante, puede confiar en el hecho de que todav\u00eda est\u00e1n all\u00ed . Entonces la siguiente secuencia funcionar\u00e1 como se esperaba: :0,+3d a eliminar las primeras tres l\u00edneas en el a registro :$put a pegue el contenido del registro a (las tres l\u00edneas que eliminamos anteriormente) al final del archivo","title":"INTEGRANDO VSCODE CON NEOVIM"},{"location":"019_vscode_con_neovim/#integrando-vscode-con-neovim","text":"","title":"INTEGRANDO VSCODE CON NEOVIM"},{"location":"019_vscode_con_neovim/#advertencia-caracteristica-experimental","text":"Esta es una caracter\u00edstica experimental en VSCodeVim. A veces, puede dar lugar a un comportamiento inesperado. Las cosas m\u00e1s nefastas que he visto hacer es mostrar mensajes de error o no hacer lo que le orden\u00e9. Ambos son irritantes, pero nada que destruya su computadora. Una \u00faltima forma de mejorar su experiencia VSCodeVim es mediante la integraci\u00f3n con Neovim, la bifurcaci\u00f3n moderna de Vim. Cuando integra ambos editores, VSCodeVim usar\u00e1 Neovim para ejecutar todos los comandos del modo de l\u00ednea de comandos. Esto dar\u00e1 como resultado una ejecuci\u00f3n de comandos m\u00e1s r\u00e1pida y la adici\u00f3n de una gran cantidad de comandos \u00fatiles a su arsenal VSCodeVim.","title":"ADVERTENCIA: CARACTER\u00cdSTICA EXPERIMENTAL"},{"location":"019_vscode_con_neovim/#que-es-neovim","text":"Neovim es una bifurcaci\u00f3n moderna de Vim que tiene como objetivo refactorizar Vim y hacer que sea m\u00e1s f\u00e1cil de mantener, extensible y m\u00e1s f\u00e1cil de contribuir por una comunidad m\u00e1s amplia. Su principal innovaci\u00f3n sobre Vim tradicional fue que soportaba procesamiento as\u00edncrono, un terminal integrado y complementos externos. Vim 8 m\u00e1s tarde se puso al d\u00eda con soporte para procesamiento as\u00edncrono y un terminal integrado, pero Neovim sigue siendo muy relevante. De hecho, Neovim sigue siendo muy activo, saludable y supera los l\u00edmites: su soporte para complementos externos escritos en JavaScript a trav\u00e9s de node.js es una gran ayuda para crear una comunidad a\u00fan m\u00e1s inclusiva de escritores de complementos. Su modo sin cabeza permite que las aplicaciones GUI (como Visual Studio Code u Oni ) consuman Vim como servicio. Su enfoque en una gran experiencia de usuario ha tra\u00eddo nuevas caracter\u00edsticas interesantes a Vim, como l\u00edneas virtuales con mensajes en el editor, tal como lo que espera de los editores de texto modernos. Finalmente, sus valores predeterminados m\u00e1s sensibles lo convierten en un editor m\u00e1s accesible que el Vim original. Adem\u00e1s, la mera existencia de Neovim como competidor de Vim es algo saludable para la comunidad en general. Por ejemplo, caracter\u00edsticas como el terminal integrado o el procesamiento as\u00edncrono se agregaron a Vim despu\u00e9s de que estuvieron disponibles en Neovim. Puede encontrar m\u00e1s informaci\u00f3n sobre Neovim en neovim.io .","title":"\u00bfQU\u00c9 ES NEOVIM?"},{"location":"019_vscode_con_neovim/#instalando-neovim","text":"Neovim, al igual que Vim, es compatible con muchos sistemas operativos . Para instalar Neovim, use el administrador de paquetes favorito de su sistema operativo de elecci\u00f3n. Por ejemplo:","title":"INSTALANDO NEOVIM"},{"location":"019_vscode_con_neovim/#instalar-neovim-en-mac-osx","text":"La forma m\u00e1s sencilla de obtener Neovim en OSX es usar Homebrew : $ brew install neovim","title":"INSTALAR NEOVIM EN MAC OSX"},{"location":"019_vscode_con_neovim/#instalar-neovim-en-windows","text":"La forma m\u00e1s sencilla de instalar Neovim en Windows es usar el administrador de paquetes Chocolatey . Tipo: PS> choco install neovim -y","title":"INSTALAR NEOVIM EN WINDOWS"},{"location":"019_vscode_con_neovim/#instalar-neovim-en-ubuntu-o-debian","text":"Para instalar la \u00faltima versi\u00f3n de Neovim en Ubuntu o Debian use lo siguiente: $ sudo apt-get update $ sudo apt-get install software-properties-common -y $ sudo add-apt-repository ppa:neovim-ppa/stable $ sudo apt-get update $ sudo apt-get install neovim -y","title":"INSTALAR NEOVIM EN UBUNTU O DEBIAN"},{"location":"019_vscode_con_neovim/#instale-neovim-en-otros-sistemas-operativos","text":"El Wiki de Neovim tiene instrucciones detalladas sobre c\u00f3mo instalar Neovim en muchos sistemas operativos, utilizando un administrador de paquetes o construyendo desde la fuente. Si su sistema operativo no es uno de los anteriores, teletransportarse a la Wiki de Neovim y seguir las instrucciones.","title":"INSTALE NEOVIM EN OTROS SISTEMAS OPERATIVOS"},{"location":"019_vscode_con_neovim/#habilitar-neovim-inside-vscode","text":"Una vez que haya instalado Neovim en su sistema operativo, puede habilitarlo dentro de VSCode dentro de la ventana Preferencias: Configuraci\u00f3n de usuario : Habilite la opci\u00f3n Vim: Habilitar Neovim ( vim.enableNeovim ) Establezca el camino a Neovim dentro de la configuraci\u00f3n Vim: Neovim Path ( vim.neovimPath ) Reiniciar VSCode Por ejemplo, si est\u00e1 usando MacOS y ha instalado Neovim usando brew, su configuraci\u00f3n se ver\u00eda as\u00ed: { \"vim.neovimPath\": \"/usr/local/bin/nvim\", \"vim.enableNeovim\": true }","title":"HABILITAR NEOVIM INSIDE VSCODE"},{"location":"019_vscode_con_neovim/#usando-neovim-de-vscode","text":"Una vez que se habilita la integraci\u00f3n, cada vez que ejecute un comando Ex, se ejecutar\u00e1 dentro de Neovim y luego sus efectos se reflejar\u00e1n en Visual Studio Code. En esencia, la ejecuci\u00f3n de un comando Ex seguir\u00e1 estos pasos: Copie el contenido de su archivo dentro de Neovim. Ejecute el comando en Neovim. Vuelva a sincronizar los resultados con Visual Studio Code. Esto significa que los comandos interactivos como :change (o substitute con la c bandera) no funcionar\u00e1 con el estado actual experimental de esta integraci\u00f3n, pero otros como :move , :normal , :global , y la mayor\u00eda de los casos de uso de :substitute trabajo fino voluntad.","title":"USANDO NEOVIM DE VSCODE"},{"location":"019_vscode_con_neovim/#copiar-y-mover-lineas-alrededor","text":"Con los comandos :copy o :move puede copiar o mover r\u00e1pidamente un rango de l\u00edneas de una parte del documento a otra. Utiliza cualquiera de estos comandos de la siguiente manera: :[range]copy {address} :[range]move {address} D\u00f3nde: range define el rango que queremos copiar o mover. address define el destino de la l\u00ednea objetivo de lo que copiamos o movemos. Por ejemplo: :,+3c $ copie la l\u00ednea actual y las 3 l\u00edneas siguientes al final del archivo. :,+3m $ como arriba pero mueve las l\u00edneas en su lugar. Ambos comandos admiten shorthands: :t o :co son equivalentes a :copy . :m es equivalente a :move .","title":"COPIAR Y MOVER L\u00cdNEAS ALREDEDOR"},{"location":"019_vscode_con_neovim/#el-comando-normal","text":"El :normal comando (abreviatura :norm ) le permite ejecutar una colecci\u00f3n arbitraria de comandos del modo Normal en varias l\u00edneas a la vez . Se define as\u00ed: :[range]normal {commands} Imagine que encuentra un archivo JavaScript cuyas l\u00edneas no tienen punto y coma. \u00a1Oh no! \u00a1Malditos hipsters JavaScript! broma Puedes remediar esta parodia usando el :normal comando como este: :%norm A; Que agrega punto y coma a todas las l\u00edneas dentro de un archivo. Esta es, sin lugar a dudas, una forma m\u00e1s r\u00e1pida de agregar punto y coma que usar: Para A; agregar un punto y coma, en combinaci\u00f3n con, los j. comandos para bajar una l\u00ednea y repetir el \u00faltimo cambio. Veamos un ejemplo un poco m\u00e1s complicado. Imagina que tienes una lista de armas m\u00e1gicas que se ve as\u00ed: <ul> <li>Sword of Truth</li> <li>Fire Lance</li> <li>Shardblade</li> <li>Poisoned Dagger of Despair</li> </ul> Pero ahora queremos mejorar la utilidad de esta lista y agregar algunos enlaces a lugares de Wizardsphere donde alguien podr\u00eda adquirir algunos de estos elementos. Simplifiquemos el problema agregando un enlace a un solo li elemento: <li>Sword of Truth</li> ^ Podr\u00edamos w mover el cursor sobre el elemento y cit cambiar su contenido. Ahora escriba [ ]() : <li><a href=\"\"></li> ^ Luego, p para pegar los contenidos anteriores de li : <li><a href=\"\">Sword of Truth</li> ^ Y finalmente a : <li><a href=\"\">Sword of Truth</a></li> ^ Tada! La serie completa de comandos fue: wcit<a href=\"\"><ESC>pa</a><ESC Entonces, ahora que hemos resuelto este problema para una sola l\u00ednea, deber\u00edamos poder aplicar el mismo comando a todos los li elementos de nuestra lista aprovechando el :normal comando: :%normal wcit<a href=\"\"><ESC>pa</a><ESC Int\u00e9ntalo t\u00fa mismo. \u00bfQue pas\u00f3? No es lo que esperabas, eso es seguro. Esto deber\u00eda ser el resultado de ejecutar el comando anterior: <ul> <li><a href=\"\"><ESC>pa</a><ESC></li> <li><a href=\"\"><ESC>pa</a><ESC></li> <li><a href=\"\"><ESC>pa</a><ESC></li> <li><a href=\"\"><ESC>pa</a><ESC></li> </ul> \u00bfPuedes ver el problema? \u00a1Exactamente! Todos los personajes han sido tomados literalmente. `` no funcion\u00f3 y, por lo tanto, nunca salimos del modo Insertar, que explica los resultados anteriores. Esto muestra una de las limitaciones del :normal comando: no comprende teclas especiales como **o ** acordes. Afortunadamente, hay una manera de resolver estos casos de uso con la ayuda del execute comando. El :execute comando (abreviatura :exe ) le permite evaluar una expresi\u00f3n de cadena como un ex comando. Es como el eval de Vim. Usando :execute podemos usar el :normal comando junto con teclas especiales de la siguiente manera: :execute \"%normal wcit<a href=\\\"\\\">\\<ESC>pa</a>\\<ESC>\" Observe c\u00f3mo los comandos de ejecuci\u00f3n nos permiten usar teclas especiales, como `` escap\u00e1ndolos con una barra diagonal inversa. Observe tambi\u00e9n c\u00f3mo, debido a que toda la expresi\u00f3n es una cadena, debemos escapar de las comillas dobles que puedan aparecer. En resumen: El :normal comando le permite aplicar comandos arbitrarios de modo Normal en varias l\u00edneas a la vez. Sin embargo, por s\u00ed solo, in no admite teclas especiales, lo que limita su uso. \u00daselo :normal en combinaci\u00f3n con el :execute comando cuando su secuencia de comandos de modo normal incluye teclas especiales","title":"EL COMANDO NORMAL"},{"location":"019_vscode_con_neovim/#el-comando-global","text":"El :global comando (abreviatura :g ) le permite ejecutar cualquier comando Ex en l\u00edneas que coinciden con un patr\u00f3n dado . Es como una versi\u00f3n gen\u00e9rica de :s eso, en lugar de simplemente sustituir un patr\u00f3n por otra cosa, le permite hacer casi cualquier cosa. La forma del :global comando deber\u00eda serle familiar en este momento: :[range]g[lobal]/{pattern}/[cmd] Entonces: Define un lugar range donde aplicar el :g comando y luego, dentro de ese rango, el comando cmd se aplicar\u00e1 solo a aquellas l\u00edneas que mucho se den pattern . El rango predeterminado para el :g comando es todo el documento, por lo que :g es equivalente a :1,$g o :%g . Esto es apropiado ya que el comando no se llama global por nada. Con el :global comando ahora podemos eliminar o copiar l\u00edneas que coinciden con un patr\u00f3n espec\u00edfico. Por ejemplo, podemos crear un esquema de un documento de descuento copiando (tirando) todos los t\u00edtulos y almacen\u00e1ndolos en un registro de la siguiente manera: :g/^#/y A Lo que significa: Para cada l\u00ednea que coincida con este patr\u00f3n ^# (un t\u00edtulo en reducci\u00f3n). Ejecute el :y A comando, que significa: Copie la l\u00ednea actual y a\u00f1\u00e1dala al registro a (\u00bfrecuerda? Un registro en may\u00fascula significa usarla para agregar en lugar de reemplazar su contenido). Ahora puede pegar el contorno en otro archivo escribiendo :put a (o simplemente \"ap en modo Normal ). El :global comando es especialmente \u00fatil cuando lo combina con el :normal comando porque le permite ejecutar un n\u00famero arbitrario de comandos en *modo Normal* solo cuando se cumple una determinada condici\u00f3n . Por lo tanto, podr\u00edamos refinar nuestro dispositivo de adici\u00f3n de punto y coma anterior para agregar solo un punto y coma cuando no encuentre uno al final de una l\u00ednea de esta manera: :g!/;$/norm A; O podr\u00edamos definir un comando que disminuya la profundidad de los cap\u00edtulos de reducci\u00f3n como este: :g/^#/norm 0x Usando los comandos :global y :normal juntos, el \u00fanico l\u00edmite de lo que puedes lograr est\u00e1 determinado por tu propia imaginaci\u00f3n.","title":"EL COMANDO GLOBAL"},{"location":"019_vscode_con_neovim/#global-vs-global","text":"\u00bfNot\u00f3 el :g! del ejemplo anterior? Cuando usamos en :global! lugar del :global comando Ex que definimos, se aplica solo en las l\u00edneas que no coinciden con el patr\u00f3n que especificamos.","title":"GLOBAL VS GLOBAL!"},{"location":"019_vscode_con_neovim/#una-advertencia-de-eliminacion-para-tener-en-cuenta","text":"Cuando habilite la integraci\u00f3n de Neovim, el :delete comando se ejecutar\u00e1 dentro de Neovim y usar\u00e1 sus registros. Estos registros no se comparten con VSCodeVim y, por lo tanto, no podr\u00e1 inspeccionarlos mediante el :reg comando. No obstante, puede confiar en el hecho de que todav\u00eda est\u00e1n all\u00ed . Entonces la siguiente secuencia funcionar\u00e1 como se esperaba: :0,+3d a eliminar las primeras tres l\u00edneas en el a registro :$put a pegue el contenido del registro a (las tres l\u00edneas que eliminamos anteriormente) al final del archivo","title":"UNA ADVERTENCIA DE ELIMINACI\u00d3N PARA TENER EN CUENTA"},{"location":"01_introduccion/","text":"Introducci\u00f3n Visual Studio Code ofrece una experiencia de usuario incomparable con un gran soporte para muchos idiomas y ecosistemas de desarrollo. Viene con excelentes valores predeterminados y es muy f\u00e1cil de usar y comenzar con \u00e9l. Vim es asombroso. Su naturaleza modal y sus caracter\u00edsticas de edici\u00f3n de texto lo hacen \u00fanico entre otros editores. Vim ofrece un nivel completamente diferente de capacidad de edici\u00f3n de texto, velocidad y precisi\u00f3n. La combinaci\u00f3n de ambos no podr\u00eda ser menos asombrosamente incre\u00edble . Al combinar las fortalezas de Vim y Visual Studio Code , podr\u00e1s hacer que la interfaz entre tu cerebro y la computadora sea muy delgada, haciendo que tus pensamientos se materialicen perfectamente en c\u00f3digo. Esto es lo que vamos a cubrir: \u00bfQu\u00e9 es vim? \u00bfY por qu\u00e9 usar Vim en VSCode? \u00bfC\u00f3mo instalar Vim en VSCode? Habilidades b\u00e1sicas para sobrevivir en Vim Movi\u00e9ndote incre\u00edblemente r\u00e1pido con Core Vim Motions Edici\u00f3n a la velocidad del pensamiento con operadores y movimientos de Vim El lenguaje secreto de Vim Insertar texto a la Vim Seleccionar texto en modo visual Copiar y pegar Aprovechando registros Cosas circundantes con Vim Surround Mudarse a\u00fan m\u00e1s r\u00e1pido con los plugins Sneak y EasyMotion Crear accesos directos personalizados para hacerlo m\u00e1s efectivo Sobrecargando m\u00faltiples cursores con Vim Crear unidades de edici\u00f3n reutilizables con macros Integrando VSCode con Neovim para un asombro m\u00e1ximo Al final, ser\u00e1s capaz de manipulaciones de texto muy precisas y poderosas transformaciones de texto que antes eran inalcanzables para t\u00ed. Y con el tiempo, y a medida que practiques y te sientas c\u00f3modo con los diferentes comandos de Vim, te volver\u00e1s m\u00e1s r\u00e1pido y m\u00e1s competente en la edici\u00f3n que nunca. No se asume ning\u00fan conocimiento previo de Vim, as\u00ed que no te preocupes si no est\u00e1s familiarizado con Vim. Te guiar\u00e9 a trav\u00e9s de todos los conceptos y t\u00e9cnicas que necesitas saber para ser efectivo con Visual Studio Code y Vim. \u00bfQu\u00e9 es VIM? Vi es un antiguo editor de texto. M\u00e1s viejo incluso que la primera edad del mundo . Fue dise\u00f1ado para trabajar en artilugios llamados terminales con la caracter\u00edstica muy poco com\u00fan pero inspirada de funcionar de manera modal . Es decir, tiene un modo para insertar texto , otro para editar texto y uno diferente para seleccionar texto , esencialmente. La \u00faltima y m\u00e1s famosa encarnaci\u00f3n de Vi es Vim ( V i IM proved o formalmente V i IM itation) que funciona con interfaces de texto y gr\u00e1ficas, viene con una gran cantidad de mejoras sobre vi y es compatible con todas las plataformas conocidas por la humanidad. Pero el impacto de Vim no se detiene con Vim, las ideas de Vim son tan notables que han trascendido al editor de Vim y se han propagado a otros editores . Hoy puedes encontrar modos similares a Vim en casi cualquier editor e IDE que puedas imaginar. Como, apropiadamente, en Visual Studio Code . \u00bfPor qu\u00e9 VIM? \u00bfNo es suficiente el c\u00f3digo de Visual Studio? \u00bfPor qu\u00e9 deber\u00edas preocuparte por aprender sobre un antiguo editor en estos tiempos? \u00bfRealmente marca una gran diferencia en mi configuraci\u00f3n de Visual Studio Code? La verdad es que Vim proporciona una forma diferente de interactuar con el texto de cualquier otra cosa que hayas visto. Una forma que te brinda un nivel completamente diferente de control y fluidez al editar c\u00f3digo . A manos de un usuario experimentado, editar texto con Vim parece m\u00e1gico : Vim te hace m\u00e1s r\u00e1pido . Vim te hace m\u00e1s preciso Vim desbloquea un nivel de control completamente diferente en la edici\u00f3n de texto Vim adelgaza la interfaz entre tu cerebro y la computadora Es sorprendente contemplarlo mientras se hacen presentaciones :D \u00a1Incre\u00edble! Eso suena muy bien y todo eso... Pero... \u00bfC\u00f3mo puede Vim lograr todo esto? La respuesta es: modos . La naturaleza modal de Vim le permite a tu teclado controlar cada aspecto de tu editor. Cada modo es una pizarra limpia que le da a tu teclado nuevos poderes, para editar texto a la velocidad del rayo, navegar a la velocidad del pensamiento, seleccionar y mover texto al contenido de tu coraz\u00f3n, y m\u00e1s. Con Vim, ya no est\u00e1s limitado a insertar texto ni est\u00e1s sujeto a la tiran\u00eda del mouse para hacer clic, navegar o seleccionar texto. No. Despu\u00e9s de usar Vim durante un tiempo, ser\u00e1s como un cirujano de c\u00f3digos que realiza incisiones expertas con precisi\u00f3n quir\u00fargica cuando y donde sea necesario, navegando a trav\u00e9s de tu c\u00f3digo a la velocidad del rayo y a la precisi\u00f3n de un flujo de trabajo totalmente controlado por teclado . Entonces, \u00bfpor qu\u00e9 querr\u00edas aprender Vim hoy en d\u00eda? . Parafraseando al poderoso autor Drew Neil de Practical Vim y maestro de los arcanos m\u00e1s oscuros de Vim: Vim is for programmers who want to raise their game. In the hands of an expert, Vim shreds text at the speed of thought. Vim es para programadores que quieren mejorar su juego . En manos de un experto, Vim tritura el texto a la velocidad del pensamiento . \u00bfY qui\u00e9n no querr\u00eda eso? \u00bfPor qu\u00e9 VIM en VSCODE y no solo VIM? Tal vez te est\u00e9s preguntando... Ok. Si Vim es tan bueno, entonces... \u00bfPor qu\u00e9 no usar Vim en lugar de Vim dentro de Visual Studio Code? \u00a1Gran pregunta! La verdad es que configurar Vim para que funcione con un conjunto de caracter\u00edsticas similar a los editores de texto modernos no es una tarea trivial. Caracter\u00edsticas como la finalizaci\u00f3n del c\u00f3digo, la navegaci\u00f3n del c\u00f3digo, los mensajes de error en el editor, etc., aunque Vim no lo admite, funcionan perfectamente de forma inmediata. Visual Studio Code y Vim juntos ofrecen un punto muy dulce que equilibra la facilidad de configuraci\u00f3n y la experiencia de usuario de desarrollo s\u00faper rica de Visual Studio Code con muchas de las incre\u00edbles funciones presentes en Vim. Sin embargo, la traducci\u00f3n a\u00fan no es perfecta. Y si eres un usuario experimentado de Vim, es posible que falten algunas funciones. Pero en general, VSCodeVim ofrece una experiencia de Vim muy agradable fuera de Vim. Una breve nota sobre las convenciones utilizadas Dado que mucho de lo que sucede en Vim depende de la ubicaci\u00f3n del cursor, he usado una serie de diagramas que muestran la posici\u00f3n del cursor y c\u00f3mo cambia con el tiempo a medida que escribes comandos. Y dado que es bastante poco convencional frente a otros libros de programaci\u00f3n, creo que te ser\u00e1 \u00fatil que te lo explique para que est\u00e9s preparado antes de que te lo encuentres por primera vez. Aqu\u00ed hay un ejemplo: wwww ==> v v v v v word. is two words Eso significa lo siguiente: comandos tecle\u00e1ndose posici\u00f3n del cursor / / cambiando mientras / / se teclea wwww ==> v v v v v Palabra. Son dos palabras / / texto en el editor Entonces: El texto Palabra. Son dos palabras es el texto que est\u00e1 dentro de tu editor y que est\u00e1 sujeto a cambios o navegaci\u00f3n. Escribe el comando w sucesivamente (en este caso 4 veces) Cada vez que escribes el comando, se mueve el cursor (representado por v ) a una nueva ubicaci\u00f3n A veces, ser\u00e1 \u00fatil comparar c\u00f3mo funcionan dos comandos cuando se aplican sobre el mismo trozo de texto. En esos casos he usado los siguientes diagramas: wwww ==> v v v v v palabra. Son dos palabras palabra. Es una PALABRA WWW ==> ^ ^ ^ ^ Donde la parte inferior es similar en significado a la parte superior que discutimos anteriormente, pero por el hecho de que el cursor est\u00e1 representado por un cursor en forma de ^ en lugar de v . Al explicar los comandos, prestaremos atenci\u00f3n a las siguientes convenciones. Para operaciones y movimientos: f{character} f - f es el literal f, tal y como es {character} - es el lugar que necesita ser sustituido por algo. El nombre entre {} describe lo que se supone que debe aparecer. En este caso, un car\u00e1cter. Al construir y aplicar objetos de texto: {operator}{a|i}{text-object} {operator} - marcador de posici\u00f3n {a|i} - elegir entre la letra \"a\" \u00f3 \"i\" {text-object} - otro marcador de posici\u00f3n Y para ex-comandos: :[range]s/{pattern}/{substitute}/[flags] : - marca el comienzo de un comando ex. [range] - [] denota que esta parte es opcional. El nombre ser\u00e1 descriptivo s - comando literal. {pattern} - marcador de posici\u00f3n. {substitute} - otro marcador de posici\u00f3n. [flags] - otra parte opcional.","title":"01 Introducci\u00f3n"},{"location":"01_introduccion/#introduccion","text":"Visual Studio Code ofrece una experiencia de usuario incomparable con un gran soporte para muchos idiomas y ecosistemas de desarrollo. Viene con excelentes valores predeterminados y es muy f\u00e1cil de usar y comenzar con \u00e9l. Vim es asombroso. Su naturaleza modal y sus caracter\u00edsticas de edici\u00f3n de texto lo hacen \u00fanico entre otros editores. Vim ofrece un nivel completamente diferente de capacidad de edici\u00f3n de texto, velocidad y precisi\u00f3n. La combinaci\u00f3n de ambos no podr\u00eda ser menos asombrosamente incre\u00edble . Al combinar las fortalezas de Vim y Visual Studio Code , podr\u00e1s hacer que la interfaz entre tu cerebro y la computadora sea muy delgada, haciendo que tus pensamientos se materialicen perfectamente en c\u00f3digo. Esto es lo que vamos a cubrir: \u00bfQu\u00e9 es vim? \u00bfY por qu\u00e9 usar Vim en VSCode? \u00bfC\u00f3mo instalar Vim en VSCode? Habilidades b\u00e1sicas para sobrevivir en Vim Movi\u00e9ndote incre\u00edblemente r\u00e1pido con Core Vim Motions Edici\u00f3n a la velocidad del pensamiento con operadores y movimientos de Vim El lenguaje secreto de Vim Insertar texto a la Vim Seleccionar texto en modo visual Copiar y pegar Aprovechando registros Cosas circundantes con Vim Surround Mudarse a\u00fan m\u00e1s r\u00e1pido con los plugins Sneak y EasyMotion Crear accesos directos personalizados para hacerlo m\u00e1s efectivo Sobrecargando m\u00faltiples cursores con Vim Crear unidades de edici\u00f3n reutilizables con macros Integrando VSCode con Neovim para un asombro m\u00e1ximo Al final, ser\u00e1s capaz de manipulaciones de texto muy precisas y poderosas transformaciones de texto que antes eran inalcanzables para t\u00ed. Y con el tiempo, y a medida que practiques y te sientas c\u00f3modo con los diferentes comandos de Vim, te volver\u00e1s m\u00e1s r\u00e1pido y m\u00e1s competente en la edici\u00f3n que nunca. No se asume ning\u00fan conocimiento previo de Vim, as\u00ed que no te preocupes si no est\u00e1s familiarizado con Vim. Te guiar\u00e9 a trav\u00e9s de todos los conceptos y t\u00e9cnicas que necesitas saber para ser efectivo con Visual Studio Code y Vim.","title":"Introducci\u00f3n"},{"location":"01_introduccion/#que-es-vim","text":"Vi es un antiguo editor de texto. M\u00e1s viejo incluso que la primera edad del mundo . Fue dise\u00f1ado para trabajar en artilugios llamados terminales con la caracter\u00edstica muy poco com\u00fan pero inspirada de funcionar de manera modal . Es decir, tiene un modo para insertar texto , otro para editar texto y uno diferente para seleccionar texto , esencialmente. La \u00faltima y m\u00e1s famosa encarnaci\u00f3n de Vi es Vim ( V i IM proved o formalmente V i IM itation) que funciona con interfaces de texto y gr\u00e1ficas, viene con una gran cantidad de mejoras sobre vi y es compatible con todas las plataformas conocidas por la humanidad. Pero el impacto de Vim no se detiene con Vim, las ideas de Vim son tan notables que han trascendido al editor de Vim y se han propagado a otros editores . Hoy puedes encontrar modos similares a Vim en casi cualquier editor e IDE que puedas imaginar. Como, apropiadamente, en Visual Studio Code .","title":"\u00bfQu\u00e9 es VIM?"},{"location":"01_introduccion/#por-que-vim-no-es-suficiente-el-codigo-de-visual-studio","text":"\u00bfPor qu\u00e9 deber\u00edas preocuparte por aprender sobre un antiguo editor en estos tiempos? \u00bfRealmente marca una gran diferencia en mi configuraci\u00f3n de Visual Studio Code? La verdad es que Vim proporciona una forma diferente de interactuar con el texto de cualquier otra cosa que hayas visto. Una forma que te brinda un nivel completamente diferente de control y fluidez al editar c\u00f3digo . A manos de un usuario experimentado, editar texto con Vim parece m\u00e1gico : Vim te hace m\u00e1s r\u00e1pido . Vim te hace m\u00e1s preciso Vim desbloquea un nivel de control completamente diferente en la edici\u00f3n de texto Vim adelgaza la interfaz entre tu cerebro y la computadora Es sorprendente contemplarlo mientras se hacen presentaciones :D \u00a1Incre\u00edble! Eso suena muy bien y todo eso... Pero... \u00bfC\u00f3mo puede Vim lograr todo esto? La respuesta es: modos . La naturaleza modal de Vim le permite a tu teclado controlar cada aspecto de tu editor. Cada modo es una pizarra limpia que le da a tu teclado nuevos poderes, para editar texto a la velocidad del rayo, navegar a la velocidad del pensamiento, seleccionar y mover texto al contenido de tu coraz\u00f3n, y m\u00e1s. Con Vim, ya no est\u00e1s limitado a insertar texto ni est\u00e1s sujeto a la tiran\u00eda del mouse para hacer clic, navegar o seleccionar texto. No. Despu\u00e9s de usar Vim durante un tiempo, ser\u00e1s como un cirujano de c\u00f3digos que realiza incisiones expertas con precisi\u00f3n quir\u00fargica cuando y donde sea necesario, navegando a trav\u00e9s de tu c\u00f3digo a la velocidad del rayo y a la precisi\u00f3n de un flujo de trabajo totalmente controlado por teclado . Entonces, \u00bfpor qu\u00e9 querr\u00edas aprender Vim hoy en d\u00eda? . Parafraseando al poderoso autor Drew Neil de Practical Vim y maestro de los arcanos m\u00e1s oscuros de Vim: Vim is for programmers who want to raise their game. In the hands of an expert, Vim shreds text at the speed of thought. Vim es para programadores que quieren mejorar su juego . En manos de un experto, Vim tritura el texto a la velocidad del pensamiento . \u00bfY qui\u00e9n no querr\u00eda eso?","title":"\u00bfPor qu\u00e9 VIM? \u00bfNo es suficiente el c\u00f3digo de Visual Studio?"},{"location":"01_introduccion/#por-que-vim-en-vscode-y-no-solo-vim","text":"Tal vez te est\u00e9s preguntando... Ok. Si Vim es tan bueno, entonces... \u00bfPor qu\u00e9 no usar Vim en lugar de Vim dentro de Visual Studio Code? \u00a1Gran pregunta! La verdad es que configurar Vim para que funcione con un conjunto de caracter\u00edsticas similar a los editores de texto modernos no es una tarea trivial. Caracter\u00edsticas como la finalizaci\u00f3n del c\u00f3digo, la navegaci\u00f3n del c\u00f3digo, los mensajes de error en el editor, etc., aunque Vim no lo admite, funcionan perfectamente de forma inmediata. Visual Studio Code y Vim juntos ofrecen un punto muy dulce que equilibra la facilidad de configuraci\u00f3n y la experiencia de usuario de desarrollo s\u00faper rica de Visual Studio Code con muchas de las incre\u00edbles funciones presentes en Vim. Sin embargo, la traducci\u00f3n a\u00fan no es perfecta. Y si eres un usuario experimentado de Vim, es posible que falten algunas funciones. Pero en general, VSCodeVim ofrece una experiencia de Vim muy agradable fuera de Vim.","title":"\u00bfPor qu\u00e9 VIM en VSCODE y no solo VIM?"},{"location":"01_introduccion/#una-breve-nota-sobre-las-convenciones-utilizadas","text":"Dado que mucho de lo que sucede en Vim depende de la ubicaci\u00f3n del cursor, he usado una serie de diagramas que muestran la posici\u00f3n del cursor y c\u00f3mo cambia con el tiempo a medida que escribes comandos. Y dado que es bastante poco convencional frente a otros libros de programaci\u00f3n, creo que te ser\u00e1 \u00fatil que te lo explique para que est\u00e9s preparado antes de que te lo encuentres por primera vez. Aqu\u00ed hay un ejemplo: wwww ==> v v v v v word. is two words Eso significa lo siguiente: comandos tecle\u00e1ndose posici\u00f3n del cursor / / cambiando mientras / / se teclea wwww ==> v v v v v Palabra. Son dos palabras / / texto en el editor Entonces: El texto Palabra. Son dos palabras es el texto que est\u00e1 dentro de tu editor y que est\u00e1 sujeto a cambios o navegaci\u00f3n. Escribe el comando w sucesivamente (en este caso 4 veces) Cada vez que escribes el comando, se mueve el cursor (representado por v ) a una nueva ubicaci\u00f3n A veces, ser\u00e1 \u00fatil comparar c\u00f3mo funcionan dos comandos cuando se aplican sobre el mismo trozo de texto. En esos casos he usado los siguientes diagramas: wwww ==> v v v v v palabra. Son dos palabras palabra. Es una PALABRA WWW ==> ^ ^ ^ ^ Donde la parte inferior es similar en significado a la parte superior que discutimos anteriormente, pero por el hecho de que el cursor est\u00e1 representado por un cursor en forma de ^ en lugar de v . Al explicar los comandos, prestaremos atenci\u00f3n a las siguientes convenciones. Para operaciones y movimientos: f{character} f - f es el literal f, tal y como es {character} - es el lugar que necesita ser sustituido por algo. El nombre entre {} describe lo que se supone que debe aparecer. En este caso, un car\u00e1cter. Al construir y aplicar objetos de texto: {operator}{a|i}{text-object} {operator} - marcador de posici\u00f3n {a|i} - elegir entre la letra \"a\" \u00f3 \"i\" {text-object} - otro marcador de posici\u00f3n Y para ex-comandos: :[range]s/{pattern}/{substitute}/[flags] : - marca el comienzo de un comando ex. [range] - [] denota que esta parte es opcional. El nombre ser\u00e1 descriptivo s - comando literal. {pattern} - marcador de posici\u00f3n. {substitute} - otro marcador de posici\u00f3n. [flags] - otra parte opcional.","title":"Una breve nota sobre las convenciones utilizadas"},{"location":"020_teclas_practicas/","text":"ALGUNAS ASIGNACIONES DE TECLAS SOLO PR\u00c1CTICAS DE VSCODE Estas son algunas asignaciones \u00fatiles que se le ocurri\u00f3 al equipo VSCodeVim. Est\u00e1n inspirados en Vim y funcionan solo en el c\u00f3digo de Visual Studio: af es un comando de modo Visual que selecciona bloques de texto cada vez m\u00e1s grandes. gh es el equivalente a pasar el mouse sobre donde est\u00e1 el cursor. S\u00faper pr\u00e1ctico para habilitar un flujo de trabajo de solo teclado y seguir disfrutando de algunas funciones (mensajes de error, tipos, etc.) solo disponibles a trav\u00e9s del mouse.","title":"ALGUNAS ASIGNACIONES DE TECLAS SOLO PR\u00c1CTICAS DE VSCODE"},{"location":"020_teclas_practicas/#algunas-asignaciones-de-teclas-solo-practicas-de-vscode","text":"Estas son algunas asignaciones \u00fatiles que se le ocurri\u00f3 al equipo VSCodeVim. Est\u00e1n inspirados en Vim y funcionan solo en el c\u00f3digo de Visual Studio: af es un comando de modo Visual que selecciona bloques de texto cada vez m\u00e1s grandes. gh es el equivalente a pasar el mouse sobre donde est\u00e1 el cursor. S\u00faper pr\u00e1ctico para habilitar un flujo de trabajo de solo teclado y seguir disfrutando de algunas funciones (mensajes de error, tipos, etc.) solo disponibles a trav\u00e9s del mouse.","title":"ALGUNAS ASIGNACIONES DE TECLAS SOLO PR\u00c1CTICAS DE VSCODE"},{"location":"021_epilogo/","text":"","title":"021 epilogo"},{"location":"02_instalacion/","text":"Instalar VIM dentro del c\u00f3digo de Visual Studio Para traer la genialidad de Vim dentro de Visual Studio Code, necesitar\u00e1s instalar el complemento VsCodeVim : Abre el c\u00f3digo de Visual Studio Ve a extensiones Escribe vim en el cuadro de b\u00fasqueda El primer complemento llamado Vim es el que se desea ( VSCodeVim ) Haz clic en el bot\u00f3n de instalaci\u00f3n. \u00a1Victoria \u00e9pica! As\u00ed es como se instala VSCodeVim Despu\u00e9s de que Visual Studio Code termine de instalar la extensi\u00f3n, es posible que debas reiniciarla para que los cambios surtan efecto. \u00bfLo has reiniciado? \u00a1Excelente! Abre un archivo de c\u00f3digo de tu \u00faltimo proyecto y mira el cursor. \u00bfSe parece a un rect\u00e1ngulo? \u00bfSi? Entonces, \u00a1Bienvenido a Vim! \u00bfEst\u00e1s utilizando la paleta de comandos de VSCODE? Si no lo est\u00e1s haciendo, definitivamente deber\u00edas. Escribe CTRL-SHIFT-P en Linux y Windows o CMD-SHIFT-P en una Mac y acceder\u00e1s a la paleta de comandos. Desde aqu\u00ed puedes acceder a casi cualquier funcionalidad dentro de Visual Studio Code con solo escribir. Por ejemplo, escribe extensiones y selecciona Mostrar extensiones para ir a la pesta\u00f1a de extensiones. Impresionante \u00bfverdad? Escribe y mira si puedes encontrar cosas que normalmente usas en tu flujo de trabajo diario. Dominar los m\u00e9todos abreviados como CTRL-SHIFT-P , para abrir la paleta de comandos, o CTRL-P , para ir a un archivo, es esencial para desarrollar un flujo de trabajo centrado en el teclado y mejorar tu productividad en Visual Studio Code. As\u00ed que apr\u00e9ndelos y \u00fasalos. Me lo agradecer\u00e1s m\u00e1s tarde. Las nuevas versiones de Visual Studio Code traen soporte para complementos que funcionan desde el primer momento tan pronto como se instalan. Pero nunca se sabe... Siempre se siente m\u00e1s seguro reiniciar","title":"02 Instalaci\u00f3n"},{"location":"02_instalacion/#instalar-vim-dentro-del-codigo-de-visual-studio","text":"Para traer la genialidad de Vim dentro de Visual Studio Code, necesitar\u00e1s instalar el complemento VsCodeVim : Abre el c\u00f3digo de Visual Studio Ve a extensiones Escribe vim en el cuadro de b\u00fasqueda El primer complemento llamado Vim es el que se desea ( VSCodeVim ) Haz clic en el bot\u00f3n de instalaci\u00f3n. \u00a1Victoria \u00e9pica! As\u00ed es como se instala VSCodeVim Despu\u00e9s de que Visual Studio Code termine de instalar la extensi\u00f3n, es posible que debas reiniciarla para que los cambios surtan efecto. \u00bfLo has reiniciado? \u00a1Excelente! Abre un archivo de c\u00f3digo de tu \u00faltimo proyecto y mira el cursor. \u00bfSe parece a un rect\u00e1ngulo? \u00bfSi? Entonces, \u00a1Bienvenido a Vim!","title":"Instalar VIM dentro del c\u00f3digo de Visual Studio"},{"location":"02_instalacion/#estas-utilizando-la-paleta-de-comandos-de-vscode","text":"Si no lo est\u00e1s haciendo, definitivamente deber\u00edas. Escribe CTRL-SHIFT-P en Linux y Windows o CMD-SHIFT-P en una Mac y acceder\u00e1s a la paleta de comandos. Desde aqu\u00ed puedes acceder a casi cualquier funcionalidad dentro de Visual Studio Code con solo escribir. Por ejemplo, escribe extensiones y selecciona Mostrar extensiones para ir a la pesta\u00f1a de extensiones. Impresionante \u00bfverdad? Escribe y mira si puedes encontrar cosas que normalmente usas en tu flujo de trabajo diario. Dominar los m\u00e9todos abreviados como CTRL-SHIFT-P , para abrir la paleta de comandos, o CTRL-P , para ir a un archivo, es esencial para desarrollar un flujo de trabajo centrado en el teclado y mejorar tu productividad en Visual Studio Code. As\u00ed que apr\u00e9ndelos y \u00fasalos. Me lo agradecer\u00e1s m\u00e1s tarde. Las nuevas versiones de Visual Studio Code traen soporte para complementos que funcionan desde el primer momento tan pronto como se instalan. Pero nunca se sabe... Siempre se siente m\u00e1s seguro reiniciar","title":"\u00bfEst\u00e1s utilizando la paleta de comandos de VSCODE?"},{"location":"03_primeros_pasos/","text":"Primeros pasos en VIM Un cursor en forma de rect\u00e1ngulo... \u00a1Curioso! Si intentas escribir texto en este momento, te sorprender\u00e1s al ver que no sucede nada; \u00f3, para ser m\u00e1s precisos, no pasa nada de lo que esperabas. Por un lado, a medida que escribes en el teclado, no se reflejan caracteres en la pantalla. De hecho, es probable que al escribir, te topes con un comando de significado especial que enviar\u00e1 tu cursor volando por la pantalla o incluso eliminar\u00e1 o editar\u00e1 alg\u00fan c\u00f3digo. Todo este comportamiento extra\u00f1o e inesperado es el resultado del modo Normal , el modo predeterminado en el que interact\u00faas con el c\u00f3digo en VIM. Y, en modo Normal , uno no inserta texto. Entonces, \u00bfqu\u00e9 es el modo normal ? Y, adem\u00e1s, \u00bfqu\u00e9 significa el modo ?. \u00bfVes el mensaje --NORMAL-- en tu barra de estado? Eso es VSCodeVIM que te dice que est\u00e1s en modo Normal. Modos en VIM Los modos son una de las decisiones de dise\u00f1o m\u00e1s importantes e impactantes en VIM, por lo que vale la pena pasar un poco de tiempo para comprender realmente qu\u00e9 significan los modos y c\u00f3mo afectan en la experiencia del desarrollador de VIM. Los modos VIM siguen el mismo principio de usa el sombrero adecuado para la situaci\u00f3n correcta. Dependiendo de la tarea en cuesti\u00f3n, puedes (figurativamente) usar el sombrero adecuado para adaptar mejor tu forma de pensar, comportamiento y mentalidad a esa situaci\u00f3n. Por ejemplo, si est\u00e1s tratando de resolver un problema de formas novedosas, es posible que desees usar una gorra de explorador que muestre tu mentalidad exploratoria. Si quieres ser valiente y atrevido en una situaci\u00f3n inc\u00f3moda, usar\u00e1s el casco de un vikingo. \u00bfDiplom\u00e1tico? Un sombrero de cortesano, etc. De manera similar, el editor de VIM tiene diferentes modos que se adaptan mejor a la realizaci\u00f3n de diferentes tareas. Por ejemplo, estos son tres de los modos m\u00e1s comunes en VIM: Al igual que usar el sombrero adecuado, cuando uses VIM usar\u00e1 el modo Insertar cuando su objetivo sea insertar texto . Utilizar\u00e1 el modo Normal cuando su objetivo sea editar texto o navegar a trav\u00e9s de su base de c\u00f3digo, y utilizar\u00e1 el modo Visual cuando desee seleccionar alg\u00fan texto . Pero, \u00bfqu\u00e9 significan exactamente los modos? \u00bfQu\u00e9 significa adaptarse a la tarea en cuesti\u00f3n en el contexto de un editor de texto? En esencia, significa que tu teclado adquiere diferentes capacidades seg\u00fan el modo en el que se encuentre. Es decir, seg\u00fan el modo en el que se encuentre, al escribir una tecla en tu teclado obtendr\u00e1s diferentes resultados adaptados a ese modo en particular. Toma la letra w , por ejemplo. Escribe w en cualquiera de estos modos y esto es lo que suceder\u00e1: En el modo Insertar , escribir\u00e1 la letra w , como en cualquier otro editor. En el modo Normal , mover\u00e1 el cursor al comienzo de la siguiente palabra. En el modo Visual , seleccionar\u00e1 el texto hasta e incluyendo el comienzo de la siguiente palabra. Entonces, \u00bfqu\u00e9 ganamos con que VIM sea un editor modal? Gracias a la existencia de modos, el teclado se convierte en una pizarra en blanco en cada uno de ellos. Lo que significa que VIM es libre de adaptar completamente el teclado para que sea el m\u00e1s efectivo para realizar la tarea en cuesti\u00f3n, teniendo la funcionalidad deseada al alcance de la mano. Como resultado, y a diferencia de otros editores no modales, VIM no necesita confiar en combinaciones de teclas locas ( CTRL+ALT+SHIT+something ). Eso significa que ser\u00e1s m\u00e1s r\u00e1pido, ser\u00e1s m\u00e1s efectivo y mantendr\u00e1s la salud de tus mu\u00f1ecas y dedos mucho m\u00e1s tiempo. Si. Est\u00e1s en modo Normal . En este modo no inserta texto. En cambio, te mueves y lo editas. Esta decisi\u00f3n de dise\u00f1o surge de la constataci\u00f3n de que pasamos mucho m\u00e1s tiempo leyendo, navegando y cambiando el c\u00f3digo de lo que lo hacemos insert\u00e1ndolo en primer lugar . Modo normal As\u00ed que, el modo Normal es el modo predeterminado en VIM (a diferencia del modo Insertar , que es el modo predeterminado y \u00fanico en la mayor\u00eda de los otros editores). En modo Normal no se inserta texto. En cambio, te mueves y lo editas. Esta decisi\u00f3n de dise\u00f1o surge de la constataci\u00f3n de que pasamos mucho m\u00e1s tiempo leyendo, navegando y cambiando el c\u00f3digo que insert\u00e1ndolo inicialmente . El modo normal puede sentirse como un lugar hostil al principio, ya que escribir cualquier tecla puede y dar\u00e1 como resultado un comportamiento inesperado. Por lo tanto, ayuda entrar en modo Normal con un poco de preparaci\u00f3n. Estos son los conceptos b\u00e1sicos que necesitas para sobrevivir y comenzar a desarrollar tus habilidades de VIM: Mu\u00e9vete con las teclas hjkl . Entra en el modo de inserci\u00f3n , con i , el que permite escribir cosas como de costumbre. Regresa al modo Normal con <ESC> , <CTRL>-C o <CTRL>-[ . Movimiento b\u00e1sico en VIM hjkl son los movimientos centrales y m\u00e1s b\u00e1sicos en VIM . Te permite mover el cursor un caracter en cada direcci\u00f3n: No es la forma m\u00e1s efectiva ni la m\u00e1s eficiente de moverse en VIM, pero s\u00ed te brindan agilidad y confianza para moverte por un archivo en modo Normal . Aprender hjkl de manera efectiva es el equivalente a aprender a caminar, o aprender a andar en bicicleta. Despu\u00e9s de que te sientas c\u00f3modo con m\u00e1s movimientos de VIM, no usar\u00e1s hjkl tanto, pero ser\u00e1n muy \u00fatiles para movimientos de corta distancia y peque\u00f1as correcciones . j y k tambi\u00e9n son muy \u00fatiles dentro del explorador de archivos, la paleta de comandos y los paneles Ir a ya que te permiten moverte hacia arriba y hacia abajo y seleccionar diferentes elementos. Del modo normal al modo de inserci\u00f3n y viceversa La tecla i te permite ingresar al modo Insertar despu\u00e9s del cursor. Al comienzo de tu viaje a VIM, puedes ver i como una escotilla de escape hacia la cordura . Si alguna vez te sientes estresado y no est\u00e1s progresando, puedes i ngresar al modo Insertar , el mundo donde tu editor se comporta como lo hizo antes de instalar VIM. Cuando te sientas con energ\u00eda y entusiasmo, puedes escribir <ESC> , <CTRL>-C o <CTRL>-[ y se te devolver\u00e1 al modo normal en el que podr\u00e1s editar y navegar por tu c\u00f3digo. A medida que ganes confianza y aprendas m\u00e1s comandos, descubrir\u00e1s que pasar\u00e1s m\u00e1s y m\u00e1s tiempo en el modo Normal , y solo en el modo Insertar para ataques de edici\u00f3n de texto t\u00e1cticos y precisos. <ESC> o <CTRL>-[ pueden ser inc\u00f3modos de escribir, por lo que tiendo a recomendar que se use <CTRL>-C . Y dado que usar\u00e1s la tecla CTRL con bastante frecuencia (aunque no tan a menudo como con otros editores), te recomiendo que sigas este consejo: Intercambiar la tecla de bloqueo de may\u00fasculas con ESC Algo muy \u00fatil cuando se usa VIM es reasignar la tecla de bloqueo de may\u00fasculas a escape . Hacer esto significa que ahora puedes alcanzar f\u00e1cilmente una tecla muy utilizada en programaci\u00f3n, como Esc , desde la comodidad de la fila de inicio del teclado. Solo necesitas estirar ese dedo me\u00f1ique hacia la izquierda medio cent\u00edmetro y ya est\u00e1. El bloqueo de may\u00fascula puede reasignarse a la tecla Esc igualmente, con lo que tampoco se pierde esta funcionalidad y se evita tener teclas duplicadas para la misma funci\u00f3n. El proceso es espec\u00edfico para cada sistema y habr\u00eda que investigar c\u00f3mo hacerlo en cada uno de ellos. Como ejemplo veamos el caso del conocido escritorio Plasma de KDE . Accedemos a la configuraci\u00f3n de nuestro teclado y seleccionamos la pesta\u00f1a Avanzada . Desplegamos Comportamiento de Bloq May\u00fas y seleccionamos el que m\u00e1s nos interese; en este caso Intercambiar Esc y Bloq May\u00fas si bien se podr\u00eda haber elegido Hacer de Bloq May\u00fas un Esc adicional \u00f3 Make unmodified Caps Lock an additional Esc, but Shift + Caps Lock behaves like regular Caps Lock . Hay quien prefiere utilizar Caps Lock como una alternativa m\u00e1s accesible para la tecla Ctrl dado que Vim usa la combinaci\u00f3n <Ctrl>-C como altenativa a Esc como ya hemos se\u00f1alado. Si bien podr\u00edamos pensar que ya est\u00e1 todo listo, no es el caso. De hecho podemos comprobar que nuestro cambio se ha hecho efectivo para todo el sistema y funciona all\u00e1 donde lo probemos; por ejemplo en una versi\u00f3n cl\u00e1sica de Vim . Pero no as\u00ed en Visual Studio Code que presenta la caracter\u00edstica de usar su propio dispatcher de teclas. Hemos de cambiar este comportamiento para que use el del propio sistema accediendo a Settings y cambiando la propiedad keyboard.dispatch estableci\u00e9ndola en keyCode como se muestra en la imagen siguiente: Una nota importante para usuarios de windows y Linux Espera... \u00bf <CTRL>-C para volver al modo Normal ? \u00bfNo es eso lo que he estado usando toda la vida para copiar cosas? Instalar VSCodeVIM tiene un par de efectos secundarios. Una es que obtienes ese extra\u00f1o cursor cuadrado que acabamos de comentar, y la otra es que algunas teclas de uso com\u00fan se reasignan a su funci\u00f3n natural en la tierra de VIM. Por ejemplo: <CTRL>-C ya no copia, en su lugar te devuelve al modo Normal . El comando que usamos en VIM para copiar es mucho menos detallado: y (por yank , tirar). <CTRL>-V ya no pega y en su lugar te env\u00eda al modo de bloque visual . Nuevamente, el comando que usamos en VIM para pegar es menos detallado: solo una p (para paste pegar). <CTRL>-F ya no te permite buscar, en su lugar te permite desplazar tu pantalla una p\u00e1gina hacia adelante. Una vez m\u00e1s, el comando que usamos en VIM para la b\u00fasqueda est\u00e1 m\u00e1s cerca de tu alcance: /{t\u00e9rmino-a-buscar} . Dependiendo de lo aventurero que seas y tu tolerancia a las molestias, es posible que desees mantener sus teclas como est\u00e1n ahora en lugar de continuar con los cambios realizados por VIM. Si sientes que deseas deshabilitar estas reasignaciones por el momento, puedes usar estas dos configuraciones de VSCodeVIM: VIM.useCtrlKeys habilita y deshabilita la reasignaci\u00f3n de las teclas CTRL . Config\u00faralo en false y las teclas para copiar, pegar, buscar, etc. volver\u00e1n de nuevo a los valores por defecto de VSCode. Aj\u00fastalo a true y VIM se har\u00e1 cargo. VIM.handleKeys te brinda un control m\u00e1s granular sobre las asignaciones que puedes habilitar o deshabilitar. Es un diccionario de pares clave/valor, donde la clave es la combinaci\u00f3n de teclas que se desea habilitar/deshabilitar y el valor es un indicador booleano que representa si VIM est\u00e1 habilitado para esa combinaci\u00f3n de teclas o no. Por ejemplo, usar \"<C-d>\": true significa que <C-d> es manejado por VIM, mientras que al configurarlo false vuelve a la funcionalidad nativa de VSCode. Las listas completas de las claves afectadas por estas reasignaciones se pueden encontrar en el archivo package.json de la extensi\u00f3n VSCodeVIM en la secci\u00f3n de keybindings . RESUMEN Cuando instales VSCodeVIM, tu editor de VSCode se convertir\u00e1 en un lugar un poco extra\u00f1o. VIM conf\u00eda en los modos para hacerlo m\u00e1s efectivo y el modo predeterminado en VIM es el modo Normal , un modo en el que no se escribe texto en la pantalla. El modo normal est\u00e1 optimizado para editar texto y navegar por su base de c\u00f3digo. A menudo pasamos m\u00e1s tiempo editando y explorando c\u00f3digo de lo que lo hacemos al insertarlo desde cero, por lo que es una decisi\u00f3n de dise\u00f1o ingeniosa. A\u00fan as\u00ed, puede parecer bastante desalentador al principio, por lo que es \u00fatil conocer algunas de las claves que puedes usar para obtener un nivel b\u00e1sico de autonom\u00eda: Usa hjkl para moverte. Usa i para volver al modo Insertar donde puedes actuar como si estuvieras en VSCode vainilla y escribir. Usa <ESC> , <CTRL>-C o <CTRL>-[ para volver al modo Normal . Con una mejor comprensi\u00f3n de la filosof\u00eda de VIM y estas asignaciones de teclas b\u00e1sicas en tu haber, ahora est\u00e1s listo para continuar desarrollando tus habilidades de VIM y m\u00e1s cerca de ser m\u00e1s incre\u00edble en la programaci\u00f3n. \u00a1Adelante!.","title":"03 Primeros pasos"},{"location":"03_primeros_pasos/#primeros-pasos-en-vim","text":"Un cursor en forma de rect\u00e1ngulo... \u00a1Curioso! Si intentas escribir texto en este momento, te sorprender\u00e1s al ver que no sucede nada; \u00f3, para ser m\u00e1s precisos, no pasa nada de lo que esperabas. Por un lado, a medida que escribes en el teclado, no se reflejan caracteres en la pantalla. De hecho, es probable que al escribir, te topes con un comando de significado especial que enviar\u00e1 tu cursor volando por la pantalla o incluso eliminar\u00e1 o editar\u00e1 alg\u00fan c\u00f3digo. Todo este comportamiento extra\u00f1o e inesperado es el resultado del modo Normal , el modo predeterminado en el que interact\u00faas con el c\u00f3digo en VIM. Y, en modo Normal , uno no inserta texto. Entonces, \u00bfqu\u00e9 es el modo normal ? Y, adem\u00e1s, \u00bfqu\u00e9 significa el modo ?. \u00bfVes el mensaje --NORMAL-- en tu barra de estado? Eso es VSCodeVIM que te dice que est\u00e1s en modo Normal.","title":"Primeros pasos en VIM"},{"location":"03_primeros_pasos/#modos-en-vim","text":"Los modos son una de las decisiones de dise\u00f1o m\u00e1s importantes e impactantes en VIM, por lo que vale la pena pasar un poco de tiempo para comprender realmente qu\u00e9 significan los modos y c\u00f3mo afectan en la experiencia del desarrollador de VIM. Los modos VIM siguen el mismo principio de usa el sombrero adecuado para la situaci\u00f3n correcta. Dependiendo de la tarea en cuesti\u00f3n, puedes (figurativamente) usar el sombrero adecuado para adaptar mejor tu forma de pensar, comportamiento y mentalidad a esa situaci\u00f3n. Por ejemplo, si est\u00e1s tratando de resolver un problema de formas novedosas, es posible que desees usar una gorra de explorador que muestre tu mentalidad exploratoria. Si quieres ser valiente y atrevido en una situaci\u00f3n inc\u00f3moda, usar\u00e1s el casco de un vikingo. \u00bfDiplom\u00e1tico? Un sombrero de cortesano, etc. De manera similar, el editor de VIM tiene diferentes modos que se adaptan mejor a la realizaci\u00f3n de diferentes tareas. Por ejemplo, estos son tres de los modos m\u00e1s comunes en VIM: Al igual que usar el sombrero adecuado, cuando uses VIM usar\u00e1 el modo Insertar cuando su objetivo sea insertar texto . Utilizar\u00e1 el modo Normal cuando su objetivo sea editar texto o navegar a trav\u00e9s de su base de c\u00f3digo, y utilizar\u00e1 el modo Visual cuando desee seleccionar alg\u00fan texto . Pero, \u00bfqu\u00e9 significan exactamente los modos? \u00bfQu\u00e9 significa adaptarse a la tarea en cuesti\u00f3n en el contexto de un editor de texto? En esencia, significa que tu teclado adquiere diferentes capacidades seg\u00fan el modo en el que se encuentre. Es decir, seg\u00fan el modo en el que se encuentre, al escribir una tecla en tu teclado obtendr\u00e1s diferentes resultados adaptados a ese modo en particular. Toma la letra w , por ejemplo. Escribe w en cualquiera de estos modos y esto es lo que suceder\u00e1: En el modo Insertar , escribir\u00e1 la letra w , como en cualquier otro editor. En el modo Normal , mover\u00e1 el cursor al comienzo de la siguiente palabra. En el modo Visual , seleccionar\u00e1 el texto hasta e incluyendo el comienzo de la siguiente palabra. Entonces, \u00bfqu\u00e9 ganamos con que VIM sea un editor modal? Gracias a la existencia de modos, el teclado se convierte en una pizarra en blanco en cada uno de ellos. Lo que significa que VIM es libre de adaptar completamente el teclado para que sea el m\u00e1s efectivo para realizar la tarea en cuesti\u00f3n, teniendo la funcionalidad deseada al alcance de la mano. Como resultado, y a diferencia de otros editores no modales, VIM no necesita confiar en combinaciones de teclas locas ( CTRL+ALT+SHIT+something ). Eso significa que ser\u00e1s m\u00e1s r\u00e1pido, ser\u00e1s m\u00e1s efectivo y mantendr\u00e1s la salud de tus mu\u00f1ecas y dedos mucho m\u00e1s tiempo. Si. Est\u00e1s en modo Normal . En este modo no inserta texto. En cambio, te mueves y lo editas. Esta decisi\u00f3n de dise\u00f1o surge de la constataci\u00f3n de que pasamos mucho m\u00e1s tiempo leyendo, navegando y cambiando el c\u00f3digo de lo que lo hacemos insert\u00e1ndolo en primer lugar .","title":"Modos en VIM"},{"location":"03_primeros_pasos/#modo-normal","text":"As\u00ed que, el modo Normal es el modo predeterminado en VIM (a diferencia del modo Insertar , que es el modo predeterminado y \u00fanico en la mayor\u00eda de los otros editores). En modo Normal no se inserta texto. En cambio, te mueves y lo editas. Esta decisi\u00f3n de dise\u00f1o surge de la constataci\u00f3n de que pasamos mucho m\u00e1s tiempo leyendo, navegando y cambiando el c\u00f3digo que insert\u00e1ndolo inicialmente . El modo normal puede sentirse como un lugar hostil al principio, ya que escribir cualquier tecla puede y dar\u00e1 como resultado un comportamiento inesperado. Por lo tanto, ayuda entrar en modo Normal con un poco de preparaci\u00f3n. Estos son los conceptos b\u00e1sicos que necesitas para sobrevivir y comenzar a desarrollar tus habilidades de VIM: Mu\u00e9vete con las teclas hjkl . Entra en el modo de inserci\u00f3n , con i , el que permite escribir cosas como de costumbre. Regresa al modo Normal con <ESC> , <CTRL>-C o <CTRL>-[ .","title":"Modo normal"},{"location":"03_primeros_pasos/#movimiento-basico-en-vim","text":"hjkl son los movimientos centrales y m\u00e1s b\u00e1sicos en VIM . Te permite mover el cursor un caracter en cada direcci\u00f3n: No es la forma m\u00e1s efectiva ni la m\u00e1s eficiente de moverse en VIM, pero s\u00ed te brindan agilidad y confianza para moverte por un archivo en modo Normal . Aprender hjkl de manera efectiva es el equivalente a aprender a caminar, o aprender a andar en bicicleta. Despu\u00e9s de que te sientas c\u00f3modo con m\u00e1s movimientos de VIM, no usar\u00e1s hjkl tanto, pero ser\u00e1n muy \u00fatiles para movimientos de corta distancia y peque\u00f1as correcciones . j y k tambi\u00e9n son muy \u00fatiles dentro del explorador de archivos, la paleta de comandos y los paneles Ir a ya que te permiten moverte hacia arriba y hacia abajo y seleccionar diferentes elementos.","title":"Movimiento b\u00e1sico en VIM"},{"location":"03_primeros_pasos/#del-modo-normal-al-modo-de-insercion-y-viceversa","text":"La tecla i te permite ingresar al modo Insertar despu\u00e9s del cursor. Al comienzo de tu viaje a VIM, puedes ver i como una escotilla de escape hacia la cordura . Si alguna vez te sientes estresado y no est\u00e1s progresando, puedes i ngresar al modo Insertar , el mundo donde tu editor se comporta como lo hizo antes de instalar VIM. Cuando te sientas con energ\u00eda y entusiasmo, puedes escribir <ESC> , <CTRL>-C o <CTRL>-[ y se te devolver\u00e1 al modo normal en el que podr\u00e1s editar y navegar por tu c\u00f3digo. A medida que ganes confianza y aprendas m\u00e1s comandos, descubrir\u00e1s que pasar\u00e1s m\u00e1s y m\u00e1s tiempo en el modo Normal , y solo en el modo Insertar para ataques de edici\u00f3n de texto t\u00e1cticos y precisos. <ESC> o <CTRL>-[ pueden ser inc\u00f3modos de escribir, por lo que tiendo a recomendar que se use <CTRL>-C . Y dado que usar\u00e1s la tecla CTRL con bastante frecuencia (aunque no tan a menudo como con otros editores), te recomiendo que sigas este consejo:","title":"Del modo normal al modo de inserci\u00f3n y viceversa"},{"location":"03_primeros_pasos/#intercambiar-la-tecla-de-bloqueo-de-mayusculas-con-esc","text":"Algo muy \u00fatil cuando se usa VIM es reasignar la tecla de bloqueo de may\u00fasculas a escape . Hacer esto significa que ahora puedes alcanzar f\u00e1cilmente una tecla muy utilizada en programaci\u00f3n, como Esc , desde la comodidad de la fila de inicio del teclado. Solo necesitas estirar ese dedo me\u00f1ique hacia la izquierda medio cent\u00edmetro y ya est\u00e1. El bloqueo de may\u00fascula puede reasignarse a la tecla Esc igualmente, con lo que tampoco se pierde esta funcionalidad y se evita tener teclas duplicadas para la misma funci\u00f3n. El proceso es espec\u00edfico para cada sistema y habr\u00eda que investigar c\u00f3mo hacerlo en cada uno de ellos. Como ejemplo veamos el caso del conocido escritorio Plasma de KDE . Accedemos a la configuraci\u00f3n de nuestro teclado y seleccionamos la pesta\u00f1a Avanzada . Desplegamos Comportamiento de Bloq May\u00fas y seleccionamos el que m\u00e1s nos interese; en este caso Intercambiar Esc y Bloq May\u00fas si bien se podr\u00eda haber elegido Hacer de Bloq May\u00fas un Esc adicional \u00f3 Make unmodified Caps Lock an additional Esc, but Shift + Caps Lock behaves like regular Caps Lock . Hay quien prefiere utilizar Caps Lock como una alternativa m\u00e1s accesible para la tecla Ctrl dado que Vim usa la combinaci\u00f3n <Ctrl>-C como altenativa a Esc como ya hemos se\u00f1alado. Si bien podr\u00edamos pensar que ya est\u00e1 todo listo, no es el caso. De hecho podemos comprobar que nuestro cambio se ha hecho efectivo para todo el sistema y funciona all\u00e1 donde lo probemos; por ejemplo en una versi\u00f3n cl\u00e1sica de Vim . Pero no as\u00ed en Visual Studio Code que presenta la caracter\u00edstica de usar su propio dispatcher de teclas. Hemos de cambiar este comportamiento para que use el del propio sistema accediendo a Settings y cambiando la propiedad keyboard.dispatch estableci\u00e9ndola en keyCode como se muestra en la imagen siguiente:","title":"Intercambiar la tecla de bloqueo de may\u00fasculas con ESC"},{"location":"03_primeros_pasos/#una-nota-importante-para-usuarios-de-windows-y-linux","text":"Espera... \u00bf <CTRL>-C para volver al modo Normal ? \u00bfNo es eso lo que he estado usando toda la vida para copiar cosas? Instalar VSCodeVIM tiene un par de efectos secundarios. Una es que obtienes ese extra\u00f1o cursor cuadrado que acabamos de comentar, y la otra es que algunas teclas de uso com\u00fan se reasignan a su funci\u00f3n natural en la tierra de VIM. Por ejemplo: <CTRL>-C ya no copia, en su lugar te devuelve al modo Normal . El comando que usamos en VIM para copiar es mucho menos detallado: y (por yank , tirar). <CTRL>-V ya no pega y en su lugar te env\u00eda al modo de bloque visual . Nuevamente, el comando que usamos en VIM para pegar es menos detallado: solo una p (para paste pegar). <CTRL>-F ya no te permite buscar, en su lugar te permite desplazar tu pantalla una p\u00e1gina hacia adelante. Una vez m\u00e1s, el comando que usamos en VIM para la b\u00fasqueda est\u00e1 m\u00e1s cerca de tu alcance: /{t\u00e9rmino-a-buscar} . Dependiendo de lo aventurero que seas y tu tolerancia a las molestias, es posible que desees mantener sus teclas como est\u00e1n ahora en lugar de continuar con los cambios realizados por VIM. Si sientes que deseas deshabilitar estas reasignaciones por el momento, puedes usar estas dos configuraciones de VSCodeVIM: VIM.useCtrlKeys habilita y deshabilita la reasignaci\u00f3n de las teclas CTRL . Config\u00faralo en false y las teclas para copiar, pegar, buscar, etc. volver\u00e1n de nuevo a los valores por defecto de VSCode. Aj\u00fastalo a true y VIM se har\u00e1 cargo. VIM.handleKeys te brinda un control m\u00e1s granular sobre las asignaciones que puedes habilitar o deshabilitar. Es un diccionario de pares clave/valor, donde la clave es la combinaci\u00f3n de teclas que se desea habilitar/deshabilitar y el valor es un indicador booleano que representa si VIM est\u00e1 habilitado para esa combinaci\u00f3n de teclas o no. Por ejemplo, usar \"<C-d>\": true significa que <C-d> es manejado por VIM, mientras que al configurarlo false vuelve a la funcionalidad nativa de VSCode. Las listas completas de las claves afectadas por estas reasignaciones se pueden encontrar en el archivo package.json de la extensi\u00f3n VSCodeVIM en la secci\u00f3n de keybindings .","title":"Una nota importante para usuarios de windows y Linux"},{"location":"03_primeros_pasos/#resumen","text":"Cuando instales VSCodeVIM, tu editor de VSCode se convertir\u00e1 en un lugar un poco extra\u00f1o. VIM conf\u00eda en los modos para hacerlo m\u00e1s efectivo y el modo predeterminado en VIM es el modo Normal , un modo en el que no se escribe texto en la pantalla. El modo normal est\u00e1 optimizado para editar texto y navegar por su base de c\u00f3digo. A menudo pasamos m\u00e1s tiempo editando y explorando c\u00f3digo de lo que lo hacemos al insertarlo desde cero, por lo que es una decisi\u00f3n de dise\u00f1o ingeniosa. A\u00fan as\u00ed, puede parecer bastante desalentador al principio, por lo que es \u00fatil conocer algunas de las claves que puedes usar para obtener un nivel b\u00e1sico de autonom\u00eda: Usa hjkl para moverte. Usa i para volver al modo Insertar donde puedes actuar como si estuvieras en VSCode vainilla y escribir. Usa <ESC> , <CTRL>-C o <CTRL>-[ para volver al modo Normal . Con una mejor comprensi\u00f3n de la filosof\u00eda de VIM y estas asignaciones de teclas b\u00e1sicas en tu haber, ahora est\u00e1s listo para continuar desarrollando tus habilidades de VIM y m\u00e1s cerca de ser m\u00e1s incre\u00edble en la programaci\u00f3n. \u00a1Adelante!.","title":"RESUMEN"},{"location":"04_moviendote/","text":"Movi\u00e9ndote incre\u00edblemente r\u00e1pido con los movimientos CORE VIM Con movimiento hablamos de c\u00f3mo te desplazas a trav\u00e9s del texto en VIM . Son comandos que, cuando se escriben, mueven el cursor con gran velocidad y precisi\u00f3n. Hay muchos de ellos, y cada uno es m\u00e1s adecuado para diferentes tipos y longitudes de movimiento. Funcionan muy bien en conjunto con las funciones nativas Ir a de Visual Code Code como Ir a archivo e Ir a s\u00edmbolo . Aqu\u00ed encontrar\u00e1s una lista condensada de los m\u00e1s \u00fatiles, y cu\u00e1ndo y c\u00f3mo usarlos. Moverte horizontalmente palabra por palabra Los movimientos de palabras te permiten saltar de una palabra a otra en cualquier direcci\u00f3n (de izquierda a derecha o de derecha a izquierda). Como tal, te permiten moverte m\u00e1s r\u00e1pido que los movimientos horizontales b\u00e1sicos h y l . Puedes utilizar w (comando w ord) para saltar al comienzo de la siguiente palabra de este modo: Del mismo modo, puedes: Usar b ( b ack) para saltar al principio de una palabra hacia atr\u00e1s. Usar e ( e nd) para saltar al final de una palabra. Usar ge ( g o e nd) para saltar al final de una palabra hacia atr\u00e1s. Aprende los comandos con la ayuda de mnem\u00f3nicos VIM tiene una enorme cantidad de comandos. Con el tiempo, cuando se convierta en un usuario experimentado de VIM, los comandos se convertir\u00e1n en algo natural, reflexivo y autom\u00e1tico. Sin embargo, al principio, tendr\u00e1s que aprenderlos uno por uno. Una excelente manera de aprender los comandos de VIM es mediante el uso de mnem\u00f3nicos como asociar una letra a una palabra que sea m\u00e1s f\u00e1cil de recordar. Por ejemplo, puedes recordar que w permite moverse de una palabra a otra al asociarlo con una word , o que b permite mover una palabra hacia atr\u00e1s al asociarlo con back . Siguiendo esta t\u00e9cnica, descubrir\u00e1s que puedes aprender y recordar muchos comandos con poco esfuerzo. PALABRAS y palabras Por lo tanto w , b , e y ge te permiten moverte palabra por palabra en VIM. Pero, \u00bfqu\u00e9 es exactamente una palabra? Una palabra en VIM es: Una secuencia de letras, d\u00edgitos y n\u00fameros. Una secuencia de otros caracteres no en blanco. these are 4 words and these below too ,,, ..... ((((( ,.( Pero VIM tambi\u00e9n tiene el concepto de tipos especiales de palabras (con letras, cifras y n\u00fameros) que tambi\u00e9n incluyen caracteres especiales como . , ( , { , etc. Se llaman PALABRAS en la jerga de VIM: Las PALABRAS son particularmente \u00fatiles para nosotros los programadores porque el c\u00f3digo a menudo tiene muchas de ellas: this is a WORD: Iam_A_WORD(WORD) this function call sum(2,3) is also a WORD this array [1,2,3,4,5] is a WORD as well Si deseas moverte PALABRA por PALABRA puedes utilizar los equivalentes en may\u00fasculas de los movimientos descritos anteriormente ( W , B , E , gE ). En general, los movimientos de palabras permiten cambios m\u00e1s precisos, mientras que los movimientos de PALABRAS permiten movimientos m\u00e1s r\u00e1pidos : wwww ==> v v v v v word. are two words word. is one WORD WWW ==> ^ ^ ^ ^ Moverse a un car\u00e1cter espec\u00edfico El movimiento a caracteres con \"find\" te permite moverte con una alta precisi\u00f3n de forma horizontal y r\u00e1pidamente: Usa f{character} ( f ind) para pasar a la siguiente aparici\u00f3n de un car\u00e1cter en una l\u00ednea. Por ejemplo, f\" te env\u00eda a la pr\u00f3xima aparici\u00f3n de una comilla doble. Si tu objetivo est\u00e1 antes del cursor, puedes usar F{character} para encontrar la aparici\u00f3n previa de un car\u00e1cter. Podemos ver claramente c\u00f3mo f es m\u00e1s r\u00e1pido y preciso que usar movimientos de palabras lanzando uno contra el otro en un ejemplo: f( ==> v v const fireball = function(target){ wwww ==> ^ ^ ^ ^ ^ Adem\u00e1s de f VIM tambi\u00e9n ofrece el comando t (un t il): Utiliza t{character} para mover el cursor justo antes de la pr\u00f3xima aparici\u00f3n de un caracter (pensar en t{character} como forma de mover el cursor hasta (un t il) ese car\u00e1cter). De nuevo, se puede usar T{character} para hacer lo mismo t{character} pero hacia atr\u00e1s. Si la diferencia entre los comandos f y t a\u00fan no est\u00e1 del todo clara, aqu\u00ed hay un ejemplo que compara a ambos: t( ==> v v const fireball = function(target){ f( ==> ^ ^ t es realmente \u00fatil cuando combina movimientos con operadores para realizar cambios de texto como pronto descubrir\u00e1s (por ejemplo, se podr\u00eda eliminar todo hasta ( y cambiarlo por otra cosa). Despu\u00e9s de usar f{character} , puedes escribir ; para ir a la siguiente aparici\u00f3n del car\u00e1cter o , para ir a la anterior. Se pueden ver los comandos ; y , como para repetir la \u00faltima b\u00fasqueda de caracteres . Esto es bueno porque te evita escribir la misma b\u00fasqueda una y otra vez: fdfdfd ==> v v v v let damage = weapon.damage * d20(); let damage = weapon.damage * d20(); fd;; ==> v v v v Notas, melod\u00edas y acordes VIM es bastante especial. Si has utilizado otros editores, probablemente est\u00e9s acostumbrado a escribir acordes de teclas. Es decir, escribir una combinaci\u00f3n de teclas al mismo tiempo. Por ejemplo, CTRL-C copiar y CTRL-V pegar. Aunque VIM no es ajeno a los acordes, se basa a\u00fan m\u00e1s en las melod\u00edas de las teclas. Una melod\u00eda es una serie de notas que se tocan una tras otra. Si piensas en las teclas como notas, entonces las melod\u00edas de teclas son teclas que se presionan una tras otra en r\u00e1pida sucesi\u00f3n. Entonces, cuando lees que necesitas escribir f{character} para encontrar un car\u00e1cter en una l\u00ednea, significa que primero escribes f y luego escribes el car\u00e1cter {character} . Estas dos teclas, por lo tanto, se tocan como una melod\u00eda. Usar melod\u00edas de teclas es la forma m\u00e1s com\u00fan con la que interact\u00faas con VIM. Y, aunque no es familiar ni extra\u00f1o, es muy conveniente porque controlar el editor de repente parece que solo consiste en escribir texto. Tambi\u00e9n es maravilloso para la salud de tus mu\u00f1ecas porque ya no necesitas confiar en combinaciones de teclas complejas y antinaturales que tensan tus pobres articulaciones. Moverte horizontalmente a los extremos Para moverte horizontalmente a los extremos, usa: 0 : Se mueve al primer car\u00e1cter de una l\u00ednea ^ : Se mueve al primer car\u00e1cter no en blanco de una l\u00ednea $ : Se mueve al final de una l\u00ednea g_ : Se mueve al \u00faltimo car\u00e1cter no en blanco al final de una l\u00ednea Movi\u00e9ndote verticalmente A partir de k y j , pasamos a una forma m\u00e1s r\u00e1pida de maniobrar verticalmente con: } salta p\u00e1rrafos enteros hacia abajo { de manera similar pero hacia arriba CTRL-d te permite bajar media p\u00e1gina desplaz\u00e1ndose por la p\u00e1gina CTRL-u te permite subir media p\u00e1gina tambi\u00e9n desplaz\u00e1ndote Ninguno de estos est\u00e1n dentro de mis favoritos, pero por el momento lo estar\u00e1n. En el cap\u00edtulo de asignaciones personalizadas se aprender\u00e1 c\u00f3mo crear una combinaci\u00f3n de teclas personalizada para un mejor movimiento vertical de rango medio. Movimientos verticales de alta precisi\u00f3n con patr\u00f3n de b\u00fasqueda Para moverse verticalmente a\u00fan m\u00e1s r\u00e1pido cuando tiene un objetivo en mente, tu mejor opci\u00f3n es buscar ese objetivo con los comandos /{pattern} y ?{pattern} : Usa /{pattern} para buscar hacia adelante Usa ?{pattern} para buscar hacia atr\u00e1s Donde el fragmento {pattern} a menudo ser\u00e1 una cadena literal (el nombre de un m\u00e9todo, clase o variable) pero tambi\u00e9n puede ser una expresi\u00f3n regular. Si est\u00e1s cerca de tu computadora, intenta escribir un comando de b\u00fasqueda ahora mismo. Descubrir\u00e1s que, a medida que escribes un comando de b\u00fasqueda, se resalta cualquier fragmento de texto dentro de un archivo que coincida con tu patr\u00f3n. A medida que contin\u00faes escribiendo el patr\u00f3n, las \u00e1reas resaltadas se actualizar\u00e1n y reflejar\u00e1n las nuevas coincidencias. Cuando encuentres lo que est\u00e1s buscando, escribe < Enter > y tu cursor saltar\u00e1 a la primera coincidencia en el documento. All\u00ed puedes realizar alguna edici\u00f3n si quieres y luego usar n para saltar a la siguiente ocurrencia (o N a la anterior). Puedes pensar en n como en repetir una b\u00fasqueda . Habilitar la b\u00fasqueda resaltada La b\u00fasqueda resaltada no est\u00e1 habilitada de forma predeterminada en VSCodeVIM. Para remediar eso, ve a Preferencias > Configuraci\u00f3n y activa la opci\u00f3n VIM: Hlsearch (o, alternativamente, usa vim.hlsearch en la versi\u00f3n json de la configuraci\u00f3n). A VIM le encanta ahorrar tiempo: escriba / o ? en cualquier momento para ejecutar la \u00faltima b\u00fasqueda (hacia adelante o hacia atr\u00e1s). O usa * para buscar la palabra debajo del cursor ( # para hacer lo mismo pero hacia atr\u00e1s). Moverse m\u00e1s r\u00e1pido con cuentas Las cuentas son n\u00fameros que te permiten multiplicar el efecto de un comando . Puedes usarlos como prefijo de cualquier comando con un conteo como este: {count}{command} Por ejemplo: 2w nos permite mover el cursor 2 palabras hacia adelante. 5j cambia la posici\u00f3n del cursor a 5 l\u00edneas a continuaci\u00f3n. 3; te permite pasar a la siguiente tercera aparici\u00f3n de un car\u00e1cter (tras un f \u00f3 t previo) 2/baby te env\u00eda volando a la segunda aparici\u00f3n de baby . En general, se usa {count}{motion} para multiplicar {count} veces el movimiento. N\u00fameros de l\u00ednea relativos Una excelente manera de moverse verticalmente dentro de VIM es mediante el uso de conteos en combinaci\u00f3n con los movimientos j y k . Pero a veces puede ser dif\u00edcil saber cu\u00e1ntas l\u00edneas necesitas saltar para llegar a la posici\u00f3n deseada. Ah\u00ed es donde los n\u00fameros de l\u00ednea relativos pueden ser bastante \u00fatiles. Los n\u00fameros de l\u00ednea relativos muestran los n\u00fameros de l\u00ednea en relaci\u00f3n con tu l\u00ednea actual: si la l\u00ednea actual es donde descansa el cursor, la l\u00ednea de abajo tendr\u00eda la l\u00ednea n\u00famero 1, la siguiente l\u00ednea n\u00famero 2, y as\u00ed sucesivamente. Usando n\u00fameros de l\u00ednea relativos, es muy sencillo ver cu\u00e1ntas l\u00edneas necesitas saltar para llegar a donde quieres ir. Solo echa un vistazo al n\u00famero de l\u00ednea relativo y \u00fasalo como un recuento. Puedes habilitar los n\u00fameros de l\u00ednea relativos en tu configuraci\u00f3n de VSCode yendo a Preferencias > Configuraci\u00f3n , buscando la configuraci\u00f3n de line numbers y configur\u00e1ndola como relative . Movi\u00e9ndote sem\u00e1nticamente Adem\u00e1s de los movimientos anteriores, que realmente no tienen en cuenta el significado del c\u00f3digo, VIM ofrece enlaces adicionales que tienen en cuenta su sem\u00e1ntica: Usa gd para saltar a la definici\u00f3n de lo que est\u00e9 debajo del cursor. Usa gf para saltar a un archivo en una importaci\u00f3n. Algunos movimientos m\u00e1s ingeniosos Estos son m\u00e1s movimientos que pueden ser \u00fatiles de vez en cuando: Escribe gg para ir al principio del archivo. Usa {line}gg para ir a una l\u00ednea espec\u00edfica. Usa G para ir al final del archivo. Escribe % para saltar entre los pares de apertura y cierre de los s\u00edmbolos ({[]}) . Resumen Los movimientos son comandos que te permiten moverte en VIM con alta velocidad y precisi\u00f3n . Est\u00e1n compuestos por una o m\u00e1s teclas escritas como melod\u00edas . Te permiten realizar diferentes tipos de movimientos con diferentes longitudes y grados de precisi\u00f3n. Los m\u00e1s b\u00e1sicos hjkl son excelentes para peque\u00f1as correcciones. Luego tenemos movimientos de palabras y p\u00e1rrafos ( w , { ) que son buenos para navegar por el c\u00f3digo m\u00e1s r\u00e1pido. Despu\u00e9s de eso, tenemos movimientos de b\u00fasqueda de alta precisi\u00f3n ( f , / ) que nos permiten teletransportarnos r\u00e1pidamente a un car\u00e1cter o patr\u00f3n de b\u00fasqueda. Los movimientos de b\u00fasqueda de caracteres y b\u00fasqueda tienen repetidores ( n , ; ) que nos permiten repetir la \u00faltima b\u00fasqueda escribiendo solo un car\u00e1cter. Podemos usarlos para saltar de una coincidencia a otra en cualquier direcci\u00f3n y muy r\u00e1pidamente. El concepto de repetidores es un tema com\u00fan en VIM y aprender\u00e1s muchos de ellos en adelante. Entr\u00e9nate para confiar en los repetidores, y ser\u00e1s m\u00e1s efectivo . Puedes combinar conteos con movimientos para un mayor efecto . Nuestros cerebros son lentos para contar, por lo que debes limitar el uso de conteos solo a saltos cortos . Al usar conteos con movimientos verticales, es bueno habilitar n\u00fameros relativos porque te dan una referencia clara a tu objetivo. Considera habilitar n\u00fameros relativos si a\u00fan no lo has hecho . Ahora pasemos a otro bloque fundamental en VIM que te permitir\u00e1 editar texto como por arte de magia: Operadores .","title":"04 Movi\u00e9ndote"},{"location":"04_moviendote/#moviendote-increiblemente-rapido-con-los-movimientos-core-vim","text":"Con movimiento hablamos de c\u00f3mo te desplazas a trav\u00e9s del texto en VIM . Son comandos que, cuando se escriben, mueven el cursor con gran velocidad y precisi\u00f3n. Hay muchos de ellos, y cada uno es m\u00e1s adecuado para diferentes tipos y longitudes de movimiento. Funcionan muy bien en conjunto con las funciones nativas Ir a de Visual Code Code como Ir a archivo e Ir a s\u00edmbolo . Aqu\u00ed encontrar\u00e1s una lista condensada de los m\u00e1s \u00fatiles, y cu\u00e1ndo y c\u00f3mo usarlos.","title":"Movi\u00e9ndote incre\u00edblemente r\u00e1pido con los movimientos CORE VIM"},{"location":"04_moviendote/#moverte-horizontalmente-palabra-por-palabra","text":"Los movimientos de palabras te permiten saltar de una palabra a otra en cualquier direcci\u00f3n (de izquierda a derecha o de derecha a izquierda). Como tal, te permiten moverte m\u00e1s r\u00e1pido que los movimientos horizontales b\u00e1sicos h y l . Puedes utilizar w (comando w ord) para saltar al comienzo de la siguiente palabra de este modo: Del mismo modo, puedes: Usar b ( b ack) para saltar al principio de una palabra hacia atr\u00e1s. Usar e ( e nd) para saltar al final de una palabra. Usar ge ( g o e nd) para saltar al final de una palabra hacia atr\u00e1s.","title":"Moverte horizontalmente palabra por palabra"},{"location":"04_moviendote/#aprende-los-comandos-con-la-ayuda-de-mnemonicos","text":"VIM tiene una enorme cantidad de comandos. Con el tiempo, cuando se convierta en un usuario experimentado de VIM, los comandos se convertir\u00e1n en algo natural, reflexivo y autom\u00e1tico. Sin embargo, al principio, tendr\u00e1s que aprenderlos uno por uno. Una excelente manera de aprender los comandos de VIM es mediante el uso de mnem\u00f3nicos como asociar una letra a una palabra que sea m\u00e1s f\u00e1cil de recordar. Por ejemplo, puedes recordar que w permite moverse de una palabra a otra al asociarlo con una word , o que b permite mover una palabra hacia atr\u00e1s al asociarlo con back . Siguiendo esta t\u00e9cnica, descubrir\u00e1s que puedes aprender y recordar muchos comandos con poco esfuerzo.","title":"Aprende los comandos con la ayuda de mnem\u00f3nicos"},{"location":"04_moviendote/#palabras-y-palabras","text":"Por lo tanto w , b , e y ge te permiten moverte palabra por palabra en VIM. Pero, \u00bfqu\u00e9 es exactamente una palabra? Una palabra en VIM es: Una secuencia de letras, d\u00edgitos y n\u00fameros. Una secuencia de otros caracteres no en blanco. these are 4 words and these below too ,,, ..... ((((( ,.( Pero VIM tambi\u00e9n tiene el concepto de tipos especiales de palabras (con letras, cifras y n\u00fameros) que tambi\u00e9n incluyen caracteres especiales como . , ( , { , etc. Se llaman PALABRAS en la jerga de VIM: Las PALABRAS son particularmente \u00fatiles para nosotros los programadores porque el c\u00f3digo a menudo tiene muchas de ellas: this is a WORD: Iam_A_WORD(WORD) this function call sum(2,3) is also a WORD this array [1,2,3,4,5] is a WORD as well Si deseas moverte PALABRA por PALABRA puedes utilizar los equivalentes en may\u00fasculas de los movimientos descritos anteriormente ( W , B , E , gE ). En general, los movimientos de palabras permiten cambios m\u00e1s precisos, mientras que los movimientos de PALABRAS permiten movimientos m\u00e1s r\u00e1pidos : wwww ==> v v v v v word. are two words word. is one WORD WWW ==> ^ ^ ^ ^","title":"PALABRAS y palabras"},{"location":"04_moviendote/#moverse-a-un-caracter-especifico","text":"El movimiento a caracteres con \"find\" te permite moverte con una alta precisi\u00f3n de forma horizontal y r\u00e1pidamente: Usa f{character} ( f ind) para pasar a la siguiente aparici\u00f3n de un car\u00e1cter en una l\u00ednea. Por ejemplo, f\" te env\u00eda a la pr\u00f3xima aparici\u00f3n de una comilla doble. Si tu objetivo est\u00e1 antes del cursor, puedes usar F{character} para encontrar la aparici\u00f3n previa de un car\u00e1cter. Podemos ver claramente c\u00f3mo f es m\u00e1s r\u00e1pido y preciso que usar movimientos de palabras lanzando uno contra el otro en un ejemplo: f( ==> v v const fireball = function(target){ wwww ==> ^ ^ ^ ^ ^ Adem\u00e1s de f VIM tambi\u00e9n ofrece el comando t (un t il): Utiliza t{character} para mover el cursor justo antes de la pr\u00f3xima aparici\u00f3n de un caracter (pensar en t{character} como forma de mover el cursor hasta (un t il) ese car\u00e1cter). De nuevo, se puede usar T{character} para hacer lo mismo t{character} pero hacia atr\u00e1s. Si la diferencia entre los comandos f y t a\u00fan no est\u00e1 del todo clara, aqu\u00ed hay un ejemplo que compara a ambos: t( ==> v v const fireball = function(target){ f( ==> ^ ^ t es realmente \u00fatil cuando combina movimientos con operadores para realizar cambios de texto como pronto descubrir\u00e1s (por ejemplo, se podr\u00eda eliminar todo hasta ( y cambiarlo por otra cosa). Despu\u00e9s de usar f{character} , puedes escribir ; para ir a la siguiente aparici\u00f3n del car\u00e1cter o , para ir a la anterior. Se pueden ver los comandos ; y , como para repetir la \u00faltima b\u00fasqueda de caracteres . Esto es bueno porque te evita escribir la misma b\u00fasqueda una y otra vez: fdfdfd ==> v v v v let damage = weapon.damage * d20(); let damage = weapon.damage * d20(); fd;; ==> v v v v Notas, melod\u00edas y acordes VIM es bastante especial. Si has utilizado otros editores, probablemente est\u00e9s acostumbrado a escribir acordes de teclas. Es decir, escribir una combinaci\u00f3n de teclas al mismo tiempo. Por ejemplo, CTRL-C copiar y CTRL-V pegar. Aunque VIM no es ajeno a los acordes, se basa a\u00fan m\u00e1s en las melod\u00edas de las teclas. Una melod\u00eda es una serie de notas que se tocan una tras otra. Si piensas en las teclas como notas, entonces las melod\u00edas de teclas son teclas que se presionan una tras otra en r\u00e1pida sucesi\u00f3n. Entonces, cuando lees que necesitas escribir f{character} para encontrar un car\u00e1cter en una l\u00ednea, significa que primero escribes f y luego escribes el car\u00e1cter {character} . Estas dos teclas, por lo tanto, se tocan como una melod\u00eda. Usar melod\u00edas de teclas es la forma m\u00e1s com\u00fan con la que interact\u00faas con VIM. Y, aunque no es familiar ni extra\u00f1o, es muy conveniente porque controlar el editor de repente parece que solo consiste en escribir texto. Tambi\u00e9n es maravilloso para la salud de tus mu\u00f1ecas porque ya no necesitas confiar en combinaciones de teclas complejas y antinaturales que tensan tus pobres articulaciones.","title":"Moverse a un car\u00e1cter espec\u00edfico"},{"location":"04_moviendote/#moverte-horizontalmente-a-los-extremos","text":"Para moverte horizontalmente a los extremos, usa: 0 : Se mueve al primer car\u00e1cter de una l\u00ednea ^ : Se mueve al primer car\u00e1cter no en blanco de una l\u00ednea $ : Se mueve al final de una l\u00ednea g_ : Se mueve al \u00faltimo car\u00e1cter no en blanco al final de una l\u00ednea","title":"Moverte horizontalmente a los extremos"},{"location":"04_moviendote/#moviendote-verticalmente","text":"A partir de k y j , pasamos a una forma m\u00e1s r\u00e1pida de maniobrar verticalmente con: } salta p\u00e1rrafos enteros hacia abajo { de manera similar pero hacia arriba CTRL-d te permite bajar media p\u00e1gina desplaz\u00e1ndose por la p\u00e1gina CTRL-u te permite subir media p\u00e1gina tambi\u00e9n desplaz\u00e1ndote Ninguno de estos est\u00e1n dentro de mis favoritos, pero por el momento lo estar\u00e1n. En el cap\u00edtulo de asignaciones personalizadas se aprender\u00e1 c\u00f3mo crear una combinaci\u00f3n de teclas personalizada para un mejor movimiento vertical de rango medio.","title":"Movi\u00e9ndote verticalmente"},{"location":"04_moviendote/#movimientos-verticales-de-alta-precision-con-patron-de-busqueda","text":"Para moverse verticalmente a\u00fan m\u00e1s r\u00e1pido cuando tiene un objetivo en mente, tu mejor opci\u00f3n es buscar ese objetivo con los comandos /{pattern} y ?{pattern} : Usa /{pattern} para buscar hacia adelante Usa ?{pattern} para buscar hacia atr\u00e1s Donde el fragmento {pattern} a menudo ser\u00e1 una cadena literal (el nombre de un m\u00e9todo, clase o variable) pero tambi\u00e9n puede ser una expresi\u00f3n regular. Si est\u00e1s cerca de tu computadora, intenta escribir un comando de b\u00fasqueda ahora mismo. Descubrir\u00e1s que, a medida que escribes un comando de b\u00fasqueda, se resalta cualquier fragmento de texto dentro de un archivo que coincida con tu patr\u00f3n. A medida que contin\u00faes escribiendo el patr\u00f3n, las \u00e1reas resaltadas se actualizar\u00e1n y reflejar\u00e1n las nuevas coincidencias. Cuando encuentres lo que est\u00e1s buscando, escribe < Enter > y tu cursor saltar\u00e1 a la primera coincidencia en el documento. All\u00ed puedes realizar alguna edici\u00f3n si quieres y luego usar n para saltar a la siguiente ocurrencia (o N a la anterior). Puedes pensar en n como en repetir una b\u00fasqueda . Habilitar la b\u00fasqueda resaltada La b\u00fasqueda resaltada no est\u00e1 habilitada de forma predeterminada en VSCodeVIM. Para remediar eso, ve a Preferencias > Configuraci\u00f3n y activa la opci\u00f3n VIM: Hlsearch (o, alternativamente, usa vim.hlsearch en la versi\u00f3n json de la configuraci\u00f3n). A VIM le encanta ahorrar tiempo: escriba / o ? en cualquier momento para ejecutar la \u00faltima b\u00fasqueda (hacia adelante o hacia atr\u00e1s). O usa * para buscar la palabra debajo del cursor ( # para hacer lo mismo pero hacia atr\u00e1s).","title":"Movimientos verticales de alta precisi\u00f3n con patr\u00f3n de b\u00fasqueda"},{"location":"04_moviendote/#moverse-mas-rapido-con-cuentas","text":"Las cuentas son n\u00fameros que te permiten multiplicar el efecto de un comando . Puedes usarlos como prefijo de cualquier comando con un conteo como este: {count}{command} Por ejemplo: 2w nos permite mover el cursor 2 palabras hacia adelante. 5j cambia la posici\u00f3n del cursor a 5 l\u00edneas a continuaci\u00f3n. 3; te permite pasar a la siguiente tercera aparici\u00f3n de un car\u00e1cter (tras un f \u00f3 t previo) 2/baby te env\u00eda volando a la segunda aparici\u00f3n de baby . En general, se usa {count}{motion} para multiplicar {count} veces el movimiento.","title":"Moverse m\u00e1s r\u00e1pido con cuentas"},{"location":"04_moviendote/#numeros-de-linea-relativos","text":"Una excelente manera de moverse verticalmente dentro de VIM es mediante el uso de conteos en combinaci\u00f3n con los movimientos j y k . Pero a veces puede ser dif\u00edcil saber cu\u00e1ntas l\u00edneas necesitas saltar para llegar a la posici\u00f3n deseada. Ah\u00ed es donde los n\u00fameros de l\u00ednea relativos pueden ser bastante \u00fatiles. Los n\u00fameros de l\u00ednea relativos muestran los n\u00fameros de l\u00ednea en relaci\u00f3n con tu l\u00ednea actual: si la l\u00ednea actual es donde descansa el cursor, la l\u00ednea de abajo tendr\u00eda la l\u00ednea n\u00famero 1, la siguiente l\u00ednea n\u00famero 2, y as\u00ed sucesivamente. Usando n\u00fameros de l\u00ednea relativos, es muy sencillo ver cu\u00e1ntas l\u00edneas necesitas saltar para llegar a donde quieres ir. Solo echa un vistazo al n\u00famero de l\u00ednea relativo y \u00fasalo como un recuento. Puedes habilitar los n\u00fameros de l\u00ednea relativos en tu configuraci\u00f3n de VSCode yendo a Preferencias > Configuraci\u00f3n , buscando la configuraci\u00f3n de line numbers y configur\u00e1ndola como relative .","title":"N\u00fameros de l\u00ednea relativos"},{"location":"04_moviendote/#moviendote-semanticamente","text":"Adem\u00e1s de los movimientos anteriores, que realmente no tienen en cuenta el significado del c\u00f3digo, VIM ofrece enlaces adicionales que tienen en cuenta su sem\u00e1ntica: Usa gd para saltar a la definici\u00f3n de lo que est\u00e9 debajo del cursor. Usa gf para saltar a un archivo en una importaci\u00f3n.","title":"Movi\u00e9ndote sem\u00e1nticamente"},{"location":"04_moviendote/#algunos-movimientos-mas-ingeniosos","text":"Estos son m\u00e1s movimientos que pueden ser \u00fatiles de vez en cuando: Escribe gg para ir al principio del archivo. Usa {line}gg para ir a una l\u00ednea espec\u00edfica. Usa G para ir al final del archivo. Escribe % para saltar entre los pares de apertura y cierre de los s\u00edmbolos ({[]}) .","title":"Algunos movimientos m\u00e1s ingeniosos"},{"location":"04_moviendote/#resumen","text":"Los movimientos son comandos que te permiten moverte en VIM con alta velocidad y precisi\u00f3n . Est\u00e1n compuestos por una o m\u00e1s teclas escritas como melod\u00edas . Te permiten realizar diferentes tipos de movimientos con diferentes longitudes y grados de precisi\u00f3n. Los m\u00e1s b\u00e1sicos hjkl son excelentes para peque\u00f1as correcciones. Luego tenemos movimientos de palabras y p\u00e1rrafos ( w , { ) que son buenos para navegar por el c\u00f3digo m\u00e1s r\u00e1pido. Despu\u00e9s de eso, tenemos movimientos de b\u00fasqueda de alta precisi\u00f3n ( f , / ) que nos permiten teletransportarnos r\u00e1pidamente a un car\u00e1cter o patr\u00f3n de b\u00fasqueda. Los movimientos de b\u00fasqueda de caracteres y b\u00fasqueda tienen repetidores ( n , ; ) que nos permiten repetir la \u00faltima b\u00fasqueda escribiendo solo un car\u00e1cter. Podemos usarlos para saltar de una coincidencia a otra en cualquier direcci\u00f3n y muy r\u00e1pidamente. El concepto de repetidores es un tema com\u00fan en VIM y aprender\u00e1s muchos de ellos en adelante. Entr\u00e9nate para confiar en los repetidores, y ser\u00e1s m\u00e1s efectivo . Puedes combinar conteos con movimientos para un mayor efecto . Nuestros cerebros son lentos para contar, por lo que debes limitar el uso de conteos solo a saltos cortos . Al usar conteos con movimientos verticales, es bueno habilitar n\u00fameros relativos porque te dan una referencia clara a tu objetivo. Considera habilitar n\u00fameros relativos si a\u00fan no lo has hecho . Ahora pasemos a otro bloque fundamental en VIM que te permitir\u00e1 editar texto como por arte de magia: Operadores .","title":"Resumen"},{"location":"05_operadores/","text":"Edici\u00f3n m\u00e1gica con operadores de VIM El movimiento no es solo para moverse. Se puede usar en combinaci\u00f3n con una serie de comandos llamados operadores para editar tu c\u00f3digo a la velocidad del rayo. Puedes usar operadores y movimientos juntos siguiendo cualquiera de estos patrones: {operador}{cuenta}{movimiento} {cuenta}{operador}{movimiento} El operador determina qu\u00e9 acci\u00f3n se desea realizar: eliminar, cambiar, tirar ( yank ), formatear, etc. La cuenta te permite multiplicar el efecto de un operador mediante la realizaci\u00f3n de una acci\u00f3n cuenta n\u00famero de veces. El movimiento representa el fragmento de texto al que aplicar la acci\u00f3n definida por el operador. Por ejemplo, la combinaci\u00f3n d2w te permite eliminar dos palabras . d corresponde al operador de eliminaci\u00f3n . Como d es un operador, puede seguir la f\u00f3rmula {operator}{count}{motion} y combinarla con todos los movimientos que has aprendido hasta ahora: Usa d5j para eliminar 5 l\u00edneas hacia abajo Escribe df' para eliminar todo en la l\u00ednea actual del cursor hasta la primera aparici\u00f3n del car\u00e1cter ' (incluido el propio car\u00e1cter) O escribe dt' para hacer como el ejemplo anterior pero excluyendo el car\u00e1cter (hasta o justo antes del car\u00e1cter ' ) Usa d/hello para eliminar todo hasta la primera aparici\u00f3n de hello Escribe ggdG para borrar un documento completo Operadores \u00fatiles Adem\u00e1s de d , hay un pu\u00f1ado m\u00e1s de operadores \u00fatiles: c ( c hange): Change elimina un trozo de texto y luego establece el modo de inserci\u00f3n para que se pueda seguir escribiendo, cambiando el texto original por otra cosa. El operador de cambio es como los comandos d e i combinados en uno. Esta dualidad lo convierte en un operador m\u00e1s \u00fatil. y ( y ank): copiar en la jerga de VIM p ( p ut/**puaste): pegar en la jerga de VIM g~ (may\u00fascula): cambia las letras de min\u00fasculas a may\u00fasculas y viceversa. Alternativamente, usa gu para convertir algo en min\u00fasculas y gU para convertir algo en may\u00fasculas > (desplazamiento a la derecha): agrega sangr\u00eda < (desplazamiento a la izquierda): elimina la sangr\u00eda = (c\u00f3digo de formato): c\u00f3digo de formatos Puedes usar estos operadores de la misma manera que usaste delete para: c/hello cambia todo hasta la primera aparici\u00f3n de hello . ggyG copia un documento completo gUw capitaliza una palabra Sintaxis abreviada de operador Todos estos operadores proporcionan una sintaxis abreviada adicional destinada a ahorrarte mecanograf\u00eda y aumentar tu velocidad con tareas de edici\u00f3n comunes: Duplica un operador para que funcione en una l\u00ednea completa : dd elimina una l\u00ednea completa, cc cambia una l\u00ednea completa, etc. Capitaliza un operador para que realice una versi\u00f3n m\u00e1s fuerte (o alternativa) de su comportamiento predeterminado : D elimina del cursor al final de la l\u00ednea, C cambia al final de una l\u00ednea, Y como yy copia una l\u00ednea completa, P pega algo antes del cursor, etc. \u00bfNotaste c\u00f3mo las teclas de comando tienen mucho sentido? Los operadores, movimientos y otros comandos en VIM son generalmente f\u00e1ciles de aprender porque tienen sentido y son f\u00e1ciles de adivinar. \u00bfQuieres cambiar algo? Es posible que desees utilizar el c (operador c ambiar). \u00bfQuieres moverte palabra por palabra? Prueba w ( w ord). \u00bfQuieres borrar algo? Prueba el operador d ( d elete) y as\u00ed sucesivamente. Los operadores realmente brillan cuando los combinamos con una clase especial de movimientos llamados objetos de texto . Tomando la edici\u00f3n de una muesca con objetos de texto Los objetos de texto son fragmentos de texto estructurados o, si lo deseas, las entidades de un modelo de dominio de documentos. \u00bfDe qu\u00e9 est\u00e1 compuesto un documento? Palabras, oraciones, texto citado, p\u00e1rrafos, bloques, etiquetas (HTML), etc. Estos son objetos de texto. La forma de especificar un objeto de texto dentro de un comando es combinando la letra a ( un objeto de texto m\u00e1s espacios en blanco) o i (objeto interno sin espacios en blanco) con un car\u00e1cter que representa un objeto de texto en s\u00ed: {operator}{a|i}{text-object} Los objetos de texto incorporados son: w para w ord s para s entence ' , \" , ``` para las cotizaciones p para p aragraph b (o ( , ) ) para el bloque rodeado por () , B (o { , } ) para el bloque rodeado por {} < , > por un bloque rodeado de <> [ , ] por un bloque rodeado de [] t para etiqueta. Entonces, para eliminar diferentes fragmentos de texto, puedes usar cualquiera de los siguientes comandos: daw a d elete un w ord (m\u00e1s espacios en blanco finales) ciw a c hange i nner w ord das a d elete un s entence ( dis para eliminar frase interno) da\" a algo de eliminaci\u00f3n entre comillas dobles incluyendo las cotizaciones a s\u00ed mismos ( di\" elimina s\u00f3lo el contenido i Nside las cotizaciones de repuestos y las comillas) ci\" cambiar algo entre comillas dobles dap para eliminar un p\u00e1rrafo dab da( o da) para eliminar un bloque rodeado de ( daB da{ o da} para eliminar un bloque rodeado de { dat eliminar una etiqueta HTML cit para cambiar el contenido de una etiqueta HTML Combinar objetos de texto con operadores es extremadamente poderoso y se encontrar\u00e1 confiando en ellos con mucha frecuencia. Cosas como cit , ci\" y cib son simplemente geniales. Digamos que queremos cambiar el contenido de esta cadena a continuaci\u00f3n por otra cosa: const salute = 'I salute you oh Mighty Warrior' Escribes ci'Hi! y se convierte en: const salute = 'Hi!' As\u00ed. No necesitas agarrar el rat\u00f3n, seleccionar el texto y luego escribir otra cosa. Escribe tres letras y \u00a1Boom! Ya terminaste. \u00bfNotaste c\u00f3mo se colocan la mayor\u00eda de las teclas vim cerca de tus dedos? El hecho de que VIM tenga modos permite reutilizar las teclas cerca de la fila de inicio en cada modo separado. Esta decisi\u00f3n de dise\u00f1o minimiza la necesidad de combinaciones de teclas lentas y retorcidas, y aumenta su velocidad y la longevidad de sus dedos y mu\u00f1ecas. \u00a1Esto es asombroso! Repetir el \u00faltimo cambio con el operador punto VIM tiene otro truco en la trastienda para ti destinado a guardar m\u00e1s pulsaciones de teclas: el comando m\u00e1gico . (punto). El comando . te permite repetir el \u00faltimo cambio que realizaste . Imagina que ejecutas dd para eliminar una l\u00ednea de c\u00f3digo. Y ahora digamos que te has calentado y quieres eliminar a\u00fan m\u00e1s c\u00f3digo. Eliminar el c\u00f3digo es bueno, cuanto menos c\u00f3digo tengas, menos c\u00f3digo necesitas mantener. As\u00ed que, eliminemos otra l\u00ednea de c\u00f3digo. \u00bfC\u00f3mo har\u00edas eso? Podr\u00edas volver a escribir dd pero, a\u00fan mejor, podr\u00edas usar el comando . que es solo una pulsaci\u00f3n de tecla. OK. Guarda una pulsaci\u00f3n de tecla. Y qu\u00e9. (Mucho p\u00fablico veo aqu\u00ed). Bueno, puedes usar el comando . para repetir cualquier tipo de cambio , no solo un solo comando abreviado como dd . Por ejemplo, podr\u00eda cambiar una palabra por Awesome as\u00ed cawAwesome , y luego repetir todo el comando con todas esas pulsaciones de teclas simplemente escribiendo un solo punto. \u00a1Piensa en las posibilidades! El . comando se vuelve a\u00fan m\u00e1s \u00fatil si tienes la costumbre de usar objetos de texto. Los objetos de texto son m\u00e1s confiables que otros movimientos porque no importa tanto d\u00f3nde est\u00e1 ubicado el cursor. Por lo tanto, los comandos con objetos de texto son mucho m\u00e1s repetibles y, por lo tanto, funcionan maravillosamente en conjunto con el comando . . El comando . funciona muy bien en combinaci\u00f3n con los comandos de b\u00fasqueda de repetici\u00f3n ( ; , , , n o N ). Imagina que deseas eliminar todas las apariciones de cucumber . Un posible enfoque ser\u00eda buscar el pepino /cucumber , eliminarlo con daw y, a partir de ese momento, usar n para ir a la siguiente y . para eliminarlo. \u00a1Dos pulsaciones de teclas! De nuevo piensa en las posibilidades. M\u00e1s comandos de edici\u00f3n de texto abreviado Adem\u00e1s de los operadores que aprendiste en este cap\u00edtulo, VIM ofrece una serie de atajos para operar con caracteres individuales que pueden ser \u00fatiles en ocasiones. Son: x es equivalente dl y elimina el car\u00e1cter debajo del cursor X es equivalente dh y elimina el car\u00e1cter antes del cursor s es equivalente a ch , elimina el car\u00e1cter debajo del cursor y lo pone en modo Insertar ~ para cambiar a may\u00fasculas/min\u00fasculas un car\u00e1cter Como de costumbre, todo el soporte anterior cuenta para operar en varios caracteres a la vez. Deshacer y rehacer Tarde o temprano llegar\u00e1 un momento en que cometer\u00e1s un error. \u00a1Adm\u00edtelo! No eres perfecto. Nadie lo es. Y eso est\u00e1 bien. Sin embargo, no debes preocuparte, porque VIM te respalda: Escribe u y deshar\u00e1s tu \u00faltimo cambio, Escribe CTRL-R y lo rehar\u00e1s, Pheeewww ... Resumen Los movimientos no son solo para moverse. Utilizados en combinaci\u00f3n con operadores, te permiten realizar operaciones en texto con facilidad y una velocidad sorprendente . Aplica un operador en un movimiento utilizando la melod\u00eda clave {operator}{motion} . Algunos de los operadores m\u00e1s \u00fatiles y comunes son: d para d elete, c para c hange, y para y ank (copiar) y p para p ut (pegar). Como puedes apreciar de estos operadores y los movimientos que has aprendido hasta ahora, los comandos de VIM son generalmente f\u00e1ciles de aprender porque tienen sentido y son f\u00e1ciles de adivinar. Cuando se duplica un operador, se le hace operar sobre una l\u00ednea . Por ejemplo, puedes usar dd para eliminar una l\u00ednea completa. De manera similar, cuando se usa un comando en may\u00fasculas, se ejecuta una versi\u00f3n m\u00e1s fuerte (o alternativa) del comando original . Por ejemplo, D elimina del cursor al final de una l\u00ednea. Esto es realmente \u00fatil y pueden ahorrarte mucho tiempo. Aprende a usarlos en lugar de sus alternativas m\u00e1s verbales. Las cuentas tambi\u00e9n funcionan con operadores . Se puede multiplicar el efecto de un movimiento combinado de operaci\u00f3n, utilizando una cuenta de la siguiente manera: {operator}{count}{motion} . Los objetos de texto tienen movimientos especiales que describen las partes de un documento: palabras, oraciones, p\u00e1rrafos y dem\u00e1s . Son incre\u00edblemente \u00fatiles en combinaci\u00f3n con los operadores de VIM. Usando operadores con objetos de texto se puede ser muy preciso y ordenarle a VIM que elimine una palabra o cambie el interior de una cadena o bloque de c\u00f3digo . Los objetos de texto ofrecen dos variantes: a (piensa en a como a ll) e i (piensa en i nner) que te permite operar en un objeto de texto m\u00e1s el espacio en blanco circundante o solo en las partes internas de un objeto de texto, respectivamente. Por ejemplo, el uso da\" elimina una cita completa que incluye espacios en blanco al final, usando di\" solo elimina lo que est\u00e9 rodeado de comillas. El comando punto te . permite repetir el \u00faltimo cambio y, como tal, es uno de los comandos repetidores m\u00e1s \u00fatiles. Las operaciones en objetos de texto son excelentes candidatos para el operador de punto porque son m\u00e1s repetibles . Una excelente manera de aprovechar el comando punto es usarlo en combinaci\u00f3n con b\u00fasquedas . Cuando lo hagas, puedes aplicar cambios de b\u00fasquedas sucesivas con solo dos pulsaciones de teclas: n o ; para encontrar la siguiente coincidencia y . repetir el \u00faltimo cambio. A veces cometer\u00e1s un error. Cuando eso sucede, puedes deshacer el \u00faltimo cambio con el comando u . Si cambias de opini\u00f3n o deshaces demasiado, escribe CTRL-R para r edo.","title":"05 Operadores"},{"location":"05_operadores/#edicion-magica-con-operadores-de-vim","text":"El movimiento no es solo para moverse. Se puede usar en combinaci\u00f3n con una serie de comandos llamados operadores para editar tu c\u00f3digo a la velocidad del rayo. Puedes usar operadores y movimientos juntos siguiendo cualquiera de estos patrones: {operador}{cuenta}{movimiento} {cuenta}{operador}{movimiento} El operador determina qu\u00e9 acci\u00f3n se desea realizar: eliminar, cambiar, tirar ( yank ), formatear, etc. La cuenta te permite multiplicar el efecto de un operador mediante la realizaci\u00f3n de una acci\u00f3n cuenta n\u00famero de veces. El movimiento representa el fragmento de texto al que aplicar la acci\u00f3n definida por el operador. Por ejemplo, la combinaci\u00f3n d2w te permite eliminar dos palabras . d corresponde al operador de eliminaci\u00f3n . Como d es un operador, puede seguir la f\u00f3rmula {operator}{count}{motion} y combinarla con todos los movimientos que has aprendido hasta ahora: Usa d5j para eliminar 5 l\u00edneas hacia abajo Escribe df' para eliminar todo en la l\u00ednea actual del cursor hasta la primera aparici\u00f3n del car\u00e1cter ' (incluido el propio car\u00e1cter) O escribe dt' para hacer como el ejemplo anterior pero excluyendo el car\u00e1cter (hasta o justo antes del car\u00e1cter ' ) Usa d/hello para eliminar todo hasta la primera aparici\u00f3n de hello Escribe ggdG para borrar un documento completo","title":"Edici\u00f3n m\u00e1gica con operadores de VIM"},{"location":"05_operadores/#operadores-utiles","text":"Adem\u00e1s de d , hay un pu\u00f1ado m\u00e1s de operadores \u00fatiles: c ( c hange): Change elimina un trozo de texto y luego establece el modo de inserci\u00f3n para que se pueda seguir escribiendo, cambiando el texto original por otra cosa. El operador de cambio es como los comandos d e i combinados en uno. Esta dualidad lo convierte en un operador m\u00e1s \u00fatil. y ( y ank): copiar en la jerga de VIM p ( p ut/**puaste): pegar en la jerga de VIM g~ (may\u00fascula): cambia las letras de min\u00fasculas a may\u00fasculas y viceversa. Alternativamente, usa gu para convertir algo en min\u00fasculas y gU para convertir algo en may\u00fasculas > (desplazamiento a la derecha): agrega sangr\u00eda < (desplazamiento a la izquierda): elimina la sangr\u00eda = (c\u00f3digo de formato): c\u00f3digo de formatos Puedes usar estos operadores de la misma manera que usaste delete para: c/hello cambia todo hasta la primera aparici\u00f3n de hello . ggyG copia un documento completo gUw capitaliza una palabra","title":"Operadores \u00fatiles"},{"location":"05_operadores/#sintaxis-abreviada-de-operador","text":"Todos estos operadores proporcionan una sintaxis abreviada adicional destinada a ahorrarte mecanograf\u00eda y aumentar tu velocidad con tareas de edici\u00f3n comunes: Duplica un operador para que funcione en una l\u00ednea completa : dd elimina una l\u00ednea completa, cc cambia una l\u00ednea completa, etc. Capitaliza un operador para que realice una versi\u00f3n m\u00e1s fuerte (o alternativa) de su comportamiento predeterminado : D elimina del cursor al final de la l\u00ednea, C cambia al final de una l\u00ednea, Y como yy copia una l\u00ednea completa, P pega algo antes del cursor, etc. \u00bfNotaste c\u00f3mo las teclas de comando tienen mucho sentido? Los operadores, movimientos y otros comandos en VIM son generalmente f\u00e1ciles de aprender porque tienen sentido y son f\u00e1ciles de adivinar. \u00bfQuieres cambiar algo? Es posible que desees utilizar el c (operador c ambiar). \u00bfQuieres moverte palabra por palabra? Prueba w ( w ord). \u00bfQuieres borrar algo? Prueba el operador d ( d elete) y as\u00ed sucesivamente. Los operadores realmente brillan cuando los combinamos con una clase especial de movimientos llamados objetos de texto .","title":"Sintaxis abreviada de operador"},{"location":"05_operadores/#tomando-la-edicion-de-una-muesca-con-objetos-de-texto","text":"Los objetos de texto son fragmentos de texto estructurados o, si lo deseas, las entidades de un modelo de dominio de documentos. \u00bfDe qu\u00e9 est\u00e1 compuesto un documento? Palabras, oraciones, texto citado, p\u00e1rrafos, bloques, etiquetas (HTML), etc. Estos son objetos de texto. La forma de especificar un objeto de texto dentro de un comando es combinando la letra a ( un objeto de texto m\u00e1s espacios en blanco) o i (objeto interno sin espacios en blanco) con un car\u00e1cter que representa un objeto de texto en s\u00ed: {operator}{a|i}{text-object} Los objetos de texto incorporados son: w para w ord s para s entence ' , \" , ``` para las cotizaciones p para p aragraph b (o ( , ) ) para el bloque rodeado por () , B (o { , } ) para el bloque rodeado por {} < , > por un bloque rodeado de <> [ , ] por un bloque rodeado de [] t para etiqueta. Entonces, para eliminar diferentes fragmentos de texto, puedes usar cualquiera de los siguientes comandos: daw a d elete un w ord (m\u00e1s espacios en blanco finales) ciw a c hange i nner w ord das a d elete un s entence ( dis para eliminar frase interno) da\" a algo de eliminaci\u00f3n entre comillas dobles incluyendo las cotizaciones a s\u00ed mismos ( di\" elimina s\u00f3lo el contenido i Nside las cotizaciones de repuestos y las comillas) ci\" cambiar algo entre comillas dobles dap para eliminar un p\u00e1rrafo dab da( o da) para eliminar un bloque rodeado de ( daB da{ o da} para eliminar un bloque rodeado de { dat eliminar una etiqueta HTML cit para cambiar el contenido de una etiqueta HTML Combinar objetos de texto con operadores es extremadamente poderoso y se encontrar\u00e1 confiando en ellos con mucha frecuencia. Cosas como cit , ci\" y cib son simplemente geniales. Digamos que queremos cambiar el contenido de esta cadena a continuaci\u00f3n por otra cosa: const salute = 'I salute you oh Mighty Warrior' Escribes ci'Hi! y se convierte en: const salute = 'Hi!' As\u00ed. No necesitas agarrar el rat\u00f3n, seleccionar el texto y luego escribir otra cosa. Escribe tres letras y \u00a1Boom! Ya terminaste. \u00bfNotaste c\u00f3mo se colocan la mayor\u00eda de las teclas vim cerca de tus dedos? El hecho de que VIM tenga modos permite reutilizar las teclas cerca de la fila de inicio en cada modo separado. Esta decisi\u00f3n de dise\u00f1o minimiza la necesidad de combinaciones de teclas lentas y retorcidas, y aumenta su velocidad y la longevidad de sus dedos y mu\u00f1ecas. \u00a1Esto es asombroso!","title":"Tomando la edici\u00f3n de una muesca con objetos de texto"},{"location":"05_operadores/#repetir-el-ultimo-cambio-con-el-operador-punto","text":"VIM tiene otro truco en la trastienda para ti destinado a guardar m\u00e1s pulsaciones de teclas: el comando m\u00e1gico . (punto). El comando . te permite repetir el \u00faltimo cambio que realizaste . Imagina que ejecutas dd para eliminar una l\u00ednea de c\u00f3digo. Y ahora digamos que te has calentado y quieres eliminar a\u00fan m\u00e1s c\u00f3digo. Eliminar el c\u00f3digo es bueno, cuanto menos c\u00f3digo tengas, menos c\u00f3digo necesitas mantener. As\u00ed que, eliminemos otra l\u00ednea de c\u00f3digo. \u00bfC\u00f3mo har\u00edas eso? Podr\u00edas volver a escribir dd pero, a\u00fan mejor, podr\u00edas usar el comando . que es solo una pulsaci\u00f3n de tecla. OK. Guarda una pulsaci\u00f3n de tecla. Y qu\u00e9. (Mucho p\u00fablico veo aqu\u00ed). Bueno, puedes usar el comando . para repetir cualquier tipo de cambio , no solo un solo comando abreviado como dd . Por ejemplo, podr\u00eda cambiar una palabra por Awesome as\u00ed cawAwesome , y luego repetir todo el comando con todas esas pulsaciones de teclas simplemente escribiendo un solo punto. \u00a1Piensa en las posibilidades! El . comando se vuelve a\u00fan m\u00e1s \u00fatil si tienes la costumbre de usar objetos de texto. Los objetos de texto son m\u00e1s confiables que otros movimientos porque no importa tanto d\u00f3nde est\u00e1 ubicado el cursor. Por lo tanto, los comandos con objetos de texto son mucho m\u00e1s repetibles y, por lo tanto, funcionan maravillosamente en conjunto con el comando . . El comando . funciona muy bien en combinaci\u00f3n con los comandos de b\u00fasqueda de repetici\u00f3n ( ; , , , n o N ). Imagina que deseas eliminar todas las apariciones de cucumber . Un posible enfoque ser\u00eda buscar el pepino /cucumber , eliminarlo con daw y, a partir de ese momento, usar n para ir a la siguiente y . para eliminarlo. \u00a1Dos pulsaciones de teclas! De nuevo piensa en las posibilidades.","title":"Repetir el \u00faltimo cambio con el operador punto"},{"location":"05_operadores/#mas-comandos-de-edicion-de-texto-abreviado","text":"Adem\u00e1s de los operadores que aprendiste en este cap\u00edtulo, VIM ofrece una serie de atajos para operar con caracteres individuales que pueden ser \u00fatiles en ocasiones. Son: x es equivalente dl y elimina el car\u00e1cter debajo del cursor X es equivalente dh y elimina el car\u00e1cter antes del cursor s es equivalente a ch , elimina el car\u00e1cter debajo del cursor y lo pone en modo Insertar ~ para cambiar a may\u00fasculas/min\u00fasculas un car\u00e1cter Como de costumbre, todo el soporte anterior cuenta para operar en varios caracteres a la vez.","title":"M\u00e1s comandos de edici\u00f3n de texto abreviado"},{"location":"05_operadores/#deshacer-y-rehacer","text":"Tarde o temprano llegar\u00e1 un momento en que cometer\u00e1s un error. \u00a1Adm\u00edtelo! No eres perfecto. Nadie lo es. Y eso est\u00e1 bien. Sin embargo, no debes preocuparte, porque VIM te respalda: Escribe u y deshar\u00e1s tu \u00faltimo cambio, Escribe CTRL-R y lo rehar\u00e1s, Pheeewww ...","title":"Deshacer y rehacer"},{"location":"05_operadores/#resumen","text":"Los movimientos no son solo para moverse. Utilizados en combinaci\u00f3n con operadores, te permiten realizar operaciones en texto con facilidad y una velocidad sorprendente . Aplica un operador en un movimiento utilizando la melod\u00eda clave {operator}{motion} . Algunos de los operadores m\u00e1s \u00fatiles y comunes son: d para d elete, c para c hange, y para y ank (copiar) y p para p ut (pegar). Como puedes apreciar de estos operadores y los movimientos que has aprendido hasta ahora, los comandos de VIM son generalmente f\u00e1ciles de aprender porque tienen sentido y son f\u00e1ciles de adivinar. Cuando se duplica un operador, se le hace operar sobre una l\u00ednea . Por ejemplo, puedes usar dd para eliminar una l\u00ednea completa. De manera similar, cuando se usa un comando en may\u00fasculas, se ejecuta una versi\u00f3n m\u00e1s fuerte (o alternativa) del comando original . Por ejemplo, D elimina del cursor al final de una l\u00ednea. Esto es realmente \u00fatil y pueden ahorrarte mucho tiempo. Aprende a usarlos en lugar de sus alternativas m\u00e1s verbales. Las cuentas tambi\u00e9n funcionan con operadores . Se puede multiplicar el efecto de un movimiento combinado de operaci\u00f3n, utilizando una cuenta de la siguiente manera: {operator}{count}{motion} . Los objetos de texto tienen movimientos especiales que describen las partes de un documento: palabras, oraciones, p\u00e1rrafos y dem\u00e1s . Son incre\u00edblemente \u00fatiles en combinaci\u00f3n con los operadores de VIM. Usando operadores con objetos de texto se puede ser muy preciso y ordenarle a VIM que elimine una palabra o cambie el interior de una cadena o bloque de c\u00f3digo . Los objetos de texto ofrecen dos variantes: a (piensa en a como a ll) e i (piensa en i nner) que te permite operar en un objeto de texto m\u00e1s el espacio en blanco circundante o solo en las partes internas de un objeto de texto, respectivamente. Por ejemplo, el uso da\" elimina una cita completa que incluye espacios en blanco al final, usando di\" solo elimina lo que est\u00e9 rodeado de comillas. El comando punto te . permite repetir el \u00faltimo cambio y, como tal, es uno de los comandos repetidores m\u00e1s \u00fatiles. Las operaciones en objetos de texto son excelentes candidatos para el operador de punto porque son m\u00e1s repetibles . Una excelente manera de aprovechar el comando punto es usarlo en combinaci\u00f3n con b\u00fasquedas . Cuando lo hagas, puedes aplicar cambios de b\u00fasquedas sucesivas con solo dos pulsaciones de teclas: n o ; para encontrar la siguiente coincidencia y . repetir el \u00faltimo cambio. A veces cometer\u00e1s un error. Cuando eso sucede, puedes deshacer el \u00faltimo cambio con el comando u . Si cambias de opini\u00f3n o deshaces demasiado, escribe CTRL-R para r edo.","title":"Resumen"},{"location":"06_lenguaje_secreto/","text":"El lenguaje secreto de vim Como habr\u00e1s notado, todos los operadores, conteos y movimientos de Vim que has aprendido forman una especie de lenguaje (de programaci\u00f3n). Puedes pensar en los operadores como funciones, y cuentas y movimientos como argumentos, o usando una analog\u00eda a\u00fan m\u00e1s simple... Puedes pensar en operadores como verbos, cuentas como adjetivos y movimientos como objetos . La verdadera magia de Vim es la composici\u00f3n . A medida que vayas construyendo este vocabulario de operadores y movimientos, encontrar\u00e1s que puedes combinarlos seg\u00fan marque tu coraz\u00f3n. Tal como lo har\u00edas con las palabras de un idioma hablado. De manera que, una vez que sabes todo sobre el cl , caw , ciw , ct. del mundo, y que vayas a aprender c\u00f3mo funciona dl , no s\u00f3lo ser\u00e1s capaz de utilizar dl . No. Sabr\u00e1s inmediatamente que tambi\u00e9n se puede combinar el operador d con todo el vocabulario de movimientos que ya tienes a tu disposici\u00f3n y daw , diw , dt. hasta el final de los tiempos. Esto es muy refrescante . Cuando uses Vim, sentir\u00e1s que est\u00e1s navegando por un metauniverso de edici\u00f3n de texto , es como programar o controlar el mismo mecanismo de edici\u00f3n y escritura de texto. Si est\u00e1s familiarizado con git y c\u00f3mo se siente usar la l\u00ednea de comandos git para trabajar con el control del c\u00f3digo fuente, puedes pensar en Vim como el git de la edici\u00f3n de texto. (Dejando de lado el hecho de que Vim es anterior a git en casi 30 a\u00f1os). **Con Vim, te ver\u00e1s en un trozo de texto y ya no ver\u00e1 m\u00e1s que palabras o texto, ver\u00e1s las posibilidades de un n\u00famero infinito de operadores y movimientos que se pueden aplicar a la vez.","title":"06 Lenguaje secreto"},{"location":"06_lenguaje_secreto/#el-lenguaje-secreto-de-vim","text":"Como habr\u00e1s notado, todos los operadores, conteos y movimientos de Vim que has aprendido forman una especie de lenguaje (de programaci\u00f3n). Puedes pensar en los operadores como funciones, y cuentas y movimientos como argumentos, o usando una analog\u00eda a\u00fan m\u00e1s simple... Puedes pensar en operadores como verbos, cuentas como adjetivos y movimientos como objetos . La verdadera magia de Vim es la composici\u00f3n . A medida que vayas construyendo este vocabulario de operadores y movimientos, encontrar\u00e1s que puedes combinarlos seg\u00fan marque tu coraz\u00f3n. Tal como lo har\u00edas con las palabras de un idioma hablado. De manera que, una vez que sabes todo sobre el cl , caw , ciw , ct. del mundo, y que vayas a aprender c\u00f3mo funciona dl , no s\u00f3lo ser\u00e1s capaz de utilizar dl . No. Sabr\u00e1s inmediatamente que tambi\u00e9n se puede combinar el operador d con todo el vocabulario de movimientos que ya tienes a tu disposici\u00f3n y daw , diw , dt. hasta el final de los tiempos. Esto es muy refrescante . Cuando uses Vim, sentir\u00e1s que est\u00e1s navegando por un metauniverso de edici\u00f3n de texto , es como programar o controlar el mismo mecanismo de edici\u00f3n y escritura de texto. Si est\u00e1s familiarizado con git y c\u00f3mo se siente usar la l\u00ednea de comandos git para trabajar con el control del c\u00f3digo fuente, puedes pensar en Vim como el git de la edici\u00f3n de texto. (Dejando de lado el hecho de que Vim es anterior a git en casi 30 a\u00f1os). **Con Vim, te ver\u00e1s en un trozo de texto y ya no ver\u00e1 m\u00e1s que palabras o texto, ver\u00e1s las posibilidades de un n\u00famero infinito de operadores y movimientos que se pueden aplicar a la vez.","title":"El lenguaje secreto de vim"},{"location":"07_insertar_texto/","text":"Insertar texto a la vim Antes de editar un programa, alguien tendr\u00e1 que escribirlo y esa persona puede ser t\u00fa. En Vim, escribes c\u00f3digo en el modo Insertar . Has visto un poco del modo Insertar cuando usas el comando c , pero vamos a sumergirnos en este modo un poco m\u00e1s. Hay dos comandos principales que te ponen en modo Insertar : i por i nserto (insert) a por a nexo (append) El comando i de inserci\u00f3n te pone en modo de inserci\u00f3n antes del cursor. Mientras que el comando de anexi\u00f3n a te pone en modo de inserci\u00f3n despu\u00e9s del cursor. A partir de entonces, estar\u00e1s en modo Insertar y Vim se comportar\u00e1 como cualquier otro editor ( \u00a1 bienvenido de nuevo VSCode! ). Al igual que con muchos otros comandos de Vim i y a tienen contrapartida en may\u00fasculas que son versiones m\u00e1s fuertes de inserci\u00f3n y anexi\u00f3n: I te pone en modo Insertar al comienzo de la l\u00ednea actual mientras, A te pone en modo Insertar al final. Adem\u00e1s de i y a , hay otros tres comandos s\u00faper \u00fatiles para colocarnos en modo Insertar: o inserta una nueva l\u00ednea debajo de la actual y lo coloca en el modo Insertar (mnem\u00f3nico: o ne line below) O inserta una nueva l\u00ednea sobre la actual y tambi\u00e9n lo coloca en modo Insertar gi te pone en modo Insertar en el \u00faltimo lugar donde se dej\u00f3 el modo Insertar. Esto es genial si abandonas el modo Insertar por error (o no) y quieres volver a donde estabas y continuar escribiendo. Ok. Entonces, digamos que ahora est\u00e1s en modo Insertar , tecleas y cometes un error (\u00a1ay!). Algo as\u00ed como un error tipogr\u00e1fico. \u00bfVuelves al modo normal, arreglas el error tipogr\u00e1fico y vuelves al modo de inserci\u00f3n? \u00a1Por favor no! Algunas veces. A menudo, es m\u00e1s r\u00e1pido eliminar las letras o palabras incorrectas y escribir de nuevo. Hay un par de combinaciones de teclas que le permiten hacerlo directamente desde el modo Insertar : CTRL-h te permite eliminar el \u00faltimo car\u00e1cter que escribiste CTRL-w te permite eliminar la \u00faltima palabra que escribiste CTRL-u te permite eliminar la \u00faltima l\u00ednea que escribiste Eventualmente, querr\u00e1s salir del modo Insertar y hacer otras cosas. Hay tres maneras de hacer esto: ESC , CTRL-[ y CTRL-C . De todos \u00e9stos, el m\u00e1s f\u00e1cil de escribir es CTRL-C comenzar usando ese. En cap\u00edtulos posteriores, aprenderemos c\u00f3mo puede crear un mapeo personalizado que har\u00e1 que salir del modo Insertar sea muy f\u00e1cil.","title":"07 Insertar texto"},{"location":"07_insertar_texto/#insertar-texto-a-la-vim","text":"Antes de editar un programa, alguien tendr\u00e1 que escribirlo y esa persona puede ser t\u00fa. En Vim, escribes c\u00f3digo en el modo Insertar . Has visto un poco del modo Insertar cuando usas el comando c , pero vamos a sumergirnos en este modo un poco m\u00e1s. Hay dos comandos principales que te ponen en modo Insertar : i por i nserto (insert) a por a nexo (append) El comando i de inserci\u00f3n te pone en modo de inserci\u00f3n antes del cursor. Mientras que el comando de anexi\u00f3n a te pone en modo de inserci\u00f3n despu\u00e9s del cursor. A partir de entonces, estar\u00e1s en modo Insertar y Vim se comportar\u00e1 como cualquier otro editor ( \u00a1 bienvenido de nuevo VSCode! ). Al igual que con muchos otros comandos de Vim i y a tienen contrapartida en may\u00fasculas que son versiones m\u00e1s fuertes de inserci\u00f3n y anexi\u00f3n: I te pone en modo Insertar al comienzo de la l\u00ednea actual mientras, A te pone en modo Insertar al final. Adem\u00e1s de i y a , hay otros tres comandos s\u00faper \u00fatiles para colocarnos en modo Insertar: o inserta una nueva l\u00ednea debajo de la actual y lo coloca en el modo Insertar (mnem\u00f3nico: o ne line below) O inserta una nueva l\u00ednea sobre la actual y tambi\u00e9n lo coloca en modo Insertar gi te pone en modo Insertar en el \u00faltimo lugar donde se dej\u00f3 el modo Insertar. Esto es genial si abandonas el modo Insertar por error (o no) y quieres volver a donde estabas y continuar escribiendo. Ok. Entonces, digamos que ahora est\u00e1s en modo Insertar , tecleas y cometes un error (\u00a1ay!). Algo as\u00ed como un error tipogr\u00e1fico. \u00bfVuelves al modo normal, arreglas el error tipogr\u00e1fico y vuelves al modo de inserci\u00f3n? \u00a1Por favor no! Algunas veces. A menudo, es m\u00e1s r\u00e1pido eliminar las letras o palabras incorrectas y escribir de nuevo. Hay un par de combinaciones de teclas que le permiten hacerlo directamente desde el modo Insertar : CTRL-h te permite eliminar el \u00faltimo car\u00e1cter que escribiste CTRL-w te permite eliminar la \u00faltima palabra que escribiste CTRL-u te permite eliminar la \u00faltima l\u00ednea que escribiste Eventualmente, querr\u00e1s salir del modo Insertar y hacer otras cosas. Hay tres maneras de hacer esto: ESC , CTRL-[ y CTRL-C . De todos \u00e9stos, el m\u00e1s f\u00e1cil de escribir es CTRL-C comenzar usando ese. En cap\u00edtulos posteriores, aprenderemos c\u00f3mo puede crear un mapeo personalizado que har\u00e1 que salir del modo Insertar sea muy f\u00e1cil.","title":"Insertar texto a la vim"},{"location":"08_seleccionar_texto/","text":"Seleccionar texto en modo visual El modo visual es el equivalente de Vim a seleccionar texto con un mouse . Pero en lugar de usar un mouse lento, se selecciona un texto confiando en los r\u00e1pidos movimientos de Vim. A medida que seleccionas el texto en modo Visual , Vim resaltar\u00e1 tu selecci\u00f3n proporcionando una ayuda visual. Esta retroalimentaci\u00f3n visual hace que el modo Visual sea especialmente \u00fatil cuando sientas la necesidad de ser m\u00e1s preciso antes de realizar una acci\u00f3n. Hay tres formas de iniciar el modo Visual : v para el modo visual en cuanto a caracteres . Este modo te permite seleccionar texto car\u00e1cter a car\u00e1cter. V para modo visual en l\u00ednea . Este otro te permite seleccionar texto l\u00ednea por l\u00ednea. <Ctrl>-v para el modo visual por bloques . Este \u00faltimo modo te permite seleccionar texto usando bloques rectangulares El modo visual puede ser muy \u00fatil para copiar y pegar cosas y cuando se opera en bloques de texto o c\u00f3digo donde crees que necesitas esa retroalimentaci\u00f3n visual adicional. Funciona de manera opuesta al modo Normal . En el modo Normal , primero se define el operador y luego un movimiento que representa un texto al que aplicar ese operador: {operator}{count}{motion} En modo Visual , sin embargo, primero seleccionas el texto y luego escribe el operador: {trigger visual mode}{motion}{operator} As\u00ed que, para eliminar las siguientes dos l\u00edneas: lines filled with mambo jambo. that totally deserved to be deleted from existence. Puedes escribir d2s en modo Normal o: Ir al modo visual de l\u00edneas con V que selecciona la l\u00ednea actual Presiona j para bajar una l\u00ednea y as\u00ed seleccionarla tambi\u00e9n. Ahora que has seleccionado las dos l\u00edneas escribe d y ya no estar\u00e1n. El modo visual a menudo es m\u00e1s lento que usar comandos directamente en modo Normal, pero tendr\u00e1s esa ayuda visual adicional que te garantiza que est\u00e1s aplicando un comando exactamente donde deseas que se aplique .","title":"08 Seleccionar texto"},{"location":"08_seleccionar_texto/#seleccionar-texto-en-modo-visual","text":"El modo visual es el equivalente de Vim a seleccionar texto con un mouse . Pero en lugar de usar un mouse lento, se selecciona un texto confiando en los r\u00e1pidos movimientos de Vim. A medida que seleccionas el texto en modo Visual , Vim resaltar\u00e1 tu selecci\u00f3n proporcionando una ayuda visual. Esta retroalimentaci\u00f3n visual hace que el modo Visual sea especialmente \u00fatil cuando sientas la necesidad de ser m\u00e1s preciso antes de realizar una acci\u00f3n. Hay tres formas de iniciar el modo Visual : v para el modo visual en cuanto a caracteres . Este modo te permite seleccionar texto car\u00e1cter a car\u00e1cter. V para modo visual en l\u00ednea . Este otro te permite seleccionar texto l\u00ednea por l\u00ednea. <Ctrl>-v para el modo visual por bloques . Este \u00faltimo modo te permite seleccionar texto usando bloques rectangulares El modo visual puede ser muy \u00fatil para copiar y pegar cosas y cuando se opera en bloques de texto o c\u00f3digo donde crees que necesitas esa retroalimentaci\u00f3n visual adicional. Funciona de manera opuesta al modo Normal . En el modo Normal , primero se define el operador y luego un movimiento que representa un texto al que aplicar ese operador: {operator}{count}{motion} En modo Visual , sin embargo, primero seleccionas el texto y luego escribe el operador: {trigger visual mode}{motion}{operator} As\u00ed que, para eliminar las siguientes dos l\u00edneas: lines filled with mambo jambo. that totally deserved to be deleted from existence. Puedes escribir d2s en modo Normal o: Ir al modo visual de l\u00edneas con V que selecciona la l\u00ednea actual Presiona j para bajar una l\u00ednea y as\u00ed seleccionarla tambi\u00e9n. Ahora que has seleccionado las dos l\u00edneas escribe d y ya no estar\u00e1n. El modo visual a menudo es m\u00e1s lento que usar comandos directamente en modo Normal, pero tendr\u00e1s esa ayuda visual adicional que te garantiza que est\u00e1s aplicando un comando exactamente donde deseas que se aplique .","title":"Seleccionar texto en modo visual"},{"location":"09_coincidencias_de_b\u00fasqueda/","text":"Operando como un rayo con coincidencias de b\u00fasqueda Anteriormente, aprendiste c\u00f3mo puedes usar repetidores para guardar las pulsaciones de teclas y realizar acciones m\u00e1s r\u00e1pido. Escribe n para repetir una b\u00fasqueda. Escribe . para repetir el \u00faltimo cambio. Utilizando una combinaci\u00f3n de ambos n y . se puede aplicar el mismo cambio en cada b\u00fasqueda con solo dos pulsaciones de teclas. Dos pulsaciones de teclas. Eso es r\u00e1pido. Pero, \u00bfy si te digo que hay una manera m\u00e1s r\u00e1pida? Antes de entrar en eso, ilustremos el combo n y . con un ejemplo. Eso nos dar\u00e1 algunos antecedentes nuevos sobre lo que estamos tratando de lograr y nos permitir\u00e1 destacar c\u00f3mo el nuevo enfoque mejora en este caso. Por ejemplo, digamos que estamos en un mercado para destruir pepinos. Somos cazadores de pepinos mortales y robustos, y hay algunos pepinos que necesitan borrarse: pepino zanahoria lechuga repollo zanahoria lechuga pepino pepino pepino zanahoria col pepino col Una forma de hacerlo ser\u00eda: Ubica pepino con /pepino Destruye pepino con daw Escribe n para ir al siguiente objetivo Termina repitiendo el \u00faltimo cambio con el comando . Repite desde el paso 3 hasta que todos los pepinos se hayan terminado Recoger la recompensa Resulta que hay una forma a\u00fan m\u00e1s efectiva de realizar operaciones en las coincidencias de b\u00fasqueda: gn y gN . Puedes ver estos dos movimientos como versiones sobrealimentadas de n y N . gn funciona de la siguiente manera: Si est\u00e1s encima de una coincidencia de b\u00fasqueda, selecciona la coincidencia en modo Visual . Si est\u00e1s en modo Visual , extiende tu selecci\u00f3n actual hasta el final de la pr\u00f3xima coincidencia. (y la mejor parte) Si est\u00e1s en modo de operador pendiente , funciona con la pr\u00f3xima coincidencia . \u00bfQu\u00e9 significa todo esto? Significa que al aprovechar gn podemos operar con la pr\u00f3xima ocurrencia con solo presionar una tecla . Con gn el comando . encapsula el significado de \"aplicar este cambio a la pr\u00f3xima ocurrencia\" . En la pr\u00e1ctica, si seguimos el mismo ejemplo anterior usando el comando gn , seremos mucho m\u00e1s eficientes a la hora de terminar con los pepinos: Buscar pepinos con /pepino Aplicar el cambio a la pr\u00f3xima ocurrencia dgn Repetir el cambio en la pr\u00f3xima ocurrencia . Solo presiona . hasta que hayas terminado Recoge las recompensas mucho m\u00e1s r\u00e1pido Despu\u00e9s de usar gn no hay necesidad de combinar n y . porque . ya incluye la pr\u00f3xima ocurrencia. \u00a1Incre\u00edble! .","title":"Operando como un rayo con coincidencias de b\u00fasqueda"},{"location":"09_coincidencias_de_b\u00fasqueda/#operando-como-un-rayo-con-coincidencias-de-busqueda","text":"Anteriormente, aprendiste c\u00f3mo puedes usar repetidores para guardar las pulsaciones de teclas y realizar acciones m\u00e1s r\u00e1pido. Escribe n para repetir una b\u00fasqueda. Escribe . para repetir el \u00faltimo cambio. Utilizando una combinaci\u00f3n de ambos n y . se puede aplicar el mismo cambio en cada b\u00fasqueda con solo dos pulsaciones de teclas. Dos pulsaciones de teclas. Eso es r\u00e1pido. Pero, \u00bfy si te digo que hay una manera m\u00e1s r\u00e1pida? Antes de entrar en eso, ilustremos el combo n y . con un ejemplo. Eso nos dar\u00e1 algunos antecedentes nuevos sobre lo que estamos tratando de lograr y nos permitir\u00e1 destacar c\u00f3mo el nuevo enfoque mejora en este caso. Por ejemplo, digamos que estamos en un mercado para destruir pepinos. Somos cazadores de pepinos mortales y robustos, y hay algunos pepinos que necesitan borrarse: pepino zanahoria lechuga repollo zanahoria lechuga pepino pepino pepino zanahoria col pepino col Una forma de hacerlo ser\u00eda: Ubica pepino con /pepino Destruye pepino con daw Escribe n para ir al siguiente objetivo Termina repitiendo el \u00faltimo cambio con el comando . Repite desde el paso 3 hasta que todos los pepinos se hayan terminado Recoger la recompensa Resulta que hay una forma a\u00fan m\u00e1s efectiva de realizar operaciones en las coincidencias de b\u00fasqueda: gn y gN . Puedes ver estos dos movimientos como versiones sobrealimentadas de n y N . gn funciona de la siguiente manera: Si est\u00e1s encima de una coincidencia de b\u00fasqueda, selecciona la coincidencia en modo Visual . Si est\u00e1s en modo Visual , extiende tu selecci\u00f3n actual hasta el final de la pr\u00f3xima coincidencia. (y la mejor parte) Si est\u00e1s en modo de operador pendiente , funciona con la pr\u00f3xima coincidencia . \u00bfQu\u00e9 significa todo esto? Significa que al aprovechar gn podemos operar con la pr\u00f3xima ocurrencia con solo presionar una tecla . Con gn el comando . encapsula el significado de \"aplicar este cambio a la pr\u00f3xima ocurrencia\" . En la pr\u00e1ctica, si seguimos el mismo ejemplo anterior usando el comando gn , seremos mucho m\u00e1s eficientes a la hora de terminar con los pepinos: Buscar pepinos con /pepino Aplicar el cambio a la pr\u00f3xima ocurrencia dgn Repetir el cambio en la pr\u00f3xima ocurrencia . Solo presiona . hasta que hayas terminado Recoge las recompensas mucho m\u00e1s r\u00e1pido Despu\u00e9s de usar gn no hay necesidad de combinar n y . porque . ya incluye la pr\u00f3xima ocurrencia. \u00a1Incre\u00edble! .","title":"Operando como un rayo con coincidencias de b\u00fasqueda"},{"location":"10_copiar_y_pegar/","text":"Ampliando los l\u00edmites de copiar y pegar Copia y pega . No es muy emocionante, \u00bfverdad?. Probablemente est\u00e9s acostumbrado a usar tu rat\u00f3n para seleccionar texto, copiarlo o cortarlo, y luego pegarlo en otro lugar. Eso es todo. No hay mucho con qu\u00e9 emocionarse. Vim hace que copiar, cortar un poco sea m\u00e1s interesante: Cuenta con operadores brillantes y comandos que puedes usar en combinaci\u00f3n con todos los movimientos que has aprendido hasta ahora Proporciona un pu\u00f1ado de registros donde puedes guardar cosas para m\u00e1s adelante, lo que puede permitir flujos de trabajo interesantes y ayudarte a recuperar texto cuando lo eliminas por error Los dos principales para copiar y pegar son y y p . \u00bfPor qu\u00e9 se usa y en lugar de c c opy? . Bueno, si recuerdas de los cap\u00edtulos anteriores c ya est\u00e1 en uso, es el comando cambiar ( change ). Por lo tanto, los ingenieros de Vi tuvieron que dar con una manera colorida para describir copiar y se les ocurri\u00f3 y ank ( tirar ). As\u00ed que, en Vim no copias cosas, sino tiras de ellas (excelente nombre... \u00a1qu\u00e9 visceral!). p significa p ut pero podemos ignorar eso por seguridad y seguir llam\u00e1ndolo p aste . Porque somos rebeldes e indomables, y no nos importa lo que el mundo pueda pensar de nosotros. Yanking y es un operador. Puedes combinarlo con cualquiera de los movimientos y objetos de texto que hayas aprendido para tirar de cosas seg\u00fan desee tu coraz\u00f3n: yl y anks una l etra yaw y anks una w ord, yas y anks una s entencia yi( y anks todo dentro de los ( , y as\u00ed sucesivamente... Si se duplica y como en yy obtenemos un operador sobre l\u00edneas completas , como con dd y cc , es decir, un \"tir\u00f3n\" a una l\u00ednea entera. El Y comando tambi\u00e9n tira de una l\u00ednea completa. Prefiero usar, yy pero no dudes en elegir el que quieras. Pegado Para pegar cosas, usa el comando p y sus variantes: p pega algo despu\u00e9s del cursor P pega algo antes del cursor gp igual que p pero coloca el cursor despu\u00e9s de la selecci\u00f3n pegada gP igual que P y coloca el cursor despu\u00e9s de la selecci\u00f3n pegada \u00a1Esto es una flexibilidad asombrosa para pegar! Pegar en Vim es algo especial y el comportamiento de p y P depende de si has partido de caracteres o l\u00edneas. Si se han copiado caracteres , al pegarlos se colocar\u00e1n despu\u00e9s o antes del cursor (no hay sorpresas all\u00ed). Sin embargo, si se han copiado l\u00edneas , al pegar se colocar\u00e1n antes o despu\u00e9s de la l\u00ednea sobre la que descansa el cursor. \u00bfQuieres duplicar una l\u00ednea? . Es tan f\u00e1cil como escribir yyp . \u00bfQuieres n-plicar una l\u00ednea? . Es tan simple como escribir yy{count}p . \u00a1Si!. \u00a1Las cuentas tambi\u00e9n funcionan con tirar y pegar porque son solo comandos! (lo siento... me emocion\u00e9 demasiado). Si y copia cosas... \u00bfC\u00f3mo se cortan cosas en Vim? \u00a1Aj\u00e1! \u00a1Aqu\u00ed viene una sorpresa! . Cortar cosas en Vim \u00bfRecuerdas d y c de hace 10 minutos? . Bueno, cuando dije que borraste el texto en el olvido, \u00a1ment\u00ed! . En realidad se cortan cosas. Estabas cortando texto todo el tiempo y ni siquiera te diste cuenta. Texto que luego puedes pegar si eso es lo que quieres ( mindblown ). \u00bfQuieres intercambiar algunos caracteres? . Escribe dlp (o xp ). \u00bfQuieres intercambiar un par de l\u00edneas? . Escribe ddp . \u00a1Excelente! As\u00ed que ahora has aumentado tu conocimiento con tirones, cortes y pegados en Vim. Pero a\u00fan queda un elemento que a\u00fan no hemos tocado: los registros . Copiado m\u00faltiple y corte con registros Los registros son como un portapapeles especial donde puedes guardar varias cosas a la vez. Los siguientes registros son s\u00faper \u00fatiles: El registro sin nombre \" es donde se copian y cortan cosas, cuando no especificas expl\u00edcitamente un registro. Vamos, el registro predeterminado si lo deseas ver de ese modo. Los registros con nombre a-z son registros que puedes usar expl\u00edcitamente para copiar y cortar texto a voluntad. El registro de extracci\u00f3n 0 almacena lo \u00faltimo que has (copiado). Los registros de corte 1-9 almacenan las \u00faltimas 9 cosas que se cortaron utilizando el comando eliminar o cambiar. Los registros con nombre te permiten guardar fragmentos de textos para pegarlos m\u00e1s tarde. Puedes guardar expl\u00edcitamente en un registro utilizando el siguiente comando: \"{nombre del registro}y{motion} \"{nombre del registro}d{motion} \"{nombre del registro}c{motion} Por ejemplo, \"ayas tira de una oraci\u00f3n y la almacena en el registro a . Ahora, si deseas pegarlo en otro lugar, puedes escribir \"ap . Alternativamente, si usas la versi\u00f3n en may\u00fasculas de un registro (es decir, A en lugar de a ) agregas lo que copies o cortes en ese registro. El registro de extracci\u00f3n te permite tener acceso a lo que copiaste por \u00faltima vez a trav\u00e9s del comando y . Esto es \u00fatil porque las eliminaciones y los cambios no sobrescriben este registro como s\u00ed lo hacen con el registro sin nombre. Los registros de corte te dan acceso a las \u00faltimas 9 cosas que eliminaste o modificaste. Esto es genial si hay alg\u00fan texto que eliminaste anteriormente y que deseas recuperar. En cualquier momento, puedes usar el comando :reg para ver qu\u00e9 hay en tus registros. O puedes escribir :reg {register} para inspeccionar el contenido de un registro espec\u00edfico. Pegar en modo insertar Todos los comandos que hemos visto hasta ahora funcionan en modo Normal . \u00bfQu\u00e9 pasa si quieres pegar algo cuando est\u00e1s en modo Insertar ? Bueno, puedes hacer eso tambi\u00e9n. Utilizando CTRL-R {register} puedes pegar el contenido de un registro despu\u00e9s del cursor: CTRL-R \" pega el contenido del registro sin nombre CTRL-R a pega el contenido del registro a CTRL-R 0 pega el contenido del registro de extracci\u00f3n Al ser Visual Studio Code, significa que tambi\u00e9n puedes confiar en que tu sistema copie y pegue claves para pegar texto en el modo Insertar . Probablemente sea lo m\u00e1s conveniente para t\u00ed en la mayor\u00eda de los casos. Un consejo final. El uso del modo Insertar para pegar desde un registro elimina la limitaci\u00f3n de la extracci\u00f3n y el pegado de l\u00edneas. Entonces, utilizando este m\u00e9todo, puedes tirar de una l\u00ednea y luego pegarla justo despu\u00e9s del cursor. \u00a1Ahora ve y disfruta de copiar y pegar de verdad!.","title":"10 Copiar y pegar"},{"location":"10_copiar_y_pegar/#ampliando-los-limites-de-copiar-y-pegar","text":"Copia y pega . No es muy emocionante, \u00bfverdad?. Probablemente est\u00e9s acostumbrado a usar tu rat\u00f3n para seleccionar texto, copiarlo o cortarlo, y luego pegarlo en otro lugar. Eso es todo. No hay mucho con qu\u00e9 emocionarse. Vim hace que copiar, cortar un poco sea m\u00e1s interesante: Cuenta con operadores brillantes y comandos que puedes usar en combinaci\u00f3n con todos los movimientos que has aprendido hasta ahora Proporciona un pu\u00f1ado de registros donde puedes guardar cosas para m\u00e1s adelante, lo que puede permitir flujos de trabajo interesantes y ayudarte a recuperar texto cuando lo eliminas por error Los dos principales para copiar y pegar son y y p . \u00bfPor qu\u00e9 se usa y en lugar de c c opy? . Bueno, si recuerdas de los cap\u00edtulos anteriores c ya est\u00e1 en uso, es el comando cambiar ( change ). Por lo tanto, los ingenieros de Vi tuvieron que dar con una manera colorida para describir copiar y se les ocurri\u00f3 y ank ( tirar ). As\u00ed que, en Vim no copias cosas, sino tiras de ellas (excelente nombre... \u00a1qu\u00e9 visceral!). p significa p ut pero podemos ignorar eso por seguridad y seguir llam\u00e1ndolo p aste . Porque somos rebeldes e indomables, y no nos importa lo que el mundo pueda pensar de nosotros.","title":"Ampliando los l\u00edmites de copiar y pegar"},{"location":"10_copiar_y_pegar/#yanking","text":"y es un operador. Puedes combinarlo con cualquiera de los movimientos y objetos de texto que hayas aprendido para tirar de cosas seg\u00fan desee tu coraz\u00f3n: yl y anks una l etra yaw y anks una w ord, yas y anks una s entencia yi( y anks todo dentro de los ( , y as\u00ed sucesivamente... Si se duplica y como en yy obtenemos un operador sobre l\u00edneas completas , como con dd y cc , es decir, un \"tir\u00f3n\" a una l\u00ednea entera. El Y comando tambi\u00e9n tira de una l\u00ednea completa. Prefiero usar, yy pero no dudes en elegir el que quieras.","title":"Yanking"},{"location":"10_copiar_y_pegar/#pegado","text":"Para pegar cosas, usa el comando p y sus variantes: p pega algo despu\u00e9s del cursor P pega algo antes del cursor gp igual que p pero coloca el cursor despu\u00e9s de la selecci\u00f3n pegada gP igual que P y coloca el cursor despu\u00e9s de la selecci\u00f3n pegada \u00a1Esto es una flexibilidad asombrosa para pegar! Pegar en Vim es algo especial y el comportamiento de p y P depende de si has partido de caracteres o l\u00edneas. Si se han copiado caracteres , al pegarlos se colocar\u00e1n despu\u00e9s o antes del cursor (no hay sorpresas all\u00ed). Sin embargo, si se han copiado l\u00edneas , al pegar se colocar\u00e1n antes o despu\u00e9s de la l\u00ednea sobre la que descansa el cursor. \u00bfQuieres duplicar una l\u00ednea? . Es tan f\u00e1cil como escribir yyp . \u00bfQuieres n-plicar una l\u00ednea? . Es tan simple como escribir yy{count}p . \u00a1Si!. \u00a1Las cuentas tambi\u00e9n funcionan con tirar y pegar porque son solo comandos! (lo siento... me emocion\u00e9 demasiado). Si y copia cosas... \u00bfC\u00f3mo se cortan cosas en Vim? \u00a1Aj\u00e1! \u00a1Aqu\u00ed viene una sorpresa! .","title":"Pegado"},{"location":"10_copiar_y_pegar/#cortar-cosas-en-vim","text":"\u00bfRecuerdas d y c de hace 10 minutos? . Bueno, cuando dije que borraste el texto en el olvido, \u00a1ment\u00ed! . En realidad se cortan cosas. Estabas cortando texto todo el tiempo y ni siquiera te diste cuenta. Texto que luego puedes pegar si eso es lo que quieres ( mindblown ). \u00bfQuieres intercambiar algunos caracteres? . Escribe dlp (o xp ). \u00bfQuieres intercambiar un par de l\u00edneas? . Escribe ddp . \u00a1Excelente! As\u00ed que ahora has aumentado tu conocimiento con tirones, cortes y pegados en Vim. Pero a\u00fan queda un elemento que a\u00fan no hemos tocado: los registros .","title":"Cortar cosas en Vim"},{"location":"10_copiar_y_pegar/#copiado-multiple-y-corte-con-registros","text":"Los registros son como un portapapeles especial donde puedes guardar varias cosas a la vez. Los siguientes registros son s\u00faper \u00fatiles: El registro sin nombre \" es donde se copian y cortan cosas, cuando no especificas expl\u00edcitamente un registro. Vamos, el registro predeterminado si lo deseas ver de ese modo. Los registros con nombre a-z son registros que puedes usar expl\u00edcitamente para copiar y cortar texto a voluntad. El registro de extracci\u00f3n 0 almacena lo \u00faltimo que has (copiado). Los registros de corte 1-9 almacenan las \u00faltimas 9 cosas que se cortaron utilizando el comando eliminar o cambiar. Los registros con nombre te permiten guardar fragmentos de textos para pegarlos m\u00e1s tarde. Puedes guardar expl\u00edcitamente en un registro utilizando el siguiente comando: \"{nombre del registro}y{motion} \"{nombre del registro}d{motion} \"{nombre del registro}c{motion} Por ejemplo, \"ayas tira de una oraci\u00f3n y la almacena en el registro a . Ahora, si deseas pegarlo en otro lugar, puedes escribir \"ap . Alternativamente, si usas la versi\u00f3n en may\u00fasculas de un registro (es decir, A en lugar de a ) agregas lo que copies o cortes en ese registro. El registro de extracci\u00f3n te permite tener acceso a lo que copiaste por \u00faltima vez a trav\u00e9s del comando y . Esto es \u00fatil porque las eliminaciones y los cambios no sobrescriben este registro como s\u00ed lo hacen con el registro sin nombre. Los registros de corte te dan acceso a las \u00faltimas 9 cosas que eliminaste o modificaste. Esto es genial si hay alg\u00fan texto que eliminaste anteriormente y que deseas recuperar. En cualquier momento, puedes usar el comando :reg para ver qu\u00e9 hay en tus registros. O puedes escribir :reg {register} para inspeccionar el contenido de un registro espec\u00edfico.","title":"Copiado m\u00faltiple y corte con registros"},{"location":"10_copiar_y_pegar/#pegar-en-modo-insertar","text":"Todos los comandos que hemos visto hasta ahora funcionan en modo Normal . \u00bfQu\u00e9 pasa si quieres pegar algo cuando est\u00e1s en modo Insertar ? Bueno, puedes hacer eso tambi\u00e9n. Utilizando CTRL-R {register} puedes pegar el contenido de un registro despu\u00e9s del cursor: CTRL-R \" pega el contenido del registro sin nombre CTRL-R a pega el contenido del registro a CTRL-R 0 pega el contenido del registro de extracci\u00f3n Al ser Visual Studio Code, significa que tambi\u00e9n puedes confiar en que tu sistema copie y pegue claves para pegar texto en el modo Insertar . Probablemente sea lo m\u00e1s conveniente para t\u00ed en la mayor\u00eda de los casos. Un consejo final. El uso del modo Insertar para pegar desde un registro elimina la limitaci\u00f3n de la extracci\u00f3n y el pegado de l\u00edneas. Entonces, utilizando este m\u00e9todo, puedes tirar de una l\u00ednea y luego pegarla justo despu\u00e9s del cursor. \u00a1Ahora ve y disfruta de copiar y pegar de verdad!.","title":"Pegar en modo insertar"},{"location":"11_modo_linea_de_comando/","text":"Controla VSCode con el modo de l\u00ednea de comandos El modo de l\u00ednea de comandos es otro modo m\u00e1s en Vim. Su caracter\u00edstica definitoria es la capacidad de ejecutar comandos Ex (comandos que comienzan con : ) y patrones de b\u00fasqueda (que comienzan con / y ? ). Ya hemos discutido la b\u00fasqueda en cap\u00edtulos anteriores, por lo que nos centraremos en los comandos Ex en este. Los comandos Ex son muy \u00fatiles y diversos: algunos te permiten configurar Vim (fi :colorscheme ), otros te permiten realizar operaciones en todo el sistema (como crear un nuevo archivo con :edit ), algunos otros acceden a comandos de shell externos ( :! ), y otros le permiten editar r\u00e1pidamente m\u00faltiples l\u00edneas dentro de un documento con el movimiento de una mano (como :delete ). \u00bfPor qu\u00e9 se llaman comandos ex? \u00bf\u00a1Ex!? Un nombre extra\u00f1o \u00bfno?. Se llaman comandos Ex porque parte del modo de l\u00ednea de comandos de Vim se basa en un editor de l\u00ednea a\u00fan m\u00e1s antiguo llamado Ex (tambi\u00e9n escrito por el creador de vi Bill Joy). VSCodeVim solo admite un n\u00famero muy limitado de comandos Ex, pero se pueden mejorar en gran medida integrando VSCodeVim con Neovim . Este cap\u00edtulo presentar\u00e1 el modo de l\u00ednea de comandos , y dejaremos a Neovim hacia el final del libro cuando te hayas convertido en un practicante de Vim m\u00e1s experimentado. \u00a1Vamos a sumergirnos! Escribiendo un comando ex Un comando Ex com\u00fan es :edit . Te permite abrir o crear un archivo escribiendo: :edit {relative-path-to-file} Observe el : antes de este comando . A diferencia de los comandos del modo Normal , todos los comandos Ex comienzan con dos puntos. Escribir estos dos puntos activa el modo de l\u00ednea de comandos y lo configura para ingresar un comando. Para escribir un comando Ex, escribir literalmente : seguido del nombre del comando (por ejemplo :edit ). Cuando escribes dos puntos y un comando, el comando se mostrar\u00e1 en la parte inferior izquierda de la pantalla en la barra de estado de VSCode . \u00a1Vamos a intentarlo!. Crea un nuevo archivo escribiendo: :edit helloworld.js Deber\u00edas ver c\u00f3mo, a medida que escribes dos puntos ( : ) y el nombre del comando, un cursor y letras se materializan en la parte inferior de la pantalla dentro de la barra de estado. Cuando termines de escribir el comando y presiones < Enter > , se crear\u00e1 helloworld.py un nuevo archivo y VSCode lo abrir\u00e1 para que puedas comenzar a codificar. Si el nombre de archivo que se especifica ya pertenece a un archivo existente, simplemente se abrir\u00e1 ese archivo. :edit y caminos relativos Cuando se usa el comando :edit , VSCodeVim se configura para usar rutas relativas en relaci\u00f3n con el archivo abierto actualmente. No admite la finalizaci\u00f3n de TAB, por lo que es principalmente \u00fatil para crear nuevos archivos que comparten el lugar o viven cerca del archivo actual en el que est\u00e1s trabajando. Como de costumbre, Vim siempre trata de ahorrarte trabajo y esto no es diferente en el modo de l\u00ednea de comandos : cada comando Ex tiene una versi\u00f3n abreviada que le permite activar un comando con solo unas pocas letras. Por ejemplo, la versi\u00f3n abreviada de :edit es :e . Pruebe la taquigraf\u00eda con nuestro ejemplo anterior y ver\u00e1s c\u00f3mo obtienes los mismos resultados. Guardar y cerrar archivos Un par de ingeniosos comandos Ex te permiten guardar y cerrar archivos con bastante rapidez: Usa :write (abreviatura :w ) para guardar un archivo Usa :quit (abreviatura :q ) para cerrar un archivo Estos dos comandos son lo que me gusta llamar comandos suaves . Intentar\u00e1n realizar la acci\u00f3n que describen pero, en algunas condiciones, fallar\u00e1n y te pedir\u00e1n que tomes m\u00e1s medidas. Por ejemplo, :write guardar\u00e1 un archivo pero fallar\u00e1 si el archivo no ha cambiado o si es de solo lectura. Del mismo modo :quit , cerrar\u00e1 un archivo pero fallar\u00e1 si el archivo tiene cambios sin guardar. Si deseas ignorar cualquier queja y realizar una acci\u00f3n a toda costa, puedes combinar los comandos anteriores con ! . Puedes pensar en el ! como una forma de forzar un comando: Usa :write! (abreviatura :w! ) para guardar un archivo incluso si ya se ha guardado o si es de solo lectura Usa :quit! (abreviatura :q! ) para cerrar un archivo sin guardar. Puedes combinar estos comandos para realizar m\u00faltiples acciones: Usa :wq para guardar y cerrar un archivo O apl\u00edcalos a todos los archivos abiertos a la vez: Usa :wall (abreviatura :wa ) para guardar todos los archivos Usa :qall (abreviatura :qa ) para cerrar todos los archivos Usa :wqall (abreviatura :wqa ) para guardar y cerrar todos los archivos Usa :qall! (abreviatura :qa! ) para cerrar todos los archivos sin guardar Eliminar varias l\u00edneas a la vez En cap\u00edtulos anteriores aprendiste que Vim tiene un grupo de operadores que te permiten realizar cambios en el texto: d eliminar, c cambiar, y tirar, etc. Vim tambi\u00e9n proporciona una serie de comandos Ex que realizan acciones equivalentes a los operadores del modo Normal pero con un caso de uso diferente en mente: operar en varias l\u00edneas a la vez. Estos comandos Ex de edici\u00f3n de texto toman la siguiente forma: :[range]command[options] ...donde range define un rango de l\u00edneas a las que aplicar el comando y options var\u00edan seg\u00fan el comando en s\u00ed. Por ejemplo, en el caso de :delete tenemos: :[range]d [register] Donde register representa un registro en el que cortar lo que sea que eliminamos. Por ejemplo: :10,12d a Elimina las l\u00edneas 10, 11 y 12 y las coloca dentro del registro a . Como puedes apreciar, los rangos generalmente se definen por sus extremos: una l\u00ednea inicial y una l\u00ednea final. Estos extremos pueden, a su vez, expresarse de diferentes maneras: Usar n\u00fameros (por ejemplo, :10,12d para eliminar las l\u00edneas 10, 11 y 12) Uso de compensaciones (por ejemplo, :10,+2d para eliminar las l\u00edneas 10, 11 y 12) Usar la l\u00ednea actual representada por . (por ejemplo, :.,+2d para eliminar la l\u00ednea actual y las dos siguientes) Utilizando % para representar todo el archivo (por ejemplo, :%d para eliminar todo el archivo) Utilizando 0 para representar el comienzo del archivo (por ejemplo, :0,+10d para eliminar las primeras 10 l\u00edneas) Utilizando $ para representar el final del archivo (por ejemplo, :.,$d para eliminar de la l\u00ednea actual al final del archivo) Si usas el modo Visual para hacer una selecci\u00f3n de texto y luego escribes, : tu \u00e1rea de l\u00ednea de comando se completar\u00e1 previamente con el siguiente gobbledygook: :'<,'> que es un rango especial que representa la selecci\u00f3n actual de texto visual (por ejemplo, :'<,'>d significa eliminar la selecci\u00f3n de texto actual). \u00bfPor qu\u00e9 usar comandos Ex en lugar de los comandos de modo normal que aprendimos en cap\u00edtulos anteriores? Los comandos Ex son \u00fatiles porque te permiten aplicar un comando en un rango de l\u00edneas sin necesidad de mover el cursor a esa ubicaci\u00f3n primero. Siempre que necesites aplicar un cambio en varias l\u00edneas, considera usar comandos Ex . Puede ser un enfoque m\u00e1s r\u00e1pido que el modo Normal . Otras alternativas de comandos Ex \u00fatiles a los comandos del modo Normal son :yank , :put , :copy y :move pero no son compatibles con VSCodeVim a menos que habilitemos la integraci\u00f3n con Neovim. Repetir comandos Ex Al igual que puedes repetir los comandos del modo Normal con el operador punto, los comandos Ex tambi\u00e9n tienen un comando repetidor. Escribe @: y repetir\u00e1s el \u00faltimo comando Ex, a partir de ese momento puedes repetirlo nuevamente con @@ . Sustituir texto Otro comando Ex \u00fatil es :substitute . Te permite sustituir fragmentos arbitrarios de texto por otros de su elecci\u00f3n. La forma de este comando es: :[range]s/{pattern}/{substitute}/{flags} D\u00f3nde: range define el rango en el que aplicaremos la sustituci\u00f3n pattern es un patr\u00f3n de b\u00fasqueda que describe el texto que queremos cambiar. Como si /{pattern} fuera compatible con expresiones regulares. substitute es el texto que queremos sustituir flags establezcamos opciones que configuren la sustituci\u00f3n Por ejemplo, el siguiente comando: :s/led/gold transmuta la primera aparici\u00f3n de led en la l\u00ednea actual por gold . Si queremos cambiar todas las ocurrencias en la l\u00ednea actual , necesitamos agregar la bandera g o bandera global de la siguiente manera: :s/led/gold/g Y si queremos cambiar todas las apariciones de un archivo completo , solo tenemos que especificar el archivo completo como un rango con % esto es: :%s/led/gold/g Adem\u00e1s de la bandera g podemos usar: i para b\u00fasquedas insensibles a may\u00fasculas y min\u00fasculas c para confirmar todas y cada una de las sustituciones El hecho de que podamos usar expresiones regulares con el comando :s abre la puerta a muchos casos de uso creativo. Por ejemplo, podr\u00edamos cambiar el nivel de sangr\u00eda de todos los t\u00edtulos en un archivo de reducci\u00f3n utilizando el siguiente comando :s : :%s/^#// Que se puede traducir como: % para todo el archivo s sustituir ^# cualquiera # al comienzo de una l\u00ednea (es decir, un encabezado en la reducci\u00f3n) // para un car\u00e1cter vac\u00edo Global por defecto A menudo, cuando hago una sustituci\u00f3n, quiero cambiar todas las ocurrencias de un patr\u00f3n. Si tienes el mismo h\u00e1bito, es posible que desees habilitar la opci\u00f3n \"Vim: Sustitute como global\" en tus preferencias de VSCodeVim. Esto habilitar\u00e1 la bandera g para todas las sustituciones y te ahorrar\u00e1 algo de escritura. Cuando esta opci\u00f3n est\u00e1 activada, la bandera g cambia su significado al opuesto de lo que sol\u00eda ser. A partir de entonces, agregarlo a un comando :s significar\u00e1 que solo se sustituir\u00e1 la primera aparici\u00f3n en una l\u00ednea.","title":"11 Modo l\u00ednea de comando"},{"location":"11_modo_linea_de_comando/#controla-vscode-con-el-modo-de-linea-de-comandos","text":"El modo de l\u00ednea de comandos es otro modo m\u00e1s en Vim. Su caracter\u00edstica definitoria es la capacidad de ejecutar comandos Ex (comandos que comienzan con : ) y patrones de b\u00fasqueda (que comienzan con / y ? ). Ya hemos discutido la b\u00fasqueda en cap\u00edtulos anteriores, por lo que nos centraremos en los comandos Ex en este. Los comandos Ex son muy \u00fatiles y diversos: algunos te permiten configurar Vim (fi :colorscheme ), otros te permiten realizar operaciones en todo el sistema (como crear un nuevo archivo con :edit ), algunos otros acceden a comandos de shell externos ( :! ), y otros le permiten editar r\u00e1pidamente m\u00faltiples l\u00edneas dentro de un documento con el movimiento de una mano (como :delete ). \u00bfPor qu\u00e9 se llaman comandos ex? \u00bf\u00a1Ex!? Un nombre extra\u00f1o \u00bfno?. Se llaman comandos Ex porque parte del modo de l\u00ednea de comandos de Vim se basa en un editor de l\u00ednea a\u00fan m\u00e1s antiguo llamado Ex (tambi\u00e9n escrito por el creador de vi Bill Joy). VSCodeVim solo admite un n\u00famero muy limitado de comandos Ex, pero se pueden mejorar en gran medida integrando VSCodeVim con Neovim . Este cap\u00edtulo presentar\u00e1 el modo de l\u00ednea de comandos , y dejaremos a Neovim hacia el final del libro cuando te hayas convertido en un practicante de Vim m\u00e1s experimentado. \u00a1Vamos a sumergirnos!","title":"Controla VSCode con el modo de l\u00ednea de comandos"},{"location":"11_modo_linea_de_comando/#escribiendo-un-comando-ex","text":"Un comando Ex com\u00fan es :edit . Te permite abrir o crear un archivo escribiendo: :edit {relative-path-to-file} Observe el : antes de este comando . A diferencia de los comandos del modo Normal , todos los comandos Ex comienzan con dos puntos. Escribir estos dos puntos activa el modo de l\u00ednea de comandos y lo configura para ingresar un comando. Para escribir un comando Ex, escribir literalmente : seguido del nombre del comando (por ejemplo :edit ). Cuando escribes dos puntos y un comando, el comando se mostrar\u00e1 en la parte inferior izquierda de la pantalla en la barra de estado de VSCode . \u00a1Vamos a intentarlo!. Crea un nuevo archivo escribiendo: :edit helloworld.js Deber\u00edas ver c\u00f3mo, a medida que escribes dos puntos ( : ) y el nombre del comando, un cursor y letras se materializan en la parte inferior de la pantalla dentro de la barra de estado. Cuando termines de escribir el comando y presiones < Enter > , se crear\u00e1 helloworld.py un nuevo archivo y VSCode lo abrir\u00e1 para que puedas comenzar a codificar. Si el nombre de archivo que se especifica ya pertenece a un archivo existente, simplemente se abrir\u00e1 ese archivo.","title":"Escribiendo un comando ex"},{"location":"11_modo_linea_de_comando/#edit-y-caminos-relativos","text":"Cuando se usa el comando :edit , VSCodeVim se configura para usar rutas relativas en relaci\u00f3n con el archivo abierto actualmente. No admite la finalizaci\u00f3n de TAB, por lo que es principalmente \u00fatil para crear nuevos archivos que comparten el lugar o viven cerca del archivo actual en el que est\u00e1s trabajando. Como de costumbre, Vim siempre trata de ahorrarte trabajo y esto no es diferente en el modo de l\u00ednea de comandos : cada comando Ex tiene una versi\u00f3n abreviada que le permite activar un comando con solo unas pocas letras. Por ejemplo, la versi\u00f3n abreviada de :edit es :e . Pruebe la taquigraf\u00eda con nuestro ejemplo anterior y ver\u00e1s c\u00f3mo obtienes los mismos resultados.","title":":edit y caminos relativos"},{"location":"11_modo_linea_de_comando/#guardar-y-cerrar-archivos","text":"Un par de ingeniosos comandos Ex te permiten guardar y cerrar archivos con bastante rapidez: Usa :write (abreviatura :w ) para guardar un archivo Usa :quit (abreviatura :q ) para cerrar un archivo Estos dos comandos son lo que me gusta llamar comandos suaves . Intentar\u00e1n realizar la acci\u00f3n que describen pero, en algunas condiciones, fallar\u00e1n y te pedir\u00e1n que tomes m\u00e1s medidas. Por ejemplo, :write guardar\u00e1 un archivo pero fallar\u00e1 si el archivo no ha cambiado o si es de solo lectura. Del mismo modo :quit , cerrar\u00e1 un archivo pero fallar\u00e1 si el archivo tiene cambios sin guardar. Si deseas ignorar cualquier queja y realizar una acci\u00f3n a toda costa, puedes combinar los comandos anteriores con ! . Puedes pensar en el ! como una forma de forzar un comando: Usa :write! (abreviatura :w! ) para guardar un archivo incluso si ya se ha guardado o si es de solo lectura Usa :quit! (abreviatura :q! ) para cerrar un archivo sin guardar. Puedes combinar estos comandos para realizar m\u00faltiples acciones: Usa :wq para guardar y cerrar un archivo O apl\u00edcalos a todos los archivos abiertos a la vez: Usa :wall (abreviatura :wa ) para guardar todos los archivos Usa :qall (abreviatura :qa ) para cerrar todos los archivos Usa :wqall (abreviatura :wqa ) para guardar y cerrar todos los archivos Usa :qall! (abreviatura :qa! ) para cerrar todos los archivos sin guardar","title":"Guardar y cerrar archivos"},{"location":"11_modo_linea_de_comando/#eliminar-varias-lineas-a-la-vez","text":"En cap\u00edtulos anteriores aprendiste que Vim tiene un grupo de operadores que te permiten realizar cambios en el texto: d eliminar, c cambiar, y tirar, etc. Vim tambi\u00e9n proporciona una serie de comandos Ex que realizan acciones equivalentes a los operadores del modo Normal pero con un caso de uso diferente en mente: operar en varias l\u00edneas a la vez. Estos comandos Ex de edici\u00f3n de texto toman la siguiente forma: :[range]command[options] ...donde range define un rango de l\u00edneas a las que aplicar el comando y options var\u00edan seg\u00fan el comando en s\u00ed. Por ejemplo, en el caso de :delete tenemos: :[range]d [register] Donde register representa un registro en el que cortar lo que sea que eliminamos. Por ejemplo: :10,12d a Elimina las l\u00edneas 10, 11 y 12 y las coloca dentro del registro a . Como puedes apreciar, los rangos generalmente se definen por sus extremos: una l\u00ednea inicial y una l\u00ednea final. Estos extremos pueden, a su vez, expresarse de diferentes maneras: Usar n\u00fameros (por ejemplo, :10,12d para eliminar las l\u00edneas 10, 11 y 12) Uso de compensaciones (por ejemplo, :10,+2d para eliminar las l\u00edneas 10, 11 y 12) Usar la l\u00ednea actual representada por . (por ejemplo, :.,+2d para eliminar la l\u00ednea actual y las dos siguientes) Utilizando % para representar todo el archivo (por ejemplo, :%d para eliminar todo el archivo) Utilizando 0 para representar el comienzo del archivo (por ejemplo, :0,+10d para eliminar las primeras 10 l\u00edneas) Utilizando $ para representar el final del archivo (por ejemplo, :.,$d para eliminar de la l\u00ednea actual al final del archivo) Si usas el modo Visual para hacer una selecci\u00f3n de texto y luego escribes, : tu \u00e1rea de l\u00ednea de comando se completar\u00e1 previamente con el siguiente gobbledygook: :'<,'> que es un rango especial que representa la selecci\u00f3n actual de texto visual (por ejemplo, :'<,'>d significa eliminar la selecci\u00f3n de texto actual). \u00bfPor qu\u00e9 usar comandos Ex en lugar de los comandos de modo normal que aprendimos en cap\u00edtulos anteriores? Los comandos Ex son \u00fatiles porque te permiten aplicar un comando en un rango de l\u00edneas sin necesidad de mover el cursor a esa ubicaci\u00f3n primero. Siempre que necesites aplicar un cambio en varias l\u00edneas, considera usar comandos Ex . Puede ser un enfoque m\u00e1s r\u00e1pido que el modo Normal . Otras alternativas de comandos Ex \u00fatiles a los comandos del modo Normal son :yank , :put , :copy y :move pero no son compatibles con VSCodeVim a menos que habilitemos la integraci\u00f3n con Neovim.","title":"Eliminar varias l\u00edneas a la vez"},{"location":"11_modo_linea_de_comando/#repetir-comandos-ex","text":"Al igual que puedes repetir los comandos del modo Normal con el operador punto, los comandos Ex tambi\u00e9n tienen un comando repetidor. Escribe @: y repetir\u00e1s el \u00faltimo comando Ex, a partir de ese momento puedes repetirlo nuevamente con @@ .","title":"Repetir comandos Ex"},{"location":"11_modo_linea_de_comando/#sustituir-texto","text":"Otro comando Ex \u00fatil es :substitute . Te permite sustituir fragmentos arbitrarios de texto por otros de su elecci\u00f3n. La forma de este comando es: :[range]s/{pattern}/{substitute}/{flags} D\u00f3nde: range define el rango en el que aplicaremos la sustituci\u00f3n pattern es un patr\u00f3n de b\u00fasqueda que describe el texto que queremos cambiar. Como si /{pattern} fuera compatible con expresiones regulares. substitute es el texto que queremos sustituir flags establezcamos opciones que configuren la sustituci\u00f3n Por ejemplo, el siguiente comando: :s/led/gold transmuta la primera aparici\u00f3n de led en la l\u00ednea actual por gold . Si queremos cambiar todas las ocurrencias en la l\u00ednea actual , necesitamos agregar la bandera g o bandera global de la siguiente manera: :s/led/gold/g Y si queremos cambiar todas las apariciones de un archivo completo , solo tenemos que especificar el archivo completo como un rango con % esto es: :%s/led/gold/g Adem\u00e1s de la bandera g podemos usar: i para b\u00fasquedas insensibles a may\u00fasculas y min\u00fasculas c para confirmar todas y cada una de las sustituciones El hecho de que podamos usar expresiones regulares con el comando :s abre la puerta a muchos casos de uso creativo. Por ejemplo, podr\u00edamos cambiar el nivel de sangr\u00eda de todos los t\u00edtulos en un archivo de reducci\u00f3n utilizando el siguiente comando :s : :%s/^#// Que se puede traducir como: % para todo el archivo s sustituir ^# cualquiera # al comienzo de una l\u00ednea (es decir, un encabezado en la reducci\u00f3n) // para un car\u00e1cter vac\u00edo","title":"Sustituir texto"},{"location":"11_modo_linea_de_comando/#global-por-defecto","text":"A menudo, cuando hago una sustituci\u00f3n, quiero cambiar todas las ocurrencias de un patr\u00f3n. Si tienes el mismo h\u00e1bito, es posible que desees habilitar la opci\u00f3n \"Vim: Sustitute como global\" en tus preferencias de VSCodeVim. Esto habilitar\u00e1 la bandera g para todas las sustituciones y te ahorrar\u00e1 algo de escritura. Cuando esta opci\u00f3n est\u00e1 activada, la bandera g cambia su significado al opuesto de lo que sol\u00eda ser. A partir de entonces, agregarlo a un comando :s significar\u00e1 que solo se sustituir\u00e1 la primera aparici\u00f3n en una l\u00ednea.","title":"Global por defecto"},{"location":"12_divisiones_y_pestanas/","text":"Divisiones, pesta\u00f1as y cambio entre ellas Una gran caracter\u00edstica en Vim es su gran soporte para divisiones y pesta\u00f1as. Crear, redimensionar, reorganizar y mover entre divisiones y pesta\u00f1as es incre\u00edblemente f\u00e1cil y r\u00e1pido en Vim. VSCodeVim ofrece un soporte aceptable para esta caracter\u00edstica de Vim que, aunque no es tan buena como la de Vim, sigue siendo \u00fatil. Splits Las divisiones son incre\u00edbles. Te permiten configurar tu espacio de trabajo en ventanas divididas vertical y horizontalmente: Usa el comando :sp {relative-path-to-file} para abrir un archivo en un espacio horizontal resaltado. Utiliza el :vsp {relative-path-to-file} para abrir un archivo en un sp lit v ertical. Alternativamente, en lugar de estos comandos Ex, puedes usar: Ctrl-W S abrir una divisi\u00f3n horizontal (mnem\u00f3nico W indow y S plit). Ctrl-W V para abrir una divisi\u00f3n vertical (mnem\u00f3nico W indow V ertical). El uso de cualquiera de estos comandos abrir\u00e1 una divisi\u00f3n en el mismo archivo que est\u00e1s editando actualmente. Entonces, despu\u00e9s de crear la divisi\u00f3n, deber\u00e1s escribir CTRL-P para abrir un nuevo archivo en esa divisi\u00f3n. Puedes moverte entre divisiones usando CTRL-W + hjkl . \u00bfEst\u00e1s actualmente en una divisi\u00f3n vertical y quieres moverte a la de la derecha? Escribe CTRL-W luego l (el movimiento que normalmente usas para mover el cursor hacia la derecha). Tiene sentido, \u00bfno? Esta combinaci\u00f3n de teclas funciona incluso al saltar de una ventana de c\u00f3digo al explorador de archivos o un terminal integrado. \u00a1Genial! Pesta\u00f1as En Visual Studio Code se pueden abrir varias pesta\u00f1as dentro de una divisi\u00f3n. Con el fin de hacerlo: Usa :tabnew {file} para abrir un archivo en una pesta\u00f1a nueva Usa :tabn ( :tabnext ) para ir a la pesta\u00f1a n ext Usa :tabp ( :tabprevious ) para ir a la p esta\u00f1a previa Usa :tabo ( :tabonly ) para cerrar todas las dem\u00e1s pesta\u00f1as Hay algunos comandos Ex adicionales para trabajar con pesta\u00f1as, pero estos son definitivamente los m\u00e1s \u00fatiles. Todav\u00eda hay mucho que escribir \u00a1Lo s\u00e9! Los comandos predeterminados para operar y moverse por divisiones y pesta\u00f1as son un poco detallados y por tanto engorrosos e inc\u00f3modos. En cap\u00edtulos posteriores, aprender\u00e1s c\u00f3mo puedes personalizarlos para usar divisiones y pesta\u00f1as de manera m\u00e1s efectiva.","title":"12 Divisiones y pesta\u00f1as"},{"location":"12_divisiones_y_pestanas/#divisiones-pestanas-y-cambio-entre-ellas","text":"Una gran caracter\u00edstica en Vim es su gran soporte para divisiones y pesta\u00f1as. Crear, redimensionar, reorganizar y mover entre divisiones y pesta\u00f1as es incre\u00edblemente f\u00e1cil y r\u00e1pido en Vim. VSCodeVim ofrece un soporte aceptable para esta caracter\u00edstica de Vim que, aunque no es tan buena como la de Vim, sigue siendo \u00fatil.","title":"Divisiones, pesta\u00f1as y cambio entre ellas"},{"location":"12_divisiones_y_pestanas/#splits","text":"Las divisiones son incre\u00edbles. Te permiten configurar tu espacio de trabajo en ventanas divididas vertical y horizontalmente: Usa el comando :sp {relative-path-to-file} para abrir un archivo en un espacio horizontal resaltado. Utiliza el :vsp {relative-path-to-file} para abrir un archivo en un sp lit v ertical. Alternativamente, en lugar de estos comandos Ex, puedes usar: Ctrl-W S abrir una divisi\u00f3n horizontal (mnem\u00f3nico W indow y S plit). Ctrl-W V para abrir una divisi\u00f3n vertical (mnem\u00f3nico W indow V ertical). El uso de cualquiera de estos comandos abrir\u00e1 una divisi\u00f3n en el mismo archivo que est\u00e1s editando actualmente. Entonces, despu\u00e9s de crear la divisi\u00f3n, deber\u00e1s escribir CTRL-P para abrir un nuevo archivo en esa divisi\u00f3n. Puedes moverte entre divisiones usando CTRL-W + hjkl . \u00bfEst\u00e1s actualmente en una divisi\u00f3n vertical y quieres moverte a la de la derecha? Escribe CTRL-W luego l (el movimiento que normalmente usas para mover el cursor hacia la derecha). Tiene sentido, \u00bfno? Esta combinaci\u00f3n de teclas funciona incluso al saltar de una ventana de c\u00f3digo al explorador de archivos o un terminal integrado. \u00a1Genial!","title":"Splits"},{"location":"12_divisiones_y_pestanas/#pestanas","text":"En Visual Studio Code se pueden abrir varias pesta\u00f1as dentro de una divisi\u00f3n. Con el fin de hacerlo: Usa :tabnew {file} para abrir un archivo en una pesta\u00f1a nueva Usa :tabn ( :tabnext ) para ir a la pesta\u00f1a n ext Usa :tabp ( :tabprevious ) para ir a la p esta\u00f1a previa Usa :tabo ( :tabonly ) para cerrar todas las dem\u00e1s pesta\u00f1as Hay algunos comandos Ex adicionales para trabajar con pesta\u00f1as, pero estos son definitivamente los m\u00e1s \u00fatiles.","title":"Pesta\u00f1as"},{"location":"12_divisiones_y_pestanas/#todavia-hay-mucho-que-escribir-lo-se","text":"Los comandos predeterminados para operar y moverse por divisiones y pesta\u00f1as son un poco detallados y por tanto engorrosos e inc\u00f3modos. En cap\u00edtulos posteriores, aprender\u00e1s c\u00f3mo puedes personalizarlos para usar divisiones y pesta\u00f1as de manera m\u00e1s efectiva.","title":"Todav\u00eda hay mucho que escribir \u00a1Lo s\u00e9!"},{"location":"13_vim-surround/","text":"Cosas circundantes con vim surround VSCodeVim viene con un mont\u00f3n de complementos \u00fatiles de Vim integrados. Uno de ellos es vim-surround, que est\u00e1 habilitado de forma predeterminada y extiende el lenguaje secreto de Vim con un nuevo operador: surround o s . Usando el operador de \"sonido\" envolvente podemos operar en los alrededores (comillas, par\u00e9ntesis, llaves, etiquetas, etc.) de franjas de texto de la misma manera que utilizamos otros operadores dentro de Vim. El operador envolvente en s\u00ed mismo puede verse como tres operadores separados: ds para eliminar los alrededores cs para cambiar el entorno ys para agregar alrededores Y as\u00ed, como cualquier operador en Vim, se usar\u00edan as\u00ed: ds{count}{motion} cs{count}{motion} ys{count}{motion} Por ejemplo: ds' para eliminar el entorno ' ( ds{char} ) cs'\" cambiar el entorno ' para \" ( cs{old}{new} ) ysaptli> para rodear un p\u00e1rrafo con un t ag <li> ( ys{motion}{char} ) \u00bfRecuerda que siempre puedes usar el comando . para repetir el \u00faltimo cambio? \u00bfDeseas rodear varios elementos de texto con un elemento <li> ? Puedes escribir ysaptli> la primera vez y luego . las siguientes. Tambi\u00e9n puedes usar vim-surround seleccionando un poco de texto en modo visual y luego us\u00e1ndolo S{desired character} . Esto rodear\u00e1 tu selecci\u00f3n de texto con el car\u00e1cter deseado. Int\u00e9ntalo. Te ahorrar\u00e1 mucho de tiempo.","title":"13 Vim-surround"},{"location":"13_vim-surround/#cosas-circundantes-con-vim-surround","text":"VSCodeVim viene con un mont\u00f3n de complementos \u00fatiles de Vim integrados. Uno de ellos es vim-surround, que est\u00e1 habilitado de forma predeterminada y extiende el lenguaje secreto de Vim con un nuevo operador: surround o s . Usando el operador de \"sonido\" envolvente podemos operar en los alrededores (comillas, par\u00e9ntesis, llaves, etiquetas, etc.) de franjas de texto de la misma manera que utilizamos otros operadores dentro de Vim. El operador envolvente en s\u00ed mismo puede verse como tres operadores separados: ds para eliminar los alrededores cs para cambiar el entorno ys para agregar alrededores Y as\u00ed, como cualquier operador en Vim, se usar\u00edan as\u00ed: ds{count}{motion} cs{count}{motion} ys{count}{motion} Por ejemplo: ds' para eliminar el entorno ' ( ds{char} ) cs'\" cambiar el entorno ' para \" ( cs{old}{new} ) ysaptli> para rodear un p\u00e1rrafo con un t ag <li> ( ys{motion}{char} ) \u00bfRecuerda que siempre puedes usar el comando . para repetir el \u00faltimo cambio? \u00bfDeseas rodear varios elementos de texto con un elemento <li> ? Puedes escribir ysaptli> la primera vez y luego . las siguientes. Tambi\u00e9n puedes usar vim-surround seleccionando un poco de texto en modo visual y luego us\u00e1ndolo S{desired character} . Esto rodear\u00e1 tu selecci\u00f3n de texto con el car\u00e1cter deseado. Int\u00e9ntalo. Te ahorrar\u00e1 mucho de tiempo.","title":"Cosas circundantes con vim surround"}]}